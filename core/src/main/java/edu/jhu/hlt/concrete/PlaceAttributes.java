/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class PlaceAttributes implements org.apache.thrift.TBase<PlaceAttributes, PlaceAttributes._Fields>, java.io.Serializable, Cloneable, Comparable<PlaceAttributes> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlaceAttributes");

  private static final org.apache.thrift.protocol.TField STREET_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("streetAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("locality", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PlaceAttributesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PlaceAttributesTupleSchemeFactory();

  private java.lang.String streetAddress; // optional
  private java.lang.String region; // optional
  private java.lang.String locality; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STREET_ADDRESS((short)1, "streetAddress"),
    REGION((short)2, "region"),
    LOCALITY((short)3, "locality");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STREET_ADDRESS
          return STREET_ADDRESS;
        case 2: // REGION
          return REGION;
        case 3: // LOCALITY
          return LOCALITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STREET_ADDRESS,_Fields.REGION,_Fields.LOCALITY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STREET_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("streetAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALITY, new org.apache.thrift.meta_data.FieldMetaData("locality", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlaceAttributes.class, metaDataMap);
  }

  public PlaceAttributes() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlaceAttributes(PlaceAttributes other) {
    if (other.isSetStreetAddress()) {
      this.streetAddress = other.streetAddress;
    }
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    if (other.isSetLocality()) {
      this.locality = other.locality;
    }
  }

  public PlaceAttributes deepCopy() {
    return new PlaceAttributes(this);
  }

  @Override
  public void clear() {
    this.streetAddress = null;
    this.region = null;
    this.locality = null;
  }

  public java.lang.String getStreetAddress() {
    return this.streetAddress;
  }

  public PlaceAttributes setStreetAddress(java.lang.String streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  public void unsetStreetAddress() {
    this.streetAddress = null;
  }

  /** Returns true if field streetAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetStreetAddress() {
    return this.streetAddress != null;
  }

  public void setStreetAddressIsSet(boolean value) {
    if (!value) {
      this.streetAddress = null;
    }
  }

  public java.lang.String getRegion() {
    return this.region;
  }

  public PlaceAttributes setRegion(java.lang.String region) {
    this.region = region;
    return this;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public java.lang.String getLocality() {
    return this.locality;
  }

  public PlaceAttributes setLocality(java.lang.String locality) {
    this.locality = locality;
    return this;
  }

  public void unsetLocality() {
    this.locality = null;
  }

  /** Returns true if field locality is set (has been assigned a value) and false otherwise */
  public boolean isSetLocality() {
    return this.locality != null;
  }

  public void setLocalityIsSet(boolean value) {
    if (!value) {
      this.locality = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STREET_ADDRESS:
      if (value == null) {
        unsetStreetAddress();
      } else {
        setStreetAddress((java.lang.String)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((java.lang.String)value);
      }
      break;

    case LOCALITY:
      if (value == null) {
        unsetLocality();
      } else {
        setLocality((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STREET_ADDRESS:
      return getStreetAddress();

    case REGION:
      return getRegion();

    case LOCALITY:
      return getLocality();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STREET_ADDRESS:
      return isSetStreetAddress();
    case REGION:
      return isSetRegion();
    case LOCALITY:
      return isSetLocality();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PlaceAttributes)
      return this.equals((PlaceAttributes)that);
    return false;
  }

  public boolean equals(PlaceAttributes that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_streetAddress = true && this.isSetStreetAddress();
    boolean that_present_streetAddress = true && that.isSetStreetAddress();
    if (this_present_streetAddress || that_present_streetAddress) {
      if (!(this_present_streetAddress && that_present_streetAddress))
        return false;
      if (!this.streetAddress.equals(that.streetAddress))
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_locality = true && this.isSetLocality();
    boolean that_present_locality = true && that.isSetLocality();
    if (this_present_locality || that_present_locality) {
      if (!(this_present_locality && that_present_locality))
        return false;
      if (!this.locality.equals(that.locality))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStreetAddress()) ? 131071 : 524287);
    if (isSetStreetAddress())
      hashCode = hashCode * 8191 + streetAddress.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegion()) ? 131071 : 524287);
    if (isSetRegion())
      hashCode = hashCode * 8191 + region.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocality()) ? 131071 : 524287);
    if (isSetLocality())
      hashCode = hashCode * 8191 + locality.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PlaceAttributes other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStreetAddress()).compareTo(other.isSetStreetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streetAddress, other.streetAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocality()).compareTo(other.isSetLocality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locality, other.locality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PlaceAttributes(");
    boolean first = true;

    if (isSetStreetAddress()) {
      sb.append("streetAddress:");
      if (this.streetAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.streetAddress);
      }
      first = false;
    }
    if (isSetRegion()) {
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
    }
    if (isSetLocality()) {
      if (!first) sb.append(", ");
      sb.append("locality:");
      if (this.locality == null) {
        sb.append("null");
      } else {
        sb.append(this.locality);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlaceAttributesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PlaceAttributesStandardScheme getScheme() {
      return new PlaceAttributesStandardScheme();
    }
  }

  private static class PlaceAttributesStandardScheme extends org.apache.thrift.scheme.StandardScheme<PlaceAttributes> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlaceAttributes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STREET_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.streetAddress = iprot.readString();
              struct.setStreetAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locality = iprot.readString();
              struct.setLocalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlaceAttributes struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.streetAddress != null) {
        if (struct.isSetStreetAddress()) {
          oprot.writeFieldBegin(STREET_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.streetAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.region != null) {
        if (struct.isSetRegion()) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          oprot.writeString(struct.region);
          oprot.writeFieldEnd();
        }
      }
      if (struct.locality != null) {
        if (struct.isSetLocality()) {
          oprot.writeFieldBegin(LOCALITY_FIELD_DESC);
          oprot.writeString(struct.locality);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlaceAttributesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PlaceAttributesTupleScheme getScheme() {
      return new PlaceAttributesTupleScheme();
    }
  }

  private static class PlaceAttributesTupleScheme extends org.apache.thrift.scheme.TupleScheme<PlaceAttributes> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlaceAttributes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStreetAddress()) {
        optionals.set(0);
      }
      if (struct.isSetRegion()) {
        optionals.set(1);
      }
      if (struct.isSetLocality()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStreetAddress()) {
        oprot.writeString(struct.streetAddress);
      }
      if (struct.isSetRegion()) {
        oprot.writeString(struct.region);
      }
      if (struct.isSetLocality()) {
        oprot.writeString(struct.locality);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlaceAttributes struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.streetAddress = iprot.readString();
        struct.setStreetAddressIsSet(true);
      }
      if (incoming.get(1)) {
        struct.region = iprot.readString();
        struct.setRegionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.locality = iprot.readString();
        struct.setLocalityIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

