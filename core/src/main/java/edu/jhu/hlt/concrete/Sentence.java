/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A single sentence or utterance in a communication.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-13")
public class Sentence implements org.apache.thrift.TBase<Sentence, Sentence._Fields>, java.io.Serializable, Cloneable, Comparable<Sentence> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sentence");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TOKENIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenization", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TEXT_SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("textSpan", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField RAW_TEXT_SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("rawTextSpan", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField AUDIO_SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("audioSpan", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SentenceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SentenceTupleSchemeFactory());
  }

  private edu.jhu.hlt.concrete.UUID uuid; // required
  private Tokenization tokenization; // optional
  private edu.jhu.hlt.concrete.TextSpan textSpan; // optional
  private edu.jhu.hlt.concrete.TextSpan rawTextSpan; // optional
  private edu.jhu.hlt.concrete.AudioSpan audioSpan; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    /**
     * Theory about the tokens that make up this sentence.  For text
     * communications, these tokenizations will typically be generated
     * by a tokenizer.  For audio communications, these tokenizations
     * will typically be generated by an automatic speech recognizer.
     * 
     * The "Tokenization" message type is also used to store the output
     * of machine translation systems and text normalization
     * systems.
     */
    TOKENIZATION((short)2, "tokenization"),
    /**
     * Location of this sentence in the communication text.
     * 
     * NOTE: This span represents a best guess, or 'provenance':
     * it cannot be guaranteed that this text span matches the _exact_
     * text of the original document, but is the annotation's best
     * effort at such a representation.
     */
    TEXT_SPAN((short)3, "textSpan"),
    /**
     * Location of this sentence in the raw text.
     * 
     * NOTE: This span represents a best guess, or 'provenance':
     * it cannot be guaranteed that this text span matches the _exact_
     * text of the original document, but is the annotation's best
     * effort at such a representation.
     */
    RAW_TEXT_SPAN((short)4, "rawTextSpan"),
    /**
     * Location of this sentence in the original audio.
     * 
     * NOTE: This span represents a best guess, or 'provenance':
     * it cannot be guaranteed that this text span matches the _exact_
     * text of the original document, but is the annotation's best
     * effort at such a representation.
     */
    AUDIO_SPAN((short)5, "audioSpan");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // TOKENIZATION
          return TOKENIZATION;
        case 3: // TEXT_SPAN
          return TEXT_SPAN;
        case 4: // RAW_TEXT_SPAN
          return RAW_TEXT_SPAN;
        case 5: // AUDIO_SPAN
          return AUDIO_SPAN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TOKENIZATION,_Fields.TEXT_SPAN,_Fields.RAW_TEXT_SPAN,_Fields.AUDIO_SPAN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.TOKENIZATION, new org.apache.thrift.meta_data.FieldMetaData("tokenization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tokenization.class)));
    tmpMap.put(_Fields.TEXT_SPAN, new org.apache.thrift.meta_data.FieldMetaData("textSpan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.TextSpan.class)));
    tmpMap.put(_Fields.RAW_TEXT_SPAN, new org.apache.thrift.meta_data.FieldMetaData("rawTextSpan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.TextSpan.class)));
    tmpMap.put(_Fields.AUDIO_SPAN, new org.apache.thrift.meta_data.FieldMetaData("audioSpan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.AudioSpan.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sentence.class, metaDataMap);
  }

  public Sentence() {
  }

  public Sentence(
    edu.jhu.hlt.concrete.UUID uuid)
  {
    this();
    this.uuid = uuid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sentence(Sentence other) {
    if (other.isSetUuid()) {
      this.uuid = new edu.jhu.hlt.concrete.UUID(other.uuid);
    }
    if (other.isSetTokenization()) {
      this.tokenization = new Tokenization(other.tokenization);
    }
    if (other.isSetTextSpan()) {
      this.textSpan = new edu.jhu.hlt.concrete.TextSpan(other.textSpan);
    }
    if (other.isSetRawTextSpan()) {
      this.rawTextSpan = new edu.jhu.hlt.concrete.TextSpan(other.rawTextSpan);
    }
    if (other.isSetAudioSpan()) {
      this.audioSpan = new edu.jhu.hlt.concrete.AudioSpan(other.audioSpan);
    }
  }

  public Sentence deepCopy() {
    return new Sentence(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.tokenization = null;
    this.textSpan = null;
    this.rawTextSpan = null;
    this.audioSpan = null;
  }

  public edu.jhu.hlt.concrete.UUID getUuid() {
    return this.uuid;
  }

  public Sentence setUuid(edu.jhu.hlt.concrete.UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  /**
   * Theory about the tokens that make up this sentence.  For text
   * communications, these tokenizations will typically be generated
   * by a tokenizer.  For audio communications, these tokenizations
   * will typically be generated by an automatic speech recognizer.
   * 
   * The "Tokenization" message type is also used to store the output
   * of machine translation systems and text normalization
   * systems.
   */
  public Tokenization getTokenization() {
    return this.tokenization;
  }

  /**
   * Theory about the tokens that make up this sentence.  For text
   * communications, these tokenizations will typically be generated
   * by a tokenizer.  For audio communications, these tokenizations
   * will typically be generated by an automatic speech recognizer.
   * 
   * The "Tokenization" message type is also used to store the output
   * of machine translation systems and text normalization
   * systems.
   */
  public Sentence setTokenization(Tokenization tokenization) {
    this.tokenization = tokenization;
    return this;
  }

  public void unsetTokenization() {
    this.tokenization = null;
  }

  /** Returns true if field tokenization is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenization() {
    return this.tokenization != null;
  }

  public void setTokenizationIsSet(boolean value) {
    if (!value) {
      this.tokenization = null;
    }
  }

  /**
   * Location of this sentence in the communication text.
   * 
   * NOTE: This span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public edu.jhu.hlt.concrete.TextSpan getTextSpan() {
    return this.textSpan;
  }

  /**
   * Location of this sentence in the communication text.
   * 
   * NOTE: This span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public Sentence setTextSpan(edu.jhu.hlt.concrete.TextSpan textSpan) {
    this.textSpan = textSpan;
    return this;
  }

  public void unsetTextSpan() {
    this.textSpan = null;
  }

  /** Returns true if field textSpan is set (has been assigned a value) and false otherwise */
  public boolean isSetTextSpan() {
    return this.textSpan != null;
  }

  public void setTextSpanIsSet(boolean value) {
    if (!value) {
      this.textSpan = null;
    }
  }

  /**
   * Location of this sentence in the raw text.
   * 
   * NOTE: This span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public edu.jhu.hlt.concrete.TextSpan getRawTextSpan() {
    return this.rawTextSpan;
  }

  /**
   * Location of this sentence in the raw text.
   * 
   * NOTE: This span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public Sentence setRawTextSpan(edu.jhu.hlt.concrete.TextSpan rawTextSpan) {
    this.rawTextSpan = rawTextSpan;
    return this;
  }

  public void unsetRawTextSpan() {
    this.rawTextSpan = null;
  }

  /** Returns true if field rawTextSpan is set (has been assigned a value) and false otherwise */
  public boolean isSetRawTextSpan() {
    return this.rawTextSpan != null;
  }

  public void setRawTextSpanIsSet(boolean value) {
    if (!value) {
      this.rawTextSpan = null;
    }
  }

  /**
   * Location of this sentence in the original audio.
   * 
   * NOTE: This span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public edu.jhu.hlt.concrete.AudioSpan getAudioSpan() {
    return this.audioSpan;
  }

  /**
   * Location of this sentence in the original audio.
   * 
   * NOTE: This span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public Sentence setAudioSpan(edu.jhu.hlt.concrete.AudioSpan audioSpan) {
    this.audioSpan = audioSpan;
    return this;
  }

  public void unsetAudioSpan() {
    this.audioSpan = null;
  }

  /** Returns true if field audioSpan is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioSpan() {
    return this.audioSpan != null;
  }

  public void setAudioSpanIsSet(boolean value) {
    if (!value) {
      this.audioSpan = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case TOKENIZATION:
      if (value == null) {
        unsetTokenization();
      } else {
        setTokenization((Tokenization)value);
      }
      break;

    case TEXT_SPAN:
      if (value == null) {
        unsetTextSpan();
      } else {
        setTextSpan((edu.jhu.hlt.concrete.TextSpan)value);
      }
      break;

    case RAW_TEXT_SPAN:
      if (value == null) {
        unsetRawTextSpan();
      } else {
        setRawTextSpan((edu.jhu.hlt.concrete.TextSpan)value);
      }
      break;

    case AUDIO_SPAN:
      if (value == null) {
        unsetAudioSpan();
      } else {
        setAudioSpan((edu.jhu.hlt.concrete.AudioSpan)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case TOKENIZATION:
      return getTokenization();

    case TEXT_SPAN:
      return getTextSpan();

    case RAW_TEXT_SPAN:
      return getRawTextSpan();

    case AUDIO_SPAN:
      return getAudioSpan();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case TOKENIZATION:
      return isSetTokenization();
    case TEXT_SPAN:
      return isSetTextSpan();
    case RAW_TEXT_SPAN:
      return isSetRawTextSpan();
    case AUDIO_SPAN:
      return isSetAudioSpan();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Sentence)
      return this.equals((Sentence)that);
    return false;
  }

  public boolean equals(Sentence that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_tokenization = true && this.isSetTokenization();
    boolean that_present_tokenization = true && that.isSetTokenization();
    if (this_present_tokenization || that_present_tokenization) {
      if (!(this_present_tokenization && that_present_tokenization))
        return false;
      if (!this.tokenization.equals(that.tokenization))
        return false;
    }

    boolean this_present_textSpan = true && this.isSetTextSpan();
    boolean that_present_textSpan = true && that.isSetTextSpan();
    if (this_present_textSpan || that_present_textSpan) {
      if (!(this_present_textSpan && that_present_textSpan))
        return false;
      if (!this.textSpan.equals(that.textSpan))
        return false;
    }

    boolean this_present_rawTextSpan = true && this.isSetRawTextSpan();
    boolean that_present_rawTextSpan = true && that.isSetRawTextSpan();
    if (this_present_rawTextSpan || that_present_rawTextSpan) {
      if (!(this_present_rawTextSpan && that_present_rawTextSpan))
        return false;
      if (!this.rawTextSpan.equals(that.rawTextSpan))
        return false;
    }

    boolean this_present_audioSpan = true && this.isSetAudioSpan();
    boolean that_present_audioSpan = true && that.isSetAudioSpan();
    if (this_present_audioSpan || that_present_audioSpan) {
      if (!(this_present_audioSpan && that_present_audioSpan))
        return false;
      if (!this.audioSpan.equals(that.audioSpan))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uuid = true && (isSetUuid());
    list.add(present_uuid);
    if (present_uuid)
      list.add(uuid);

    boolean present_tokenization = true && (isSetTokenization());
    list.add(present_tokenization);
    if (present_tokenization)
      list.add(tokenization);

    boolean present_textSpan = true && (isSetTextSpan());
    list.add(present_textSpan);
    if (present_textSpan)
      list.add(textSpan);

    boolean present_rawTextSpan = true && (isSetRawTextSpan());
    list.add(present_rawTextSpan);
    if (present_rawTextSpan)
      list.add(rawTextSpan);

    boolean present_audioSpan = true && (isSetAudioSpan());
    list.add(present_audioSpan);
    if (present_audioSpan)
      list.add(audioSpan);

    return list.hashCode();
  }

  @Override
  public int compareTo(Sentence other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenization()).compareTo(other.isSetTokenization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenization, other.tokenization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextSpan()).compareTo(other.isSetTextSpan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextSpan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textSpan, other.textSpan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRawTextSpan()).compareTo(other.isSetRawTextSpan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRawTextSpan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rawTextSpan, other.rawTextSpan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioSpan()).compareTo(other.isSetAudioSpan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioSpan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioSpan, other.audioSpan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Sentence(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (isSetTokenization()) {
      if (!first) sb.append(", ");
      sb.append("tokenization:");
      if (this.tokenization == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenization);
      }
      first = false;
    }
    if (isSetTextSpan()) {
      if (!first) sb.append(", ");
      sb.append("textSpan:");
      if (this.textSpan == null) {
        sb.append("null");
      } else {
        sb.append(this.textSpan);
      }
      first = false;
    }
    if (isSetRawTextSpan()) {
      if (!first) sb.append(", ");
      sb.append("rawTextSpan:");
      if (this.rawTextSpan == null) {
        sb.append("null");
      } else {
        sb.append(this.rawTextSpan);
      }
      first = false;
    }
    if (isSetAudioSpan()) {
      if (!first) sb.append(", ");
      sb.append("audioSpan:");
      if (this.audioSpan == null) {
        sb.append("null");
      } else {
        sb.append(this.audioSpan);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uuid != null) {
      uuid.validate();
    }
    if (tokenization != null) {
      tokenization.validate();
    }
    if (textSpan != null) {
      textSpan.validate();
    }
    if (rawTextSpan != null) {
      rawTextSpan.validate();
    }
    if (audioSpan != null) {
      audioSpan.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SentenceStandardSchemeFactory implements SchemeFactory {
    public SentenceStandardScheme getScheme() {
      return new SentenceStandardScheme();
    }
  }

  private static class SentenceStandardScheme extends StandardScheme<Sentence> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Sentence struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uuid = new edu.jhu.hlt.concrete.UUID();
              struct.uuid.read(iprot);
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOKENIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokenization = new Tokenization();
              struct.tokenization.read(iprot);
              struct.setTokenizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEXT_SPAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.textSpan = new edu.jhu.hlt.concrete.TextSpan();
              struct.textSpan.read(iprot);
              struct.setTextSpanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RAW_TEXT_SPAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rawTextSpan = new edu.jhu.hlt.concrete.TextSpan();
              struct.rawTextSpan.read(iprot);
              struct.setRawTextSpanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUDIO_SPAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.audioSpan = new edu.jhu.hlt.concrete.AudioSpan();
              struct.audioSpan.read(iprot);
              struct.setAudioSpanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Sentence struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        struct.uuid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tokenization != null) {
        if (struct.isSetTokenization()) {
          oprot.writeFieldBegin(TOKENIZATION_FIELD_DESC);
          struct.tokenization.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.textSpan != null) {
        if (struct.isSetTextSpan()) {
          oprot.writeFieldBegin(TEXT_SPAN_FIELD_DESC);
          struct.textSpan.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rawTextSpan != null) {
        if (struct.isSetRawTextSpan()) {
          oprot.writeFieldBegin(RAW_TEXT_SPAN_FIELD_DESC);
          struct.rawTextSpan.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.audioSpan != null) {
        if (struct.isSetAudioSpan()) {
          oprot.writeFieldBegin(AUDIO_SPAN_FIELD_DESC);
          struct.audioSpan.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SentenceTupleSchemeFactory implements SchemeFactory {
    public SentenceTupleScheme getScheme() {
      return new SentenceTupleScheme();
    }
  }

  private static class SentenceTupleScheme extends TupleScheme<Sentence> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Sentence struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.uuid.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetTokenization()) {
        optionals.set(0);
      }
      if (struct.isSetTextSpan()) {
        optionals.set(1);
      }
      if (struct.isSetRawTextSpan()) {
        optionals.set(2);
      }
      if (struct.isSetAudioSpan()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTokenization()) {
        struct.tokenization.write(oprot);
      }
      if (struct.isSetTextSpan()) {
        struct.textSpan.write(oprot);
      }
      if (struct.isSetRawTextSpan()) {
        struct.rawTextSpan.write(oprot);
      }
      if (struct.isSetAudioSpan()) {
        struct.audioSpan.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Sentence struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuid = new edu.jhu.hlt.concrete.UUID();
      struct.uuid.read(iprot);
      struct.setUuidIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.tokenization = new Tokenization();
        struct.tokenization.read(iprot);
        struct.setTokenizationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.textSpan = new edu.jhu.hlt.concrete.TextSpan();
        struct.textSpan.read(iprot);
        struct.setTextSpanIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rawTextSpan = new edu.jhu.hlt.concrete.TextSpan();
        struct.rawTextSpan.read(iprot);
        struct.setRawTextSpanIsSet(true);
      }
      if (incoming.get(3)) {
        struct.audioSpan = new edu.jhu.hlt.concrete.AudioSpan();
        struct.audioSpan.read(iprot);
        struct.setAudioSpanIsSet(true);
      }
    }
  }

}

