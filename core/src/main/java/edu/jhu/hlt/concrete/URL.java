/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-13")
public class URL implements org.apache.thrift.TBase<URL, URL._Fields>, java.io.Serializable, Cloneable, Comparable<URL> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("URL");

  private static final org.apache.thrift.protocol.TField START_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("startOffset", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField END_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("endOffset", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXPANDED_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("expandedUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DISPLAY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("displayUrl", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new URLStandardSchemeFactory());
    schemes.put(TupleScheme.class, new URLTupleSchemeFactory());
  }

  private int startOffset; // optional
  private int endOffset; // optional
  private String expandedUrl; // optional
  private String url; // optional
  private String displayUrl; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_OFFSET((short)1, "startOffset"),
    END_OFFSET((short)2, "endOffset"),
    EXPANDED_URL((short)3, "expandedUrl"),
    URL((short)4, "url"),
    DISPLAY_URL((short)5, "displayUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_OFFSET
          return START_OFFSET;
        case 2: // END_OFFSET
          return END_OFFSET;
        case 3: // EXPANDED_URL
          return EXPANDED_URL;
        case 4: // URL
          return URL;
        case 5: // DISPLAY_URL
          return DISPLAY_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTOFFSET_ISSET_ID = 0;
  private static final int __ENDOFFSET_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.START_OFFSET,_Fields.END_OFFSET,_Fields.EXPANDED_URL,_Fields.URL,_Fields.DISPLAY_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("startOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("endOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXPANDED_URL, new org.apache.thrift.meta_data.FieldMetaData("expandedUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_URL, new org.apache.thrift.meta_data.FieldMetaData("displayUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(URL.class, metaDataMap);
  }

  public URL() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public URL(URL other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startOffset = other.startOffset;
    this.endOffset = other.endOffset;
    if (other.isSetExpandedUrl()) {
      this.expandedUrl = other.expandedUrl;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetDisplayUrl()) {
      this.displayUrl = other.displayUrl;
    }
  }

  public URL deepCopy() {
    return new URL(this);
  }

  @Override
  public void clear() {
    setStartOffsetIsSet(false);
    this.startOffset = 0;
    setEndOffsetIsSet(false);
    this.endOffset = 0;
    this.expandedUrl = null;
    this.url = null;
    this.displayUrl = null;
  }

  public int getStartOffset() {
    return this.startOffset;
  }

  public URL setStartOffset(int startOffset) {
    this.startOffset = startOffset;
    setStartOffsetIsSet(true);
    return this;
  }

  public void unsetStartOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTOFFSET_ISSET_ID);
  }

  /** Returns true if field startOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetStartOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTOFFSET_ISSET_ID);
  }

  public void setStartOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTOFFSET_ISSET_ID, value);
  }

  public int getEndOffset() {
    return this.endOffset;
  }

  public URL setEndOffset(int endOffset) {
    this.endOffset = endOffset;
    setEndOffsetIsSet(true);
    return this;
  }

  public void unsetEndOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDOFFSET_ISSET_ID);
  }

  /** Returns true if field endOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetEndOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDOFFSET_ISSET_ID);
  }

  public void setEndOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDOFFSET_ISSET_ID, value);
  }

  public String getExpandedUrl() {
    return this.expandedUrl;
  }

  public URL setExpandedUrl(String expandedUrl) {
    this.expandedUrl = expandedUrl;
    return this;
  }

  public void unsetExpandedUrl() {
    this.expandedUrl = null;
  }

  /** Returns true if field expandedUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetExpandedUrl() {
    return this.expandedUrl != null;
  }

  public void setExpandedUrlIsSet(boolean value) {
    if (!value) {
      this.expandedUrl = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public URL setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getDisplayUrl() {
    return this.displayUrl;
  }

  public URL setDisplayUrl(String displayUrl) {
    this.displayUrl = displayUrl;
    return this;
  }

  public void unsetDisplayUrl() {
    this.displayUrl = null;
  }

  /** Returns true if field displayUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayUrl() {
    return this.displayUrl != null;
  }

  public void setDisplayUrlIsSet(boolean value) {
    if (!value) {
      this.displayUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_OFFSET:
      if (value == null) {
        unsetStartOffset();
      } else {
        setStartOffset((Integer)value);
      }
      break;

    case END_OFFSET:
      if (value == null) {
        unsetEndOffset();
      } else {
        setEndOffset((Integer)value);
      }
      break;

    case EXPANDED_URL:
      if (value == null) {
        unsetExpandedUrl();
      } else {
        setExpandedUrl((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case DISPLAY_URL:
      if (value == null) {
        unsetDisplayUrl();
      } else {
        setDisplayUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_OFFSET:
      return getStartOffset();

    case END_OFFSET:
      return getEndOffset();

    case EXPANDED_URL:
      return getExpandedUrl();

    case URL:
      return getUrl();

    case DISPLAY_URL:
      return getDisplayUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_OFFSET:
      return isSetStartOffset();
    case END_OFFSET:
      return isSetEndOffset();
    case EXPANDED_URL:
      return isSetExpandedUrl();
    case URL:
      return isSetUrl();
    case DISPLAY_URL:
      return isSetDisplayUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof URL)
      return this.equals((URL)that);
    return false;
  }

  public boolean equals(URL that) {
    if (that == null)
      return false;

    boolean this_present_startOffset = true && this.isSetStartOffset();
    boolean that_present_startOffset = true && that.isSetStartOffset();
    if (this_present_startOffset || that_present_startOffset) {
      if (!(this_present_startOffset && that_present_startOffset))
        return false;
      if (this.startOffset != that.startOffset)
        return false;
    }

    boolean this_present_endOffset = true && this.isSetEndOffset();
    boolean that_present_endOffset = true && that.isSetEndOffset();
    if (this_present_endOffset || that_present_endOffset) {
      if (!(this_present_endOffset && that_present_endOffset))
        return false;
      if (this.endOffset != that.endOffset)
        return false;
    }

    boolean this_present_expandedUrl = true && this.isSetExpandedUrl();
    boolean that_present_expandedUrl = true && that.isSetExpandedUrl();
    if (this_present_expandedUrl || that_present_expandedUrl) {
      if (!(this_present_expandedUrl && that_present_expandedUrl))
        return false;
      if (!this.expandedUrl.equals(that.expandedUrl))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_displayUrl = true && this.isSetDisplayUrl();
    boolean that_present_displayUrl = true && that.isSetDisplayUrl();
    if (this_present_displayUrl || that_present_displayUrl) {
      if (!(this_present_displayUrl && that_present_displayUrl))
        return false;
      if (!this.displayUrl.equals(that.displayUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_startOffset = true && (isSetStartOffset());
    list.add(present_startOffset);
    if (present_startOffset)
      list.add(startOffset);

    boolean present_endOffset = true && (isSetEndOffset());
    list.add(present_endOffset);
    if (present_endOffset)
      list.add(endOffset);

    boolean present_expandedUrl = true && (isSetExpandedUrl());
    list.add(present_expandedUrl);
    if (present_expandedUrl)
      list.add(expandedUrl);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_displayUrl = true && (isSetDisplayUrl());
    list.add(present_displayUrl);
    if (present_displayUrl)
      list.add(displayUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(URL other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStartOffset()).compareTo(other.isSetStartOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startOffset, other.startOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndOffset()).compareTo(other.isSetEndOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endOffset, other.endOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpandedUrl()).compareTo(other.isSetExpandedUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpandedUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expandedUrl, other.expandedUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayUrl()).compareTo(other.isSetDisplayUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayUrl, other.displayUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("URL(");
    boolean first = true;

    if (isSetStartOffset()) {
      sb.append("startOffset:");
      sb.append(this.startOffset);
      first = false;
    }
    if (isSetEndOffset()) {
      if (!first) sb.append(", ");
      sb.append("endOffset:");
      sb.append(this.endOffset);
      first = false;
    }
    if (isSetExpandedUrl()) {
      if (!first) sb.append(", ");
      sb.append("expandedUrl:");
      if (this.expandedUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.expandedUrl);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetDisplayUrl()) {
      if (!first) sb.append(", ");
      sb.append("displayUrl:");
      if (this.displayUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.displayUrl);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class URLStandardSchemeFactory implements SchemeFactory {
    public URLStandardScheme getScheme() {
      return new URLStandardScheme();
    }
  }

  private static class URLStandardScheme extends StandardScheme<URL> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, URL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startOffset = iprot.readI32();
              struct.setStartOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endOffset = iprot.readI32();
              struct.setEndOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPANDED_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expandedUrl = iprot.readString();
              struct.setExpandedUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISPLAY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayUrl = iprot.readString();
              struct.setDisplayUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, URL struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetStartOffset()) {
        oprot.writeFieldBegin(START_OFFSET_FIELD_DESC);
        oprot.writeI32(struct.startOffset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndOffset()) {
        oprot.writeFieldBegin(END_OFFSET_FIELD_DESC);
        oprot.writeI32(struct.endOffset);
        oprot.writeFieldEnd();
      }
      if (struct.expandedUrl != null) {
        if (struct.isSetExpandedUrl()) {
          oprot.writeFieldBegin(EXPANDED_URL_FIELD_DESC);
          oprot.writeString(struct.expandedUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.displayUrl != null) {
        if (struct.isSetDisplayUrl()) {
          oprot.writeFieldBegin(DISPLAY_URL_FIELD_DESC);
          oprot.writeString(struct.displayUrl);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class URLTupleSchemeFactory implements SchemeFactory {
    public URLTupleScheme getScheme() {
      return new URLTupleScheme();
    }
  }

  private static class URLTupleScheme extends TupleScheme<URL> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, URL struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStartOffset()) {
        optionals.set(0);
      }
      if (struct.isSetEndOffset()) {
        optionals.set(1);
      }
      if (struct.isSetExpandedUrl()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetDisplayUrl()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStartOffset()) {
        oprot.writeI32(struct.startOffset);
      }
      if (struct.isSetEndOffset()) {
        oprot.writeI32(struct.endOffset);
      }
      if (struct.isSetExpandedUrl()) {
        oprot.writeString(struct.expandedUrl);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetDisplayUrl()) {
        oprot.writeString(struct.displayUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, URL struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.startOffset = iprot.readI32();
        struct.setStartOffsetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.endOffset = iprot.readI32();
        struct.setEndOffsetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.expandedUrl = iprot.readString();
        struct.setExpandedUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.displayUrl = iprot.readString();
        struct.setDisplayUrlIsSet(true);
      }
    }
  }

}

