/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete.search;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class FeedbackService {

  public interface Iface extends edu.jhu.hlt.concrete.services.Service.Iface {

    /**
     * Start providing feedback for the specified SearchResults.
     * This causes the search and its results to be persisted.
     * 
     * @param results
     */
    public void startFeedback(SearchResult results) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

    /**
     * Provide feedback on the relevance of a particular communication to a search
     * 
     * @param searchResultsId
     * @param communicationId
     * @param feedback
     */
    public void addCommunicationFeedback(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, SearchFeedback feedback) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

    /**
     * Provide feedback on the relevance of a particular sentence to a search
     * 
     * @param searchResultsId
     * @param communicationId
     * @param sentenceId
     * @param feedback
     */
    public void addSentenceFeedback(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, edu.jhu.hlt.concrete.UUID sentenceId, SearchFeedback feedback) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends edu.jhu.hlt.concrete.services.Service .AsyncIface {

    public void startFeedback(SearchResult results, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void addCommunicationFeedback(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, SearchFeedback feedback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void addSentenceFeedback(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, edu.jhu.hlt.concrete.UUID sentenceId, SearchFeedback feedback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends edu.jhu.hlt.concrete.services.Service.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void startFeedback(SearchResult results) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_startFeedback(results);
      recv_startFeedback();
    }

    public void send_startFeedback(SearchResult results) throws org.apache.thrift.TException
    {
      startFeedback_args args = new startFeedback_args();
      args.setResults(results);
      sendBase("startFeedback", args);
    }

    public void recv_startFeedback() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      startFeedback_result result = new startFeedback_result();
      receiveBase(result, "startFeedback");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void addCommunicationFeedback(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, SearchFeedback feedback) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_addCommunicationFeedback(searchResultsId, communicationId, feedback);
      recv_addCommunicationFeedback();
    }

    public void send_addCommunicationFeedback(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, SearchFeedback feedback) throws org.apache.thrift.TException
    {
      addCommunicationFeedback_args args = new addCommunicationFeedback_args();
      args.setSearchResultsId(searchResultsId);
      args.setCommunicationId(communicationId);
      args.setFeedback(feedback);
      sendBase("addCommunicationFeedback", args);
    }

    public void recv_addCommunicationFeedback() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      addCommunicationFeedback_result result = new addCommunicationFeedback_result();
      receiveBase(result, "addCommunicationFeedback");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void addSentenceFeedback(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, edu.jhu.hlt.concrete.UUID sentenceId, SearchFeedback feedback) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_addSentenceFeedback(searchResultsId, communicationId, sentenceId, feedback);
      recv_addSentenceFeedback();
    }

    public void send_addSentenceFeedback(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, edu.jhu.hlt.concrete.UUID sentenceId, SearchFeedback feedback) throws org.apache.thrift.TException
    {
      addSentenceFeedback_args args = new addSentenceFeedback_args();
      args.setSearchResultsId(searchResultsId);
      args.setCommunicationId(communicationId);
      args.setSentenceId(sentenceId);
      args.setFeedback(feedback);
      sendBase("addSentenceFeedback", args);
    }

    public void recv_addSentenceFeedback() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      addSentenceFeedback_result result = new addSentenceFeedback_result();
      receiveBase(result, "addSentenceFeedback");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

  }
  public static class AsyncClient extends edu.jhu.hlt.concrete.services.Service.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void startFeedback(SearchResult results, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startFeedback_call method_call = new startFeedback_call(results, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startFeedback_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private SearchResult results;
      public startFeedback_call(SearchResult results, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.results = results;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startFeedback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startFeedback_args args = new startFeedback_args();
        args.setResults(results);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void addCommunicationFeedback(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, SearchFeedback feedback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addCommunicationFeedback_call method_call = new addCommunicationFeedback_call(searchResultsId, communicationId, feedback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addCommunicationFeedback_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private edu.jhu.hlt.concrete.UUID searchResultsId;
      private java.lang.String communicationId;
      private SearchFeedback feedback;
      public addCommunicationFeedback_call(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, SearchFeedback feedback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchResultsId = searchResultsId;
        this.communicationId = communicationId;
        this.feedback = feedback;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCommunicationFeedback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addCommunicationFeedback_args args = new addCommunicationFeedback_args();
        args.setSearchResultsId(searchResultsId);
        args.setCommunicationId(communicationId);
        args.setFeedback(feedback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void addSentenceFeedback(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, edu.jhu.hlt.concrete.UUID sentenceId, SearchFeedback feedback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSentenceFeedback_call method_call = new addSentenceFeedback_call(searchResultsId, communicationId, sentenceId, feedback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSentenceFeedback_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private edu.jhu.hlt.concrete.UUID searchResultsId;
      private java.lang.String communicationId;
      private edu.jhu.hlt.concrete.UUID sentenceId;
      private SearchFeedback feedback;
      public addSentenceFeedback_call(edu.jhu.hlt.concrete.UUID searchResultsId, java.lang.String communicationId, edu.jhu.hlt.concrete.UUID sentenceId, SearchFeedback feedback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchResultsId = searchResultsId;
        this.communicationId = communicationId;
        this.sentenceId = sentenceId;
        this.feedback = feedback;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSentenceFeedback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSentenceFeedback_args args = new addSentenceFeedback_args();
        args.setSearchResultsId(searchResultsId);
        args.setCommunicationId(communicationId);
        args.setSentenceId(sentenceId);
        args.setFeedback(feedback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends edu.jhu.hlt.concrete.services.Service.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("startFeedback", new startFeedback());
      processMap.put("addCommunicationFeedback", new addCommunicationFeedback());
      processMap.put("addSentenceFeedback", new addSentenceFeedback());
      return processMap;
    }

    public static class startFeedback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startFeedback_args> {
      public startFeedback() {
        super("startFeedback");
      }

      public startFeedback_args getEmptyArgsInstance() {
        return new startFeedback_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startFeedback_result getResult(I iface, startFeedback_args args) throws org.apache.thrift.TException {
        startFeedback_result result = new startFeedback_result();
        try {
          iface.startFeedback(args.results);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class addCommunicationFeedback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCommunicationFeedback_args> {
      public addCommunicationFeedback() {
        super("addCommunicationFeedback");
      }

      public addCommunicationFeedback_args getEmptyArgsInstance() {
        return new addCommunicationFeedback_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addCommunicationFeedback_result getResult(I iface, addCommunicationFeedback_args args) throws org.apache.thrift.TException {
        addCommunicationFeedback_result result = new addCommunicationFeedback_result();
        try {
          iface.addCommunicationFeedback(args.searchResultsId, args.communicationId, args.feedback);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class addSentenceFeedback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSentenceFeedback_args> {
      public addSentenceFeedback() {
        super("addSentenceFeedback");
      }

      public addSentenceFeedback_args getEmptyArgsInstance() {
        return new addSentenceFeedback_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSentenceFeedback_result getResult(I iface, addSentenceFeedback_args args) throws org.apache.thrift.TException {
        addSentenceFeedback_result result = new addSentenceFeedback_result();
        try {
          iface.addSentenceFeedback(args.searchResultsId, args.communicationId, args.sentenceId, args.feedback);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends edu.jhu.hlt.concrete.services.Service.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("startFeedback", new startFeedback());
      processMap.put("addCommunicationFeedback", new addCommunicationFeedback());
      processMap.put("addSentenceFeedback", new addSentenceFeedback());
      return processMap;
    }

    public static class startFeedback<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startFeedback_args, Void> {
      public startFeedback() {
        super("startFeedback");
      }

      public startFeedback_args getEmptyArgsInstance() {
        return new startFeedback_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            startFeedback_result result = new startFeedback_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            startFeedback_result result = new startFeedback_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
              result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startFeedback_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.startFeedback(args.results,resultHandler);
      }
    }

    public static class addCommunicationFeedback<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCommunicationFeedback_args, Void> {
      public addCommunicationFeedback() {
        super("addCommunicationFeedback");
      }

      public addCommunicationFeedback_args getEmptyArgsInstance() {
        return new addCommunicationFeedback_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addCommunicationFeedback_result result = new addCommunicationFeedback_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addCommunicationFeedback_result result = new addCommunicationFeedback_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
              result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addCommunicationFeedback_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addCommunicationFeedback(args.searchResultsId, args.communicationId, args.feedback,resultHandler);
      }
    }

    public static class addSentenceFeedback<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSentenceFeedback_args, Void> {
      public addSentenceFeedback() {
        super("addSentenceFeedback");
      }

      public addSentenceFeedback_args getEmptyArgsInstance() {
        return new addSentenceFeedback_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addSentenceFeedback_result result = new addSentenceFeedback_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addSentenceFeedback_result result = new addSentenceFeedback_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
              result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSentenceFeedback_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addSentenceFeedback(args.searchResultsId, args.communicationId, args.sentenceId, args.feedback,resultHandler);
      }
    }

  }

  public static class startFeedback_args implements org.apache.thrift.TBase<startFeedback_args, startFeedback_args._Fields>, java.io.Serializable, Cloneable, Comparable<startFeedback_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startFeedback_args");

    private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new startFeedback_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new startFeedback_argsTupleSchemeFactory();

    private SearchResult results; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESULTS((short)1, "results");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESULTS
            return RESULTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startFeedback_args.class, metaDataMap);
    }

    public startFeedback_args() {
    }

    public startFeedback_args(
      SearchResult results)
    {
      this();
      this.results = results;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startFeedback_args(startFeedback_args other) {
      if (other.isSetResults()) {
        this.results = new SearchResult(other.results);
      }
    }

    public startFeedback_args deepCopy() {
      return new startFeedback_args(this);
    }

    @Override
    public void clear() {
      this.results = null;
    }

    public SearchResult getResults() {
      return this.results;
    }

    public startFeedback_args setResults(SearchResult results) {
      this.results = results;
      return this;
    }

    public void unsetResults() {
      this.results = null;
    }

    /** Returns true if field results is set (has been assigned a value) and false otherwise */
    public boolean isSetResults() {
      return this.results != null;
    }

    public void setResultsIsSet(boolean value) {
      if (!value) {
        this.results = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RESULTS:
        if (value == null) {
          unsetResults();
        } else {
          setResults((SearchResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESULTS:
        return getResults();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESULTS:
        return isSetResults();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof startFeedback_args)
        return this.equals((startFeedback_args)that);
      return false;
    }

    public boolean equals(startFeedback_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_results = true && this.isSetResults();
      boolean that_present_results = true && that.isSetResults();
      if (this_present_results || that_present_results) {
        if (!(this_present_results && that_present_results))
          return false;
        if (!this.results.equals(that.results))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResults()) ? 131071 : 524287);
      if (isSetResults())
        hashCode = hashCode * 8191 + results.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(startFeedback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetResults()).compareTo(other.isSetResults());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResults()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, other.results);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("startFeedback_args(");
      boolean first = true;

      sb.append("results:");
      if (this.results == null) {
        sb.append("null");
      } else {
        sb.append(this.results);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (results != null) {
        results.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startFeedback_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startFeedback_argsStandardScheme getScheme() {
        return new startFeedback_argsStandardScheme();
      }
    }

    private static class startFeedback_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<startFeedback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESULTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.results = new SearchResult();
                struct.results.read(iprot);
                struct.setResultsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startFeedback_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.results != null) {
          oprot.writeFieldBegin(RESULTS_FIELD_DESC);
          struct.results.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startFeedback_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startFeedback_argsTupleScheme getScheme() {
        return new startFeedback_argsTupleScheme();
      }
    }

    private static class startFeedback_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<startFeedback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResults()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResults()) {
          struct.results.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.results = new SearchResult();
          struct.results.read(iprot);
          struct.setResultsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class startFeedback_result implements org.apache.thrift.TBase<startFeedback_result, startFeedback_result._Fields>, java.io.Serializable, Cloneable, Comparable<startFeedback_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startFeedback_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new startFeedback_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new startFeedback_resultTupleSchemeFactory();

    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.services.ServicesException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startFeedback_result.class, metaDataMap);
    }

    public startFeedback_result() {
    }

    public startFeedback_result(
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startFeedback_result(startFeedback_result other) {
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public startFeedback_result deepCopy() {
      return new startFeedback_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public startFeedback_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof startFeedback_result)
        return this.equals((startFeedback_result)that);
      return false;
    }

    public boolean equals(startFeedback_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(startFeedback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("startFeedback_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startFeedback_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startFeedback_resultStandardScheme getScheme() {
        return new startFeedback_resultStandardScheme();
      }
    }

    private static class startFeedback_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<startFeedback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startFeedback_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startFeedback_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startFeedback_resultTupleScheme getScheme() {
        return new startFeedback_resultTupleScheme();
      }
    }

    private static class startFeedback_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<startFeedback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addCommunicationFeedback_args implements org.apache.thrift.TBase<addCommunicationFeedback_args, addCommunicationFeedback_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCommunicationFeedback_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCommunicationFeedback_args");

    private static final org.apache.thrift.protocol.TField SEARCH_RESULTS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("searchResultsId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMUNICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("communicationId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEEDBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("feedback", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCommunicationFeedback_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCommunicationFeedback_argsTupleSchemeFactory();

    private edu.jhu.hlt.concrete.UUID searchResultsId; // required
    private java.lang.String communicationId; // required
    private SearchFeedback feedback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_RESULTS_ID((short)1, "searchResultsId"),
      COMMUNICATION_ID((short)2, "communicationId"),
      /**
       * 
       * @see SearchFeedback
       */
      FEEDBACK((short)3, "feedback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_RESULTS_ID
            return SEARCH_RESULTS_ID;
          case 2: // COMMUNICATION_ID
            return COMMUNICATION_ID;
          case 3: // FEEDBACK
            return FEEDBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_RESULTS_ID, new org.apache.thrift.meta_data.FieldMetaData("searchResultsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
      tmpMap.put(_Fields.COMMUNICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("communicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEEDBACK, new org.apache.thrift.meta_data.FieldMetaData("feedback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SearchFeedback.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCommunicationFeedback_args.class, metaDataMap);
    }

    public addCommunicationFeedback_args() {
    }

    public addCommunicationFeedback_args(
      edu.jhu.hlt.concrete.UUID searchResultsId,
      java.lang.String communicationId,
      SearchFeedback feedback)
    {
      this();
      this.searchResultsId = searchResultsId;
      this.communicationId = communicationId;
      this.feedback = feedback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCommunicationFeedback_args(addCommunicationFeedback_args other) {
      if (other.isSetSearchResultsId()) {
        this.searchResultsId = new edu.jhu.hlt.concrete.UUID(other.searchResultsId);
      }
      if (other.isSetCommunicationId()) {
        this.communicationId = other.communicationId;
      }
      if (other.isSetFeedback()) {
        this.feedback = other.feedback;
      }
    }

    public addCommunicationFeedback_args deepCopy() {
      return new addCommunicationFeedback_args(this);
    }

    @Override
    public void clear() {
      this.searchResultsId = null;
      this.communicationId = null;
      this.feedback = null;
    }

    public edu.jhu.hlt.concrete.UUID getSearchResultsId() {
      return this.searchResultsId;
    }

    public addCommunicationFeedback_args setSearchResultsId(edu.jhu.hlt.concrete.UUID searchResultsId) {
      this.searchResultsId = searchResultsId;
      return this;
    }

    public void unsetSearchResultsId() {
      this.searchResultsId = null;
    }

    /** Returns true if field searchResultsId is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchResultsId() {
      return this.searchResultsId != null;
    }

    public void setSearchResultsIdIsSet(boolean value) {
      if (!value) {
        this.searchResultsId = null;
      }
    }

    public java.lang.String getCommunicationId() {
      return this.communicationId;
    }

    public addCommunicationFeedback_args setCommunicationId(java.lang.String communicationId) {
      this.communicationId = communicationId;
      return this;
    }

    public void unsetCommunicationId() {
      this.communicationId = null;
    }

    /** Returns true if field communicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetCommunicationId() {
      return this.communicationId != null;
    }

    public void setCommunicationIdIsSet(boolean value) {
      if (!value) {
        this.communicationId = null;
      }
    }

    /**
     * 
     * @see SearchFeedback
     */
    public SearchFeedback getFeedback() {
      return this.feedback;
    }

    /**
     * 
     * @see SearchFeedback
     */
    public addCommunicationFeedback_args setFeedback(SearchFeedback feedback) {
      this.feedback = feedback;
      return this;
    }

    public void unsetFeedback() {
      this.feedback = null;
    }

    /** Returns true if field feedback is set (has been assigned a value) and false otherwise */
    public boolean isSetFeedback() {
      return this.feedback != null;
    }

    public void setFeedbackIsSet(boolean value) {
      if (!value) {
        this.feedback = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SEARCH_RESULTS_ID:
        if (value == null) {
          unsetSearchResultsId();
        } else {
          setSearchResultsId((edu.jhu.hlt.concrete.UUID)value);
        }
        break;

      case COMMUNICATION_ID:
        if (value == null) {
          unsetCommunicationId();
        } else {
          setCommunicationId((java.lang.String)value);
        }
        break;

      case FEEDBACK:
        if (value == null) {
          unsetFeedback();
        } else {
          setFeedback((SearchFeedback)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_RESULTS_ID:
        return getSearchResultsId();

      case COMMUNICATION_ID:
        return getCommunicationId();

      case FEEDBACK:
        return getFeedback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_RESULTS_ID:
        return isSetSearchResultsId();
      case COMMUNICATION_ID:
        return isSetCommunicationId();
      case FEEDBACK:
        return isSetFeedback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addCommunicationFeedback_args)
        return this.equals((addCommunicationFeedback_args)that);
      return false;
    }

    public boolean equals(addCommunicationFeedback_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_searchResultsId = true && this.isSetSearchResultsId();
      boolean that_present_searchResultsId = true && that.isSetSearchResultsId();
      if (this_present_searchResultsId || that_present_searchResultsId) {
        if (!(this_present_searchResultsId && that_present_searchResultsId))
          return false;
        if (!this.searchResultsId.equals(that.searchResultsId))
          return false;
      }

      boolean this_present_communicationId = true && this.isSetCommunicationId();
      boolean that_present_communicationId = true && that.isSetCommunicationId();
      if (this_present_communicationId || that_present_communicationId) {
        if (!(this_present_communicationId && that_present_communicationId))
          return false;
        if (!this.communicationId.equals(that.communicationId))
          return false;
      }

      boolean this_present_feedback = true && this.isSetFeedback();
      boolean that_present_feedback = true && that.isSetFeedback();
      if (this_present_feedback || that_present_feedback) {
        if (!(this_present_feedback && that_present_feedback))
          return false;
        if (!this.feedback.equals(that.feedback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSearchResultsId()) ? 131071 : 524287);
      if (isSetSearchResultsId())
        hashCode = hashCode * 8191 + searchResultsId.hashCode();

      hashCode = hashCode * 8191 + ((isSetCommunicationId()) ? 131071 : 524287);
      if (isSetCommunicationId())
        hashCode = hashCode * 8191 + communicationId.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeedback()) ? 131071 : 524287);
      if (isSetFeedback())
        hashCode = hashCode * 8191 + feedback.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(addCommunicationFeedback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSearchResultsId()).compareTo(other.isSetSearchResultsId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchResultsId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchResultsId, other.searchResultsId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCommunicationId()).compareTo(other.isSetCommunicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommunicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communicationId, other.communicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeedback()).compareTo(other.isSetFeedback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeedback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedback, other.feedback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addCommunicationFeedback_args(");
      boolean first = true;

      sb.append("searchResultsId:");
      if (this.searchResultsId == null) {
        sb.append("null");
      } else {
        sb.append(this.searchResultsId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("communicationId:");
      if (this.communicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.communicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feedback:");
      if (this.feedback == null) {
        sb.append("null");
      } else {
        sb.append(this.feedback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchResultsId != null) {
        searchResultsId.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCommunicationFeedback_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addCommunicationFeedback_argsStandardScheme getScheme() {
        return new addCommunicationFeedback_argsStandardScheme();
      }
    }

    private static class addCommunicationFeedback_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCommunicationFeedback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCommunicationFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_RESULTS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchResultsId = new edu.jhu.hlt.concrete.UUID();
                struct.searchResultsId.read(iprot);
                struct.setSearchResultsIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMUNICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.communicationId = iprot.readString();
                struct.setCommunicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEEDBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.feedback = edu.jhu.hlt.concrete.search.SearchFeedback.findByValue(iprot.readI32());
                struct.setFeedbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCommunicationFeedback_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchResultsId != null) {
          oprot.writeFieldBegin(SEARCH_RESULTS_ID_FIELD_DESC);
          struct.searchResultsId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.communicationId != null) {
          oprot.writeFieldBegin(COMMUNICATION_ID_FIELD_DESC);
          oprot.writeString(struct.communicationId);
          oprot.writeFieldEnd();
        }
        if (struct.feedback != null) {
          oprot.writeFieldBegin(FEEDBACK_FIELD_DESC);
          oprot.writeI32(struct.feedback.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCommunicationFeedback_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addCommunicationFeedback_argsTupleScheme getScheme() {
        return new addCommunicationFeedback_argsTupleScheme();
      }
    }

    private static class addCommunicationFeedback_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCommunicationFeedback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCommunicationFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSearchResultsId()) {
          optionals.set(0);
        }
        if (struct.isSetCommunicationId()) {
          optionals.set(1);
        }
        if (struct.isSetFeedback()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSearchResultsId()) {
          struct.searchResultsId.write(oprot);
        }
        if (struct.isSetCommunicationId()) {
          oprot.writeString(struct.communicationId);
        }
        if (struct.isSetFeedback()) {
          oprot.writeI32(struct.feedback.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCommunicationFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.searchResultsId = new edu.jhu.hlt.concrete.UUID();
          struct.searchResultsId.read(iprot);
          struct.setSearchResultsIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.communicationId = iprot.readString();
          struct.setCommunicationIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.feedback = edu.jhu.hlt.concrete.search.SearchFeedback.findByValue(iprot.readI32());
          struct.setFeedbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addCommunicationFeedback_result implements org.apache.thrift.TBase<addCommunicationFeedback_result, addCommunicationFeedback_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCommunicationFeedback_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCommunicationFeedback_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCommunicationFeedback_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCommunicationFeedback_resultTupleSchemeFactory();

    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.services.ServicesException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCommunicationFeedback_result.class, metaDataMap);
    }

    public addCommunicationFeedback_result() {
    }

    public addCommunicationFeedback_result(
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCommunicationFeedback_result(addCommunicationFeedback_result other) {
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public addCommunicationFeedback_result deepCopy() {
      return new addCommunicationFeedback_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public addCommunicationFeedback_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addCommunicationFeedback_result)
        return this.equals((addCommunicationFeedback_result)that);
      return false;
    }

    public boolean equals(addCommunicationFeedback_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addCommunicationFeedback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addCommunicationFeedback_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCommunicationFeedback_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addCommunicationFeedback_resultStandardScheme getScheme() {
        return new addCommunicationFeedback_resultStandardScheme();
      }
    }

    private static class addCommunicationFeedback_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCommunicationFeedback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCommunicationFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCommunicationFeedback_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCommunicationFeedback_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addCommunicationFeedback_resultTupleScheme getScheme() {
        return new addCommunicationFeedback_resultTupleScheme();
      }
    }

    private static class addCommunicationFeedback_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCommunicationFeedback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCommunicationFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCommunicationFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSentenceFeedback_args implements org.apache.thrift.TBase<addSentenceFeedback_args, addSentenceFeedback_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSentenceFeedback_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSentenceFeedback_args");

    private static final org.apache.thrift.protocol.TField SEARCH_RESULTS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("searchResultsId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMMUNICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("communicationId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SENTENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sentenceId", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField FEEDBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("feedback", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSentenceFeedback_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSentenceFeedback_argsTupleSchemeFactory();

    private edu.jhu.hlt.concrete.UUID searchResultsId; // required
    private java.lang.String communicationId; // required
    private edu.jhu.hlt.concrete.UUID sentenceId; // required
    private SearchFeedback feedback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_RESULTS_ID((short)1, "searchResultsId"),
      COMMUNICATION_ID((short)2, "communicationId"),
      SENTENCE_ID((short)3, "sentenceId"),
      /**
       * 
       * @see SearchFeedback
       */
      FEEDBACK((short)4, "feedback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_RESULTS_ID
            return SEARCH_RESULTS_ID;
          case 2: // COMMUNICATION_ID
            return COMMUNICATION_ID;
          case 3: // SENTENCE_ID
            return SENTENCE_ID;
          case 4: // FEEDBACK
            return FEEDBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_RESULTS_ID, new org.apache.thrift.meta_data.FieldMetaData("searchResultsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
      tmpMap.put(_Fields.COMMUNICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("communicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SENTENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sentenceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
      tmpMap.put(_Fields.FEEDBACK, new org.apache.thrift.meta_data.FieldMetaData("feedback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SearchFeedback.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSentenceFeedback_args.class, metaDataMap);
    }

    public addSentenceFeedback_args() {
    }

    public addSentenceFeedback_args(
      edu.jhu.hlt.concrete.UUID searchResultsId,
      java.lang.String communicationId,
      edu.jhu.hlt.concrete.UUID sentenceId,
      SearchFeedback feedback)
    {
      this();
      this.searchResultsId = searchResultsId;
      this.communicationId = communicationId;
      this.sentenceId = sentenceId;
      this.feedback = feedback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSentenceFeedback_args(addSentenceFeedback_args other) {
      if (other.isSetSearchResultsId()) {
        this.searchResultsId = new edu.jhu.hlt.concrete.UUID(other.searchResultsId);
      }
      if (other.isSetCommunicationId()) {
        this.communicationId = other.communicationId;
      }
      if (other.isSetSentenceId()) {
        this.sentenceId = new edu.jhu.hlt.concrete.UUID(other.sentenceId);
      }
      if (other.isSetFeedback()) {
        this.feedback = other.feedback;
      }
    }

    public addSentenceFeedback_args deepCopy() {
      return new addSentenceFeedback_args(this);
    }

    @Override
    public void clear() {
      this.searchResultsId = null;
      this.communicationId = null;
      this.sentenceId = null;
      this.feedback = null;
    }

    public edu.jhu.hlt.concrete.UUID getSearchResultsId() {
      return this.searchResultsId;
    }

    public addSentenceFeedback_args setSearchResultsId(edu.jhu.hlt.concrete.UUID searchResultsId) {
      this.searchResultsId = searchResultsId;
      return this;
    }

    public void unsetSearchResultsId() {
      this.searchResultsId = null;
    }

    /** Returns true if field searchResultsId is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchResultsId() {
      return this.searchResultsId != null;
    }

    public void setSearchResultsIdIsSet(boolean value) {
      if (!value) {
        this.searchResultsId = null;
      }
    }

    public java.lang.String getCommunicationId() {
      return this.communicationId;
    }

    public addSentenceFeedback_args setCommunicationId(java.lang.String communicationId) {
      this.communicationId = communicationId;
      return this;
    }

    public void unsetCommunicationId() {
      this.communicationId = null;
    }

    /** Returns true if field communicationId is set (has been assigned a value) and false otherwise */
    public boolean isSetCommunicationId() {
      return this.communicationId != null;
    }

    public void setCommunicationIdIsSet(boolean value) {
      if (!value) {
        this.communicationId = null;
      }
    }

    public edu.jhu.hlt.concrete.UUID getSentenceId() {
      return this.sentenceId;
    }

    public addSentenceFeedback_args setSentenceId(edu.jhu.hlt.concrete.UUID sentenceId) {
      this.sentenceId = sentenceId;
      return this;
    }

    public void unsetSentenceId() {
      this.sentenceId = null;
    }

    /** Returns true if field sentenceId is set (has been assigned a value) and false otherwise */
    public boolean isSetSentenceId() {
      return this.sentenceId != null;
    }

    public void setSentenceIdIsSet(boolean value) {
      if (!value) {
        this.sentenceId = null;
      }
    }

    /**
     * 
     * @see SearchFeedback
     */
    public SearchFeedback getFeedback() {
      return this.feedback;
    }

    /**
     * 
     * @see SearchFeedback
     */
    public addSentenceFeedback_args setFeedback(SearchFeedback feedback) {
      this.feedback = feedback;
      return this;
    }

    public void unsetFeedback() {
      this.feedback = null;
    }

    /** Returns true if field feedback is set (has been assigned a value) and false otherwise */
    public boolean isSetFeedback() {
      return this.feedback != null;
    }

    public void setFeedbackIsSet(boolean value) {
      if (!value) {
        this.feedback = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SEARCH_RESULTS_ID:
        if (value == null) {
          unsetSearchResultsId();
        } else {
          setSearchResultsId((edu.jhu.hlt.concrete.UUID)value);
        }
        break;

      case COMMUNICATION_ID:
        if (value == null) {
          unsetCommunicationId();
        } else {
          setCommunicationId((java.lang.String)value);
        }
        break;

      case SENTENCE_ID:
        if (value == null) {
          unsetSentenceId();
        } else {
          setSentenceId((edu.jhu.hlt.concrete.UUID)value);
        }
        break;

      case FEEDBACK:
        if (value == null) {
          unsetFeedback();
        } else {
          setFeedback((SearchFeedback)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_RESULTS_ID:
        return getSearchResultsId();

      case COMMUNICATION_ID:
        return getCommunicationId();

      case SENTENCE_ID:
        return getSentenceId();

      case FEEDBACK:
        return getFeedback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_RESULTS_ID:
        return isSetSearchResultsId();
      case COMMUNICATION_ID:
        return isSetCommunicationId();
      case SENTENCE_ID:
        return isSetSentenceId();
      case FEEDBACK:
        return isSetFeedback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addSentenceFeedback_args)
        return this.equals((addSentenceFeedback_args)that);
      return false;
    }

    public boolean equals(addSentenceFeedback_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_searchResultsId = true && this.isSetSearchResultsId();
      boolean that_present_searchResultsId = true && that.isSetSearchResultsId();
      if (this_present_searchResultsId || that_present_searchResultsId) {
        if (!(this_present_searchResultsId && that_present_searchResultsId))
          return false;
        if (!this.searchResultsId.equals(that.searchResultsId))
          return false;
      }

      boolean this_present_communicationId = true && this.isSetCommunicationId();
      boolean that_present_communicationId = true && that.isSetCommunicationId();
      if (this_present_communicationId || that_present_communicationId) {
        if (!(this_present_communicationId && that_present_communicationId))
          return false;
        if (!this.communicationId.equals(that.communicationId))
          return false;
      }

      boolean this_present_sentenceId = true && this.isSetSentenceId();
      boolean that_present_sentenceId = true && that.isSetSentenceId();
      if (this_present_sentenceId || that_present_sentenceId) {
        if (!(this_present_sentenceId && that_present_sentenceId))
          return false;
        if (!this.sentenceId.equals(that.sentenceId))
          return false;
      }

      boolean this_present_feedback = true && this.isSetFeedback();
      boolean that_present_feedback = true && that.isSetFeedback();
      if (this_present_feedback || that_present_feedback) {
        if (!(this_present_feedback && that_present_feedback))
          return false;
        if (!this.feedback.equals(that.feedback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSearchResultsId()) ? 131071 : 524287);
      if (isSetSearchResultsId())
        hashCode = hashCode * 8191 + searchResultsId.hashCode();

      hashCode = hashCode * 8191 + ((isSetCommunicationId()) ? 131071 : 524287);
      if (isSetCommunicationId())
        hashCode = hashCode * 8191 + communicationId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSentenceId()) ? 131071 : 524287);
      if (isSetSentenceId())
        hashCode = hashCode * 8191 + sentenceId.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeedback()) ? 131071 : 524287);
      if (isSetFeedback())
        hashCode = hashCode * 8191 + feedback.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(addSentenceFeedback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSearchResultsId()).compareTo(other.isSetSearchResultsId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchResultsId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchResultsId, other.searchResultsId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCommunicationId()).compareTo(other.isSetCommunicationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommunicationId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communicationId, other.communicationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSentenceId()).compareTo(other.isSetSentenceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSentenceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentenceId, other.sentenceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeedback()).compareTo(other.isSetFeedback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeedback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedback, other.feedback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addSentenceFeedback_args(");
      boolean first = true;

      sb.append("searchResultsId:");
      if (this.searchResultsId == null) {
        sb.append("null");
      } else {
        sb.append(this.searchResultsId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("communicationId:");
      if (this.communicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.communicationId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sentenceId:");
      if (this.sentenceId == null) {
        sb.append("null");
      } else {
        sb.append(this.sentenceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feedback:");
      if (this.feedback == null) {
        sb.append("null");
      } else {
        sb.append(this.feedback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchResultsId != null) {
        searchResultsId.validate();
      }
      if (sentenceId != null) {
        sentenceId.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSentenceFeedback_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSentenceFeedback_argsStandardScheme getScheme() {
        return new addSentenceFeedback_argsStandardScheme();
      }
    }

    private static class addSentenceFeedback_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSentenceFeedback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSentenceFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_RESULTS_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchResultsId = new edu.jhu.hlt.concrete.UUID();
                struct.searchResultsId.read(iprot);
                struct.setSearchResultsIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMMUNICATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.communicationId = iprot.readString();
                struct.setCommunicationIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SENTENCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sentenceId = new edu.jhu.hlt.concrete.UUID();
                struct.sentenceId.read(iprot);
                struct.setSentenceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FEEDBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.feedback = edu.jhu.hlt.concrete.search.SearchFeedback.findByValue(iprot.readI32());
                struct.setFeedbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSentenceFeedback_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchResultsId != null) {
          oprot.writeFieldBegin(SEARCH_RESULTS_ID_FIELD_DESC);
          struct.searchResultsId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.communicationId != null) {
          oprot.writeFieldBegin(COMMUNICATION_ID_FIELD_DESC);
          oprot.writeString(struct.communicationId);
          oprot.writeFieldEnd();
        }
        if (struct.sentenceId != null) {
          oprot.writeFieldBegin(SENTENCE_ID_FIELD_DESC);
          struct.sentenceId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.feedback != null) {
          oprot.writeFieldBegin(FEEDBACK_FIELD_DESC);
          oprot.writeI32(struct.feedback.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSentenceFeedback_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSentenceFeedback_argsTupleScheme getScheme() {
        return new addSentenceFeedback_argsTupleScheme();
      }
    }

    private static class addSentenceFeedback_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSentenceFeedback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSentenceFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSearchResultsId()) {
          optionals.set(0);
        }
        if (struct.isSetCommunicationId()) {
          optionals.set(1);
        }
        if (struct.isSetSentenceId()) {
          optionals.set(2);
        }
        if (struct.isSetFeedback()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSearchResultsId()) {
          struct.searchResultsId.write(oprot);
        }
        if (struct.isSetCommunicationId()) {
          oprot.writeString(struct.communicationId);
        }
        if (struct.isSetSentenceId()) {
          struct.sentenceId.write(oprot);
        }
        if (struct.isSetFeedback()) {
          oprot.writeI32(struct.feedback.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSentenceFeedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.searchResultsId = new edu.jhu.hlt.concrete.UUID();
          struct.searchResultsId.read(iprot);
          struct.setSearchResultsIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.communicationId = iprot.readString();
          struct.setCommunicationIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sentenceId = new edu.jhu.hlt.concrete.UUID();
          struct.sentenceId.read(iprot);
          struct.setSentenceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.feedback = edu.jhu.hlt.concrete.search.SearchFeedback.findByValue(iprot.readI32());
          struct.setFeedbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSentenceFeedback_result implements org.apache.thrift.TBase<addSentenceFeedback_result, addSentenceFeedback_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSentenceFeedback_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSentenceFeedback_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSentenceFeedback_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSentenceFeedback_resultTupleSchemeFactory();

    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.services.ServicesException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSentenceFeedback_result.class, metaDataMap);
    }

    public addSentenceFeedback_result() {
    }

    public addSentenceFeedback_result(
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSentenceFeedback_result(addSentenceFeedback_result other) {
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public addSentenceFeedback_result deepCopy() {
      return new addSentenceFeedback_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public addSentenceFeedback_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addSentenceFeedback_result)
        return this.equals((addSentenceFeedback_result)that);
      return false;
    }

    public boolean equals(addSentenceFeedback_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addSentenceFeedback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addSentenceFeedback_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSentenceFeedback_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSentenceFeedback_resultStandardScheme getScheme() {
        return new addSentenceFeedback_resultStandardScheme();
      }
    }

    private static class addSentenceFeedback_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSentenceFeedback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSentenceFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSentenceFeedback_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSentenceFeedback_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSentenceFeedback_resultTupleScheme getScheme() {
        return new addSentenceFeedback_resultTupleScheme();
      }
    }

    private static class addSentenceFeedback_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSentenceFeedback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSentenceFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSentenceFeedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
