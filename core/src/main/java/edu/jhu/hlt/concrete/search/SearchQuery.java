/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete.search;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Wrapper for information relevant to a (possibly structured) search.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class SearchQuery implements org.apache.thrift.TBase<SearchQuery, SearchQuery._Fields>, java.io.Serializable, Cloneable, Comparable<SearchQuery> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchQuery");

  private static final org.apache.thrift.protocol.TField TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("terms", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField QUESTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("questions", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COMMUNICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("communicationId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokens", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField RAW_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("rawQuery", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AUTHS_FIELD_DESC = new org.apache.thrift.protocol.TField("auths", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LABELS_FIELD_DESC = new org.apache.thrift.protocol.TField("labels", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CORPUS_FIELD_DESC = new org.apache.thrift.protocol.TField("corpus", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField K_FIELD_DESC = new org.apache.thrift.protocol.TField("k", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField COMMUNICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("communication", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SearchQueryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SearchQueryTupleSchemeFactory();

  private java.util.List<java.lang.String> terms; // optional
  private java.util.List<java.lang.String> questions; // optional
  private java.lang.String communicationId; // optional
  private edu.jhu.hlt.concrete.TokenRefSequence tokens; // optional
  private java.lang.String rawQuery; // optional
  private java.lang.String auths; // optional
  private java.lang.String userId; // optional
  private java.lang.String name; // optional
  private java.util.List<java.lang.String> labels; // optional
  private SearchType type; // required
  private java.lang.String lang; // optional
  private java.lang.String corpus; // optional
  private int k; // optional
  private edu.jhu.hlt.concrete.Communication communication; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Individual words, or multiword phrases, e.g., 'dog', 'blue
     * cheese'.  It is the responsibility of the implementation of
     * Search* to tokenize multiword phrases, if so-desired.  Further,
     * an implementation may choose to support advanced features such as
     * wildcards, e.g.: 'blue*'.  This specification makes no
     * committment as to the internal structure of keywords and their
     * semantics: that is the responsibility of the individual
     * implementation.
     */
    TERMS((short)1, "terms"),
    /**
     * e.g., "what is the capital of spain?"
     * 
     * questions is a list in order that possibly different phrasings of
     * the question can be included, e.g.: "what is the name of spain's
     * capital?"
     */
    QUESTIONS((short)2, "questions"),
    /**
     * Refers to an optional communication that can provide context for the query.
     */
    COMMUNICATION_ID((short)3, "communicationId"),
    /**
     * Refers to a sequence of tokens in the communication referenced by communicationId.
     */
    TOKENS((short)4, "tokens"),
    /**
     * The input from the user provided in the search box, unmodified
     */
    RAW_QUERY((short)5, "rawQuery"),
    /**
     * optional authorization mechanism
     */
    AUTHS((short)6, "auths"),
    /**
     * Identifies the user who submitted the search query
     */
    USER_ID((short)7, "userId"),
    /**
     * Human readable name of the query.
     */
    NAME((short)8, "name"),
    /**
     * Properties of the query or user.
     * These labels can be used to group queries and results by a domain or group of
     * users for training. An example usage would be assigning the geographical region
     * as a label ("spain"). User labels could be based on organizational units ("hltcoe").
     */
    LABELS((short)9, "labels"),
    /**
     * This search is over this type of data (communications, sentences, entities)
     * 
     * @see SearchType
     */
    TYPE((short)10, "type"),
    /**
     * The language of the corpus that the user wants to search.
     * Use ISO 639-2/T three letter codes.
     */
    LANG((short)11, "lang"),
    /**
     * An identifier of the corpus that the search is to be performed over.
     */
    CORPUS((short)12, "corpus"),
    /**
     * The maximum number of candidates the search service should return.
     */
    K((short)13, "k"),
    /**
     * An optional communication used as context for the query.
     * If both this field and communicationId is populated, then it is
     * assumed the ID of the communication is the same as communicationId.
     */
    COMMUNICATION((short)14, "communication");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TERMS
          return TERMS;
        case 2: // QUESTIONS
          return QUESTIONS;
        case 3: // COMMUNICATION_ID
          return COMMUNICATION_ID;
        case 4: // TOKENS
          return TOKENS;
        case 5: // RAW_QUERY
          return RAW_QUERY;
        case 6: // AUTHS
          return AUTHS;
        case 7: // USER_ID
          return USER_ID;
        case 8: // NAME
          return NAME;
        case 9: // LABELS
          return LABELS;
        case 10: // TYPE
          return TYPE;
        case 11: // LANG
          return LANG;
        case 12: // CORPUS
          return CORPUS;
        case 13: // K
          return K;
        case 14: // COMMUNICATION
          return COMMUNICATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __K_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TERMS,_Fields.QUESTIONS,_Fields.COMMUNICATION_ID,_Fields.TOKENS,_Fields.RAW_QUERY,_Fields.AUTHS,_Fields.USER_ID,_Fields.NAME,_Fields.LABELS,_Fields.LANG,_Fields.CORPUS,_Fields.K,_Fields.COMMUNICATION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TERMS, new org.apache.thrift.meta_data.FieldMetaData("terms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUESTIONS, new org.apache.thrift.meta_data.FieldMetaData("questions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMMUNICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("communicationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKENS, new org.apache.thrift.meta_data.FieldMetaData("tokens", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.TokenRefSequence.class)));
    tmpMap.put(_Fields.RAW_QUERY, new org.apache.thrift.meta_data.FieldMetaData("rawQuery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHS, new org.apache.thrift.meta_data.FieldMetaData("auths", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABELS, new org.apache.thrift.meta_data.FieldMetaData("labels", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SearchType.class)));
    tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CORPUS, new org.apache.thrift.meta_data.FieldMetaData("corpus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.K, new org.apache.thrift.meta_data.FieldMetaData("k", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMUNICATION, new org.apache.thrift.meta_data.FieldMetaData("communication", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.Communication.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchQuery.class, metaDataMap);
  }

  public SearchQuery() {
  }

  public SearchQuery(
    SearchType type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchQuery(SearchQuery other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTerms()) {
      java.util.List<java.lang.String> __this__terms = new java.util.ArrayList<java.lang.String>(other.terms);
      this.terms = __this__terms;
    }
    if (other.isSetQuestions()) {
      java.util.List<java.lang.String> __this__questions = new java.util.ArrayList<java.lang.String>(other.questions);
      this.questions = __this__questions;
    }
    if (other.isSetCommunicationId()) {
      this.communicationId = other.communicationId;
    }
    if (other.isSetTokens()) {
      this.tokens = new edu.jhu.hlt.concrete.TokenRefSequence(other.tokens);
    }
    if (other.isSetRawQuery()) {
      this.rawQuery = other.rawQuery;
    }
    if (other.isSetAuths()) {
      this.auths = other.auths;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetLabels()) {
      java.util.List<java.lang.String> __this__labels = new java.util.ArrayList<java.lang.String>(other.labels);
      this.labels = __this__labels;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
    if (other.isSetCorpus()) {
      this.corpus = other.corpus;
    }
    this.k = other.k;
    if (other.isSetCommunication()) {
      this.communication = new edu.jhu.hlt.concrete.Communication(other.communication);
    }
  }

  public SearchQuery deepCopy() {
    return new SearchQuery(this);
  }

  @Override
  public void clear() {
    this.terms = null;
    this.questions = null;
    this.communicationId = null;
    this.tokens = null;
    this.rawQuery = null;
    this.auths = null;
    this.userId = null;
    this.name = null;
    this.labels = null;
    this.type = null;
    this.lang = null;
    this.corpus = null;
    setKIsSet(false);
    this.k = 0;
    this.communication = null;
  }

  public int getTermsSize() {
    return (this.terms == null) ? 0 : this.terms.size();
  }

  public java.util.Iterator<java.lang.String> getTermsIterator() {
    return (this.terms == null) ? null : this.terms.iterator();
  }

  public void addToTerms(java.lang.String elem) {
    if (this.terms == null) {
      this.terms = new java.util.ArrayList<java.lang.String>();
    }
    this.terms.add(elem);
  }

  /**
   * Individual words, or multiword phrases, e.g., 'dog', 'blue
   * cheese'.  It is the responsibility of the implementation of
   * Search* to tokenize multiword phrases, if so-desired.  Further,
   * an implementation may choose to support advanced features such as
   * wildcards, e.g.: 'blue*'.  This specification makes no
   * committment as to the internal structure of keywords and their
   * semantics: that is the responsibility of the individual
   * implementation.
   */
  public java.util.List<java.lang.String> getTerms() {
    return this.terms;
  }

  /**
   * Individual words, or multiword phrases, e.g., 'dog', 'blue
   * cheese'.  It is the responsibility of the implementation of
   * Search* to tokenize multiword phrases, if so-desired.  Further,
   * an implementation may choose to support advanced features such as
   * wildcards, e.g.: 'blue*'.  This specification makes no
   * committment as to the internal structure of keywords and their
   * semantics: that is the responsibility of the individual
   * implementation.
   */
  public SearchQuery setTerms(java.util.List<java.lang.String> terms) {
    this.terms = terms;
    return this;
  }

  public void unsetTerms() {
    this.terms = null;
  }

  /** Returns true if field terms is set (has been assigned a value) and false otherwise */
  public boolean isSetTerms() {
    return this.terms != null;
  }

  public void setTermsIsSet(boolean value) {
    if (!value) {
      this.terms = null;
    }
  }

  public int getQuestionsSize() {
    return (this.questions == null) ? 0 : this.questions.size();
  }

  public java.util.Iterator<java.lang.String> getQuestionsIterator() {
    return (this.questions == null) ? null : this.questions.iterator();
  }

  public void addToQuestions(java.lang.String elem) {
    if (this.questions == null) {
      this.questions = new java.util.ArrayList<java.lang.String>();
    }
    this.questions.add(elem);
  }

  /**
   * e.g., "what is the capital of spain?"
   * 
   * questions is a list in order that possibly different phrasings of
   * the question can be included, e.g.: "what is the name of spain's
   * capital?"
   */
  public java.util.List<java.lang.String> getQuestions() {
    return this.questions;
  }

  /**
   * e.g., "what is the capital of spain?"
   * 
   * questions is a list in order that possibly different phrasings of
   * the question can be included, e.g.: "what is the name of spain's
   * capital?"
   */
  public SearchQuery setQuestions(java.util.List<java.lang.String> questions) {
    this.questions = questions;
    return this;
  }

  public void unsetQuestions() {
    this.questions = null;
  }

  /** Returns true if field questions is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestions() {
    return this.questions != null;
  }

  public void setQuestionsIsSet(boolean value) {
    if (!value) {
      this.questions = null;
    }
  }

  /**
   * Refers to an optional communication that can provide context for the query.
   */
  public java.lang.String getCommunicationId() {
    return this.communicationId;
  }

  /**
   * Refers to an optional communication that can provide context for the query.
   */
  public SearchQuery setCommunicationId(java.lang.String communicationId) {
    this.communicationId = communicationId;
    return this;
  }

  public void unsetCommunicationId() {
    this.communicationId = null;
  }

  /** Returns true if field communicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommunicationId() {
    return this.communicationId != null;
  }

  public void setCommunicationIdIsSet(boolean value) {
    if (!value) {
      this.communicationId = null;
    }
  }

  /**
   * Refers to a sequence of tokens in the communication referenced by communicationId.
   */
  public edu.jhu.hlt.concrete.TokenRefSequence getTokens() {
    return this.tokens;
  }

  /**
   * Refers to a sequence of tokens in the communication referenced by communicationId.
   */
  public SearchQuery setTokens(edu.jhu.hlt.concrete.TokenRefSequence tokens) {
    this.tokens = tokens;
    return this;
  }

  public void unsetTokens() {
    this.tokens = null;
  }

  /** Returns true if field tokens is set (has been assigned a value) and false otherwise */
  public boolean isSetTokens() {
    return this.tokens != null;
  }

  public void setTokensIsSet(boolean value) {
    if (!value) {
      this.tokens = null;
    }
  }

  /**
   * The input from the user provided in the search box, unmodified
   */
  public java.lang.String getRawQuery() {
    return this.rawQuery;
  }

  /**
   * The input from the user provided in the search box, unmodified
   */
  public SearchQuery setRawQuery(java.lang.String rawQuery) {
    this.rawQuery = rawQuery;
    return this;
  }

  public void unsetRawQuery() {
    this.rawQuery = null;
  }

  /** Returns true if field rawQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetRawQuery() {
    return this.rawQuery != null;
  }

  public void setRawQueryIsSet(boolean value) {
    if (!value) {
      this.rawQuery = null;
    }
  }

  /**
   * optional authorization mechanism
   */
  public java.lang.String getAuths() {
    return this.auths;
  }

  /**
   * optional authorization mechanism
   */
  public SearchQuery setAuths(java.lang.String auths) {
    this.auths = auths;
    return this;
  }

  public void unsetAuths() {
    this.auths = null;
  }

  /** Returns true if field auths is set (has been assigned a value) and false otherwise */
  public boolean isSetAuths() {
    return this.auths != null;
  }

  public void setAuthsIsSet(boolean value) {
    if (!value) {
      this.auths = null;
    }
  }

  /**
   * Identifies the user who submitted the search query
   */
  public java.lang.String getUserId() {
    return this.userId;
  }

  /**
   * Identifies the user who submitted the search query
   */
  public SearchQuery setUserId(java.lang.String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  /**
   * Human readable name of the query.
   */
  public java.lang.String getName() {
    return this.name;
  }

  /**
   * Human readable name of the query.
   */
  public SearchQuery setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getLabelsSize() {
    return (this.labels == null) ? 0 : this.labels.size();
  }

  public java.util.Iterator<java.lang.String> getLabelsIterator() {
    return (this.labels == null) ? null : this.labels.iterator();
  }

  public void addToLabels(java.lang.String elem) {
    if (this.labels == null) {
      this.labels = new java.util.ArrayList<java.lang.String>();
    }
    this.labels.add(elem);
  }

  /**
   * Properties of the query or user.
   * These labels can be used to group queries and results by a domain or group of
   * users for training. An example usage would be assigning the geographical region
   * as a label ("spain"). User labels could be based on organizational units ("hltcoe").
   */
  public java.util.List<java.lang.String> getLabels() {
    return this.labels;
  }

  /**
   * Properties of the query or user.
   * These labels can be used to group queries and results by a domain or group of
   * users for training. An example usage would be assigning the geographical region
   * as a label ("spain"). User labels could be based on organizational units ("hltcoe").
   */
  public SearchQuery setLabels(java.util.List<java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  public void unsetLabels() {
    this.labels = null;
  }

  /** Returns true if field labels is set (has been assigned a value) and false otherwise */
  public boolean isSetLabels() {
    return this.labels != null;
  }

  public void setLabelsIsSet(boolean value) {
    if (!value) {
      this.labels = null;
    }
  }

  /**
   * This search is over this type of data (communications, sentences, entities)
   * 
   * @see SearchType
   */
  public SearchType getType() {
    return this.type;
  }

  /**
   * This search is over this type of data (communications, sentences, entities)
   * 
   * @see SearchType
   */
  public SearchQuery setType(SearchType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * The language of the corpus that the user wants to search.
   * Use ISO 639-2/T three letter codes.
   */
  public java.lang.String getLang() {
    return this.lang;
  }

  /**
   * The language of the corpus that the user wants to search.
   * Use ISO 639-2/T three letter codes.
   */
  public SearchQuery setLang(java.lang.String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been assigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  /**
   * An identifier of the corpus that the search is to be performed over.
   */
  public java.lang.String getCorpus() {
    return this.corpus;
  }

  /**
   * An identifier of the corpus that the search is to be performed over.
   */
  public SearchQuery setCorpus(java.lang.String corpus) {
    this.corpus = corpus;
    return this;
  }

  public void unsetCorpus() {
    this.corpus = null;
  }

  /** Returns true if field corpus is set (has been assigned a value) and false otherwise */
  public boolean isSetCorpus() {
    return this.corpus != null;
  }

  public void setCorpusIsSet(boolean value) {
    if (!value) {
      this.corpus = null;
    }
  }

  /**
   * The maximum number of candidates the search service should return.
   */
  public int getK() {
    return this.k;
  }

  /**
   * The maximum number of candidates the search service should return.
   */
  public SearchQuery setK(int k) {
    this.k = k;
    setKIsSet(true);
    return this;
  }

  public void unsetK() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __K_ISSET_ID);
  }

  /** Returns true if field k is set (has been assigned a value) and false otherwise */
  public boolean isSetK() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __K_ISSET_ID);
  }

  public void setKIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __K_ISSET_ID, value);
  }

  /**
   * An optional communication used as context for the query.
   * If both this field and communicationId is populated, then it is
   * assumed the ID of the communication is the same as communicationId.
   */
  public edu.jhu.hlt.concrete.Communication getCommunication() {
    return this.communication;
  }

  /**
   * An optional communication used as context for the query.
   * If both this field and communicationId is populated, then it is
   * assumed the ID of the communication is the same as communicationId.
   */
  public SearchQuery setCommunication(edu.jhu.hlt.concrete.Communication communication) {
    this.communication = communication;
    return this;
  }

  public void unsetCommunication() {
    this.communication = null;
  }

  /** Returns true if field communication is set (has been assigned a value) and false otherwise */
  public boolean isSetCommunication() {
    return this.communication != null;
  }

  public void setCommunicationIsSet(boolean value) {
    if (!value) {
      this.communication = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TERMS:
      if (value == null) {
        unsetTerms();
      } else {
        setTerms((java.util.List<java.lang.String>)value);
      }
      break;

    case QUESTIONS:
      if (value == null) {
        unsetQuestions();
      } else {
        setQuestions((java.util.List<java.lang.String>)value);
      }
      break;

    case COMMUNICATION_ID:
      if (value == null) {
        unsetCommunicationId();
      } else {
        setCommunicationId((java.lang.String)value);
      }
      break;

    case TOKENS:
      if (value == null) {
        unsetTokens();
      } else {
        setTokens((edu.jhu.hlt.concrete.TokenRefSequence)value);
      }
      break;

    case RAW_QUERY:
      if (value == null) {
        unsetRawQuery();
      } else {
        setRawQuery((java.lang.String)value);
      }
      break;

    case AUTHS:
      if (value == null) {
        unsetAuths();
      } else {
        setAuths((java.lang.String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case LABELS:
      if (value == null) {
        unsetLabels();
      } else {
        setLabels((java.util.List<java.lang.String>)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((SearchType)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((java.lang.String)value);
      }
      break;

    case CORPUS:
      if (value == null) {
        unsetCorpus();
      } else {
        setCorpus((java.lang.String)value);
      }
      break;

    case K:
      if (value == null) {
        unsetK();
      } else {
        setK((java.lang.Integer)value);
      }
      break;

    case COMMUNICATION:
      if (value == null) {
        unsetCommunication();
      } else {
        setCommunication((edu.jhu.hlt.concrete.Communication)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TERMS:
      return getTerms();

    case QUESTIONS:
      return getQuestions();

    case COMMUNICATION_ID:
      return getCommunicationId();

    case TOKENS:
      return getTokens();

    case RAW_QUERY:
      return getRawQuery();

    case AUTHS:
      return getAuths();

    case USER_ID:
      return getUserId();

    case NAME:
      return getName();

    case LABELS:
      return getLabels();

    case TYPE:
      return getType();

    case LANG:
      return getLang();

    case CORPUS:
      return getCorpus();

    case K:
      return getK();

    case COMMUNICATION:
      return getCommunication();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TERMS:
      return isSetTerms();
    case QUESTIONS:
      return isSetQuestions();
    case COMMUNICATION_ID:
      return isSetCommunicationId();
    case TOKENS:
      return isSetTokens();
    case RAW_QUERY:
      return isSetRawQuery();
    case AUTHS:
      return isSetAuths();
    case USER_ID:
      return isSetUserId();
    case NAME:
      return isSetName();
    case LABELS:
      return isSetLabels();
    case TYPE:
      return isSetType();
    case LANG:
      return isSetLang();
    case CORPUS:
      return isSetCorpus();
    case K:
      return isSetK();
    case COMMUNICATION:
      return isSetCommunication();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchQuery)
      return this.equals((SearchQuery)that);
    return false;
  }

  public boolean equals(SearchQuery that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_terms = true && this.isSetTerms();
    boolean that_present_terms = true && that.isSetTerms();
    if (this_present_terms || that_present_terms) {
      if (!(this_present_terms && that_present_terms))
        return false;
      if (!this.terms.equals(that.terms))
        return false;
    }

    boolean this_present_questions = true && this.isSetQuestions();
    boolean that_present_questions = true && that.isSetQuestions();
    if (this_present_questions || that_present_questions) {
      if (!(this_present_questions && that_present_questions))
        return false;
      if (!this.questions.equals(that.questions))
        return false;
    }

    boolean this_present_communicationId = true && this.isSetCommunicationId();
    boolean that_present_communicationId = true && that.isSetCommunicationId();
    if (this_present_communicationId || that_present_communicationId) {
      if (!(this_present_communicationId && that_present_communicationId))
        return false;
      if (!this.communicationId.equals(that.communicationId))
        return false;
    }

    boolean this_present_tokens = true && this.isSetTokens();
    boolean that_present_tokens = true && that.isSetTokens();
    if (this_present_tokens || that_present_tokens) {
      if (!(this_present_tokens && that_present_tokens))
        return false;
      if (!this.tokens.equals(that.tokens))
        return false;
    }

    boolean this_present_rawQuery = true && this.isSetRawQuery();
    boolean that_present_rawQuery = true && that.isSetRawQuery();
    if (this_present_rawQuery || that_present_rawQuery) {
      if (!(this_present_rawQuery && that_present_rawQuery))
        return false;
      if (!this.rawQuery.equals(that.rawQuery))
        return false;
    }

    boolean this_present_auths = true && this.isSetAuths();
    boolean that_present_auths = true && that.isSetAuths();
    if (this_present_auths || that_present_auths) {
      if (!(this_present_auths && that_present_auths))
        return false;
      if (!this.auths.equals(that.auths))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_labels = true && this.isSetLabels();
    boolean that_present_labels = true && that.isSetLabels();
    if (this_present_labels || that_present_labels) {
      if (!(this_present_labels && that_present_labels))
        return false;
      if (!this.labels.equals(that.labels))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    boolean this_present_corpus = true && this.isSetCorpus();
    boolean that_present_corpus = true && that.isSetCorpus();
    if (this_present_corpus || that_present_corpus) {
      if (!(this_present_corpus && that_present_corpus))
        return false;
      if (!this.corpus.equals(that.corpus))
        return false;
    }

    boolean this_present_k = true && this.isSetK();
    boolean that_present_k = true && that.isSetK();
    if (this_present_k || that_present_k) {
      if (!(this_present_k && that_present_k))
        return false;
      if (this.k != that.k)
        return false;
    }

    boolean this_present_communication = true && this.isSetCommunication();
    boolean that_present_communication = true && that.isSetCommunication();
    if (this_present_communication || that_present_communication) {
      if (!(this_present_communication && that_present_communication))
        return false;
      if (!this.communication.equals(that.communication))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTerms()) ? 131071 : 524287);
    if (isSetTerms())
      hashCode = hashCode * 8191 + terms.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuestions()) ? 131071 : 524287);
    if (isSetQuestions())
      hashCode = hashCode * 8191 + questions.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommunicationId()) ? 131071 : 524287);
    if (isSetCommunicationId())
      hashCode = hashCode * 8191 + communicationId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTokens()) ? 131071 : 524287);
    if (isSetTokens())
      hashCode = hashCode * 8191 + tokens.hashCode();

    hashCode = hashCode * 8191 + ((isSetRawQuery()) ? 131071 : 524287);
    if (isSetRawQuery())
      hashCode = hashCode * 8191 + rawQuery.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuths()) ? 131071 : 524287);
    if (isSetAuths())
      hashCode = hashCode * 8191 + auths.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetLabels()) ? 131071 : 524287);
    if (isSetLabels())
      hashCode = hashCode * 8191 + labels.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetLang()) ? 131071 : 524287);
    if (isSetLang())
      hashCode = hashCode * 8191 + lang.hashCode();

    hashCode = hashCode * 8191 + ((isSetCorpus()) ? 131071 : 524287);
    if (isSetCorpus())
      hashCode = hashCode * 8191 + corpus.hashCode();

    hashCode = hashCode * 8191 + ((isSetK()) ? 131071 : 524287);
    if (isSetK())
      hashCode = hashCode * 8191 + k;

    hashCode = hashCode * 8191 + ((isSetCommunication()) ? 131071 : 524287);
    if (isSetCommunication())
      hashCode = hashCode * 8191 + communication.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SearchQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTerms()).compareTo(other.isSetTerms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terms, other.terms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQuestions()).compareTo(other.isSetQuestions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questions, other.questions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCommunicationId()).compareTo(other.isSetCommunicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommunicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communicationId, other.communicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTokens()).compareTo(other.isSetTokens());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokens()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokens, other.tokens);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRawQuery()).compareTo(other.isSetRawQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRawQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rawQuery, other.rawQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuths()).compareTo(other.isSetAuths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auths, other.auths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLabels()).compareTo(other.isSetLabels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labels, other.labels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLang()).compareTo(other.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, other.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCorpus()).compareTo(other.isSetCorpus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorpus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpus, other.corpus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetK()).compareTo(other.isSetK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.k, other.k);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCommunication()).compareTo(other.isSetCommunication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommunication()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communication, other.communication);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SearchQuery(");
    boolean first = true;

    if (isSetTerms()) {
      sb.append("terms:");
      if (this.terms == null) {
        sb.append("null");
      } else {
        sb.append(this.terms);
      }
      first = false;
    }
    if (isSetQuestions()) {
      if (!first) sb.append(", ");
      sb.append("questions:");
      if (this.questions == null) {
        sb.append("null");
      } else {
        sb.append(this.questions);
      }
      first = false;
    }
    if (isSetCommunicationId()) {
      if (!first) sb.append(", ");
      sb.append("communicationId:");
      if (this.communicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.communicationId);
      }
      first = false;
    }
    if (isSetTokens()) {
      if (!first) sb.append(", ");
      sb.append("tokens:");
      if (this.tokens == null) {
        sb.append("null");
      } else {
        sb.append(this.tokens);
      }
      first = false;
    }
    if (isSetRawQuery()) {
      if (!first) sb.append(", ");
      sb.append("rawQuery:");
      if (this.rawQuery == null) {
        sb.append("null");
      } else {
        sb.append(this.rawQuery);
      }
      first = false;
    }
    if (isSetAuths()) {
      if (!first) sb.append(", ");
      sb.append("auths:");
      if (this.auths == null) {
        sb.append("null");
      } else {
        sb.append(this.auths);
      }
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetLabels()) {
      if (!first) sb.append(", ");
      sb.append("labels:");
      if (this.labels == null) {
        sb.append("null");
      } else {
        sb.append(this.labels);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetLang()) {
      if (!first) sb.append(", ");
      sb.append("lang:");
      if (this.lang == null) {
        sb.append("null");
      } else {
        sb.append(this.lang);
      }
      first = false;
    }
    if (isSetCorpus()) {
      if (!first) sb.append(", ");
      sb.append("corpus:");
      if (this.corpus == null) {
        sb.append("null");
      } else {
        sb.append(this.corpus);
      }
      first = false;
    }
    if (isSetK()) {
      if (!first) sb.append(", ");
      sb.append("k:");
      sb.append(this.k);
      first = false;
    }
    if (isSetCommunication()) {
      if (!first) sb.append(", ");
      sb.append("communication:");
      if (this.communication == null) {
        sb.append("null");
      } else {
        sb.append(this.communication);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tokens != null) {
      tokens.validate();
    }
    if (communication != null) {
      communication.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchQueryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchQueryStandardScheme getScheme() {
      return new SearchQueryStandardScheme();
    }
  }

  private static class SearchQueryStandardScheme extends org.apache.thrift.scheme.StandardScheme<SearchQuery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TERMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.terms = new java.util.ArrayList<java.lang.String>(_list0.size);
                java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.terms.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTermsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUESTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.questions = new java.util.ArrayList<java.lang.String>(_list3.size);
                java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.questions.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setQuestionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMUNICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.communicationId = iprot.readString();
              struct.setCommunicationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOKENS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokens = new edu.jhu.hlt.concrete.TokenRefSequence();
              struct.tokens.read(iprot);
              struct.setTokensIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RAW_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rawQuery = iprot.readString();
              struct.setRawQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUTHS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auths = iprot.readString();
              struct.setAuthsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LABELS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.labels = new java.util.ArrayList<java.lang.String>(_list6.size);
                java.lang.String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.labels.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setLabelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = edu.jhu.hlt.concrete.search.SearchType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lang = iprot.readString();
              struct.setLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CORPUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.corpus = iprot.readString();
              struct.setCorpusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // K
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.k = iprot.readI32();
              struct.setKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COMMUNICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.communication = new edu.jhu.hlt.concrete.Communication();
              struct.communication.read(iprot);
              struct.setCommunicationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchQuery struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.terms != null) {
        if (struct.isSetTerms()) {
          oprot.writeFieldBegin(TERMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.terms.size()));
            for (java.lang.String _iter9 : struct.terms)
            {
              oprot.writeString(_iter9);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.questions != null) {
        if (struct.isSetQuestions()) {
          oprot.writeFieldBegin(QUESTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.questions.size()));
            for (java.lang.String _iter10 : struct.questions)
            {
              oprot.writeString(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.communicationId != null) {
        if (struct.isSetCommunicationId()) {
          oprot.writeFieldBegin(COMMUNICATION_ID_FIELD_DESC);
          oprot.writeString(struct.communicationId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tokens != null) {
        if (struct.isSetTokens()) {
          oprot.writeFieldBegin(TOKENS_FIELD_DESC);
          struct.tokens.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rawQuery != null) {
        if (struct.isSetRawQuery()) {
          oprot.writeFieldBegin(RAW_QUERY_FIELD_DESC);
          oprot.writeString(struct.rawQuery);
          oprot.writeFieldEnd();
        }
      }
      if (struct.auths != null) {
        if (struct.isSetAuths()) {
          oprot.writeFieldBegin(AUTHS_FIELD_DESC);
          oprot.writeString(struct.auths);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userId != null) {
        if (struct.isSetUserId()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.labels != null) {
        if (struct.isSetLabels()) {
          oprot.writeFieldBegin(LABELS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.labels.size()));
            for (java.lang.String _iter11 : struct.labels)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.lang != null) {
        if (struct.isSetLang()) {
          oprot.writeFieldBegin(LANG_FIELD_DESC);
          oprot.writeString(struct.lang);
          oprot.writeFieldEnd();
        }
      }
      if (struct.corpus != null) {
        if (struct.isSetCorpus()) {
          oprot.writeFieldBegin(CORPUS_FIELD_DESC);
          oprot.writeString(struct.corpus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetK()) {
        oprot.writeFieldBegin(K_FIELD_DESC);
        oprot.writeI32(struct.k);
        oprot.writeFieldEnd();
      }
      if (struct.communication != null) {
        if (struct.isSetCommunication()) {
          oprot.writeFieldBegin(COMMUNICATION_FIELD_DESC);
          struct.communication.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchQueryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchQueryTupleScheme getScheme() {
      return new SearchQueryTupleScheme();
    }
  }

  private static class SearchQueryTupleScheme extends org.apache.thrift.scheme.TupleScheme<SearchQuery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTerms()) {
        optionals.set(0);
      }
      if (struct.isSetQuestions()) {
        optionals.set(1);
      }
      if (struct.isSetCommunicationId()) {
        optionals.set(2);
      }
      if (struct.isSetTokens()) {
        optionals.set(3);
      }
      if (struct.isSetRawQuery()) {
        optionals.set(4);
      }
      if (struct.isSetAuths()) {
        optionals.set(5);
      }
      if (struct.isSetUserId()) {
        optionals.set(6);
      }
      if (struct.isSetName()) {
        optionals.set(7);
      }
      if (struct.isSetLabels()) {
        optionals.set(8);
      }
      if (struct.isSetLang()) {
        optionals.set(9);
      }
      if (struct.isSetCorpus()) {
        optionals.set(10);
      }
      if (struct.isSetK()) {
        optionals.set(11);
      }
      if (struct.isSetCommunication()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetTerms()) {
        {
          oprot.writeI32(struct.terms.size());
          for (java.lang.String _iter12 : struct.terms)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetQuestions()) {
        {
          oprot.writeI32(struct.questions.size());
          for (java.lang.String _iter13 : struct.questions)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetCommunicationId()) {
        oprot.writeString(struct.communicationId);
      }
      if (struct.isSetTokens()) {
        struct.tokens.write(oprot);
      }
      if (struct.isSetRawQuery()) {
        oprot.writeString(struct.rawQuery);
      }
      if (struct.isSetAuths()) {
        oprot.writeString(struct.auths);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetLabels()) {
        {
          oprot.writeI32(struct.labels.size());
          for (java.lang.String _iter14 : struct.labels)
          {
            oprot.writeString(_iter14);
          }
        }
      }
      if (struct.isSetLang()) {
        oprot.writeString(struct.lang);
      }
      if (struct.isSetCorpus()) {
        oprot.writeString(struct.corpus);
      }
      if (struct.isSetK()) {
        oprot.writeI32(struct.k);
      }
      if (struct.isSetCommunication()) {
        struct.communication.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.type = edu.jhu.hlt.concrete.search.SearchType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.terms = new java.util.ArrayList<java.lang.String>(_list15.size);
          java.lang.String _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readString();
            struct.terms.add(_elem16);
          }
        }
        struct.setTermsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.questions = new java.util.ArrayList<java.lang.String>(_list18.size);
          java.lang.String _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readString();
            struct.questions.add(_elem19);
          }
        }
        struct.setQuestionsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.communicationId = iprot.readString();
        struct.setCommunicationIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tokens = new edu.jhu.hlt.concrete.TokenRefSequence();
        struct.tokens.read(iprot);
        struct.setTokensIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rawQuery = iprot.readString();
        struct.setRawQueryIsSet(true);
      }
      if (incoming.get(5)) {
        struct.auths = iprot.readString();
        struct.setAuthsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.labels = new java.util.ArrayList<java.lang.String>(_list21.size);
          java.lang.String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.labels.add(_elem22);
          }
        }
        struct.setLabelsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lang = iprot.readString();
        struct.setLangIsSet(true);
      }
      if (incoming.get(10)) {
        struct.corpus = iprot.readString();
        struct.setCorpusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.k = iprot.readI32();
        struct.setKIsSet(true);
      }
      if (incoming.get(12)) {
        struct.communication = new edu.jhu.hlt.concrete.Communication();
        struct.communication.read(iprot);
        struct.setCommunicationIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

