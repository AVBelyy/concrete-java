/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A theory about what languages are present in a given communication
 * or piece of communication.  Note that it is possible to have more
 * than one language present in a given communication.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class LanguageIdentification implements org.apache.thrift.TBase<LanguageIdentification, LanguageIdentification._Fields>, java.io.Serializable, Cloneable, Comparable<LanguageIdentification> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LanguageIdentification");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LANGUAGE_TO_PROBABILITY_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("languageToProbabilityMap", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LanguageIdentificationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LanguageIdentificationTupleSchemeFactory();

  private edu.jhu.hlt.concrete.UUID uuid; // required
  private edu.jhu.hlt.concrete.AnnotationMetadata metadata; // required
  private java.util.Map<java.lang.String,java.lang.Double> languageToProbabilityMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Unique identifier for this language identification.
     */
    UUID((short)1, "uuid"),
    /**
     * Information about where this language identification came from.
     */
    METADATA((short)2, "metadata"),
    /**
     * A list mapping from a language to the probability that that
     * language occurs in a given communication.  Each language code should
     * occur at most once in this list.  The probabilities do <i>not</i>
     * need to sum to one -- for example, if a single communication is known
     * to contain both English and French, then it would be appropriate
     * to assign a probability of 1 to both langauges.  (Manually
     * annotated LanguageProb objects should always have probabilities
     * of either zero or one; machine-generated LanguageProbs may have
     * intermediate probabilities.)
     * 
     * Note: The string key should represent the ISO 639-3 three-letter code.
     */
    LANGUAGE_TO_PROBABILITY_MAP((short)3, "languageToProbabilityMap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // METADATA
          return METADATA;
        case 3: // LANGUAGE_TO_PROBABILITY_MAP
          return LANGUAGE_TO_PROBABILITY_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.AnnotationMetadata.class)));
    tmpMap.put(_Fields.LANGUAGE_TO_PROBABILITY_MAP, new org.apache.thrift.meta_data.FieldMetaData("languageToProbabilityMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LanguageIdentification.class, metaDataMap);
  }

  public LanguageIdentification() {
  }

  public LanguageIdentification(
    edu.jhu.hlt.concrete.UUID uuid,
    edu.jhu.hlt.concrete.AnnotationMetadata metadata,
    java.util.Map<java.lang.String,java.lang.Double> languageToProbabilityMap)
  {
    this();
    this.uuid = uuid;
    this.metadata = metadata;
    this.languageToProbabilityMap = languageToProbabilityMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LanguageIdentification(LanguageIdentification other) {
    if (other.isSetUuid()) {
      this.uuid = new edu.jhu.hlt.concrete.UUID(other.uuid);
    }
    if (other.isSetMetadata()) {
      this.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata(other.metadata);
    }
    if (other.isSetLanguageToProbabilityMap()) {
      java.util.Map<java.lang.String,java.lang.Double> __this__languageToProbabilityMap = new java.util.HashMap<java.lang.String,java.lang.Double>(other.languageToProbabilityMap);
      this.languageToProbabilityMap = __this__languageToProbabilityMap;
    }
  }

  public LanguageIdentification deepCopy() {
    return new LanguageIdentification(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.metadata = null;
    this.languageToProbabilityMap = null;
  }

  /**
   * Unique identifier for this language identification.
   */
  public edu.jhu.hlt.concrete.UUID getUuid() {
    return this.uuid;
  }

  /**
   * Unique identifier for this language identification.
   */
  public LanguageIdentification setUuid(edu.jhu.hlt.concrete.UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  /**
   * Information about where this language identification came from.
   */
  public edu.jhu.hlt.concrete.AnnotationMetadata getMetadata() {
    return this.metadata;
  }

  /**
   * Information about where this language identification came from.
   */
  public LanguageIdentification setMetadata(edu.jhu.hlt.concrete.AnnotationMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public int getLanguageToProbabilityMapSize() {
    return (this.languageToProbabilityMap == null) ? 0 : this.languageToProbabilityMap.size();
  }

  public void putToLanguageToProbabilityMap(java.lang.String key, double val) {
    if (this.languageToProbabilityMap == null) {
      this.languageToProbabilityMap = new java.util.HashMap<java.lang.String,java.lang.Double>();
    }
    this.languageToProbabilityMap.put(key, val);
  }

  /**
   * A list mapping from a language to the probability that that
   * language occurs in a given communication.  Each language code should
   * occur at most once in this list.  The probabilities do <i>not</i>
   * need to sum to one -- for example, if a single communication is known
   * to contain both English and French, then it would be appropriate
   * to assign a probability of 1 to both langauges.  (Manually
   * annotated LanguageProb objects should always have probabilities
   * of either zero or one; machine-generated LanguageProbs may have
   * intermediate probabilities.)
   * 
   * Note: The string key should represent the ISO 639-3 three-letter code.
   */
  public java.util.Map<java.lang.String,java.lang.Double> getLanguageToProbabilityMap() {
    return this.languageToProbabilityMap;
  }

  /**
   * A list mapping from a language to the probability that that
   * language occurs in a given communication.  Each language code should
   * occur at most once in this list.  The probabilities do <i>not</i>
   * need to sum to one -- for example, if a single communication is known
   * to contain both English and French, then it would be appropriate
   * to assign a probability of 1 to both langauges.  (Manually
   * annotated LanguageProb objects should always have probabilities
   * of either zero or one; machine-generated LanguageProbs may have
   * intermediate probabilities.)
   * 
   * Note: The string key should represent the ISO 639-3 three-letter code.
   */
  public LanguageIdentification setLanguageToProbabilityMap(java.util.Map<java.lang.String,java.lang.Double> languageToProbabilityMap) {
    this.languageToProbabilityMap = languageToProbabilityMap;
    return this;
  }

  public void unsetLanguageToProbabilityMap() {
    this.languageToProbabilityMap = null;
  }

  /** Returns true if field languageToProbabilityMap is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguageToProbabilityMap() {
    return this.languageToProbabilityMap != null;
  }

  public void setLanguageToProbabilityMapIsSet(boolean value) {
    if (!value) {
      this.languageToProbabilityMap = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((edu.jhu.hlt.concrete.AnnotationMetadata)value);
      }
      break;

    case LANGUAGE_TO_PROBABILITY_MAP:
      if (value == null) {
        unsetLanguageToProbabilityMap();
      } else {
        setLanguageToProbabilityMap((java.util.Map<java.lang.String,java.lang.Double>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case METADATA:
      return getMetadata();

    case LANGUAGE_TO_PROBABILITY_MAP:
      return getLanguageToProbabilityMap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case METADATA:
      return isSetMetadata();
    case LANGUAGE_TO_PROBABILITY_MAP:
      return isSetLanguageToProbabilityMap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LanguageIdentification)
      return this.equals((LanguageIdentification)that);
    return false;
  }

  public boolean equals(LanguageIdentification that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_languageToProbabilityMap = true && this.isSetLanguageToProbabilityMap();
    boolean that_present_languageToProbabilityMap = true && that.isSetLanguageToProbabilityMap();
    if (this_present_languageToProbabilityMap || that_present_languageToProbabilityMap) {
      if (!(this_present_languageToProbabilityMap && that_present_languageToProbabilityMap))
        return false;
      if (!this.languageToProbabilityMap.equals(that.languageToProbabilityMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetMetadata()) ? 131071 : 524287);
    if (isSetMetadata())
      hashCode = hashCode * 8191 + metadata.hashCode();

    hashCode = hashCode * 8191 + ((isSetLanguageToProbabilityMap()) ? 131071 : 524287);
    if (isSetLanguageToProbabilityMap())
      hashCode = hashCode * 8191 + languageToProbabilityMap.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LanguageIdentification other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLanguageToProbabilityMap()).compareTo(other.isSetLanguageToProbabilityMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguageToProbabilityMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.languageToProbabilityMap, other.languageToProbabilityMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LanguageIdentification(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata:");
    if (this.metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("languageToProbabilityMap:");
    if (this.languageToProbabilityMap == null) {
      sb.append("null");
    } else {
      sb.append(this.languageToProbabilityMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (metadata == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata' was not present! Struct: " + toString());
    }
    if (languageToProbabilityMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'languageToProbabilityMap' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uuid != null) {
      uuid.validate();
    }
    if (metadata != null) {
      metadata.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LanguageIdentificationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LanguageIdentificationStandardScheme getScheme() {
      return new LanguageIdentificationStandardScheme();
    }
  }

  private static class LanguageIdentificationStandardScheme extends org.apache.thrift.scheme.StandardScheme<LanguageIdentification> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LanguageIdentification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uuid = new edu.jhu.hlt.concrete.UUID();
              struct.uuid.read(iprot);
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata();
              struct.metadata.read(iprot);
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LANGUAGE_TO_PROBABILITY_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.languageToProbabilityMap = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map0.size);
                java.lang.String _key1;
                double _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readDouble();
                  struct.languageToProbabilityMap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setLanguageToProbabilityMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LanguageIdentification struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        struct.uuid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.metadata != null) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        struct.metadata.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.languageToProbabilityMap != null) {
        oprot.writeFieldBegin(LANGUAGE_TO_PROBABILITY_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.languageToProbabilityMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter4 : struct.languageToProbabilityMap.entrySet())
          {
            oprot.writeString(_iter4.getKey());
            oprot.writeDouble(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LanguageIdentificationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LanguageIdentificationTupleScheme getScheme() {
      return new LanguageIdentificationTupleScheme();
    }
  }

  private static class LanguageIdentificationTupleScheme extends org.apache.thrift.scheme.TupleScheme<LanguageIdentification> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LanguageIdentification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.uuid.write(oprot);
      struct.metadata.write(oprot);
      {
        oprot.writeI32(struct.languageToProbabilityMap.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter5 : struct.languageToProbabilityMap.entrySet())
        {
          oprot.writeString(_iter5.getKey());
          oprot.writeDouble(_iter5.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LanguageIdentification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.uuid = new edu.jhu.hlt.concrete.UUID();
      struct.uuid.read(iprot);
      struct.setUuidIsSet(true);
      struct.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata();
      struct.metadata.read(iprot);
      struct.setMetadataIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
        struct.languageToProbabilityMap = new java.util.HashMap<java.lang.String,java.lang.Double>(2*_map6.size);
        java.lang.String _key7;
        double _val8;
        for (int _i9 = 0; _i9 < _map6.size; ++_i9)
        {
          _key7 = iprot.readString();
          _val8 = iprot.readDouble();
          struct.languageToProbabilityMap.put(_key7, _val8);
        }
      }
      struct.setLanguageToProbabilityMapIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

