/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A span of text within a single communication, identified by a pair
 * of zero-indexed character offsets into a Thrift string. Thrift strings
 * are encoded using UTF-8:
 *   https://thrift.apache.org/docs/types
 * The offsets are character-based, not byte-based - a character with a
 * three-byte UTF-8 representation only counts as one character.
 * 
 * NOTE: This span represents a best guess, or 'provenance':
 * it cannot be guaranteed that this text span matches the _exact_
 * text of the original document, but is the annotation's best
 * effort at such a representation.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class TextSpan implements org.apache.thrift.TBase<TextSpan, TextSpan._Fields>, java.io.Serializable, Cloneable, Comparable<TextSpan> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TextSpan");

  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("ending", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TextSpanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TextSpanTupleSchemeFactory();

  private int start; // required
  private int ending; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Start character, inclusive.
     */
    START((short)1, "start"),
    /**
     * End character, exclusive
     */
    ENDING((short)2, "ending");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START
          return START;
        case 2: // ENDING
          return ENDING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __START_ISSET_ID = 0;
  private static final int __ENDING_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENDING, new org.apache.thrift.meta_data.FieldMetaData("ending", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TextSpan.class, metaDataMap);
  }

  public TextSpan() {
  }

  public TextSpan(
    int start,
    int ending)
  {
    this();
    this.start = start;
    setStartIsSet(true);
    this.ending = ending;
    setEndingIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TextSpan(TextSpan other) {
    __isset_bitfield = other.__isset_bitfield;
    this.start = other.start;
    this.ending = other.ending;
  }

  public TextSpan deepCopy() {
    return new TextSpan(this);
  }

  @Override
  public void clear() {
    setStartIsSet(false);
    this.start = 0;
    setEndingIsSet(false);
    this.ending = 0;
  }

  /**
   * Start character, inclusive.
   */
  public int getStart() {
    return this.start;
  }

  /**
   * Start character, inclusive.
   */
  public TextSpan setStart(int start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  /**
   * End character, exclusive
   */
  public int getEnding() {
    return this.ending;
  }

  /**
   * End character, exclusive
   */
  public TextSpan setEnding(int ending) {
    this.ending = ending;
    setEndingIsSet(true);
    return this;
  }

  public void unsetEnding() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDING_ISSET_ID);
  }

  /** Returns true if field ending is set (has been assigned a value) and false otherwise */
  public boolean isSetEnding() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDING_ISSET_ID);
  }

  public void setEndingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((java.lang.Integer)value);
      }
      break;

    case ENDING:
      if (value == null) {
        unsetEnding();
      } else {
        setEnding((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case START:
      return getStart();

    case ENDING:
      return getEnding();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case START:
      return isSetStart();
    case ENDING:
      return isSetEnding();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TextSpan)
      return this.equals((TextSpan)that);
    return false;
  }

  public boolean equals(TextSpan that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_ending = true;
    boolean that_present_ending = true;
    if (this_present_ending || that_present_ending) {
      if (!(this_present_ending && that_present_ending))
        return false;
      if (this.ending != that.ending)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + start;

    hashCode = hashCode * 8191 + ending;

    return hashCode;
  }

  @Override
  public int compareTo(TextSpan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnding()).compareTo(other.isSetEnding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ending, other.ending);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TextSpan(");
    boolean first = true;

    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ending:");
    sb.append(this.ending);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'start' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ending' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TextSpanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TextSpanStandardScheme getScheme() {
      return new TextSpanStandardScheme();
    }
  }

  private static class TextSpanStandardScheme extends org.apache.thrift.scheme.StandardScheme<TextSpan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TextSpan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start = iprot.readI32();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENDING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ending = iprot.readI32();
              struct.setEndingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStart()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'start' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEnding()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ending' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TextSpan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(struct.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENDING_FIELD_DESC);
      oprot.writeI32(struct.ending);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TextSpanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TextSpanTupleScheme getScheme() {
      return new TextSpanTupleScheme();
    }
  }

  private static class TextSpanTupleScheme extends org.apache.thrift.scheme.TupleScheme<TextSpan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TextSpan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.start);
      oprot.writeI32(struct.ending);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TextSpan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.start = iprot.readI32();
      struct.setStartIsSet(true);
      struct.ending = iprot.readI32();
      struct.setEndingIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

