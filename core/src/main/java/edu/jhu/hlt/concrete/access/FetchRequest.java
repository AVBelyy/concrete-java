/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete.access;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Struct representing a request for FetchCommunicationService.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class FetchRequest implements org.apache.thrift.TBase<FetchRequest, FetchRequest._Fields>, java.io.Serializable, Cloneable, Comparable<FetchRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FetchRequest");

  private static final org.apache.thrift.protocol.TField COMMUNICATION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("communicationIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField AUTHS_FIELD_DESC = new org.apache.thrift.protocol.TField("auths", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FetchRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FetchRequestTupleSchemeFactory();

  private java.util.List<java.lang.String> communicationIds; // required
  private java.lang.String auths; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * a list of Communication IDs
     */
    COMMUNICATION_IDS((short)1, "communicationIds"),
    /**
     * optional authorization mechanism
     */
    AUTHS((short)2, "auths");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMUNICATION_IDS
          return COMMUNICATION_IDS;
        case 2: // AUTHS
          return AUTHS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.AUTHS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMUNICATION_IDS, new org.apache.thrift.meta_data.FieldMetaData("communicationIds", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AUTHS, new org.apache.thrift.meta_data.FieldMetaData("auths", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FetchRequest.class, metaDataMap);
  }

  public FetchRequest() {
  }

  public FetchRequest(
    java.util.List<java.lang.String> communicationIds)
  {
    this();
    this.communicationIds = communicationIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FetchRequest(FetchRequest other) {
    if (other.isSetCommunicationIds()) {
      java.util.List<java.lang.String> __this__communicationIds = new java.util.ArrayList<java.lang.String>(other.communicationIds);
      this.communicationIds = __this__communicationIds;
    }
    if (other.isSetAuths()) {
      this.auths = other.auths;
    }
  }

  public FetchRequest deepCopy() {
    return new FetchRequest(this);
  }

  @Override
  public void clear() {
    this.communicationIds = null;
    this.auths = null;
  }

  public int getCommunicationIdsSize() {
    return (this.communicationIds == null) ? 0 : this.communicationIds.size();
  }

  public java.util.Iterator<java.lang.String> getCommunicationIdsIterator() {
    return (this.communicationIds == null) ? null : this.communicationIds.iterator();
  }

  public void addToCommunicationIds(java.lang.String elem) {
    if (this.communicationIds == null) {
      this.communicationIds = new java.util.ArrayList<java.lang.String>();
    }
    this.communicationIds.add(elem);
  }

  /**
   * a list of Communication IDs
   */
  public java.util.List<java.lang.String> getCommunicationIds() {
    return this.communicationIds;
  }

  /**
   * a list of Communication IDs
   */
  public FetchRequest setCommunicationIds(java.util.List<java.lang.String> communicationIds) {
    this.communicationIds = communicationIds;
    return this;
  }

  public void unsetCommunicationIds() {
    this.communicationIds = null;
  }

  /** Returns true if field communicationIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCommunicationIds() {
    return this.communicationIds != null;
  }

  public void setCommunicationIdsIsSet(boolean value) {
    if (!value) {
      this.communicationIds = null;
    }
  }

  /**
   * optional authorization mechanism
   */
  public java.lang.String getAuths() {
    return this.auths;
  }

  /**
   * optional authorization mechanism
   */
  public FetchRequest setAuths(java.lang.String auths) {
    this.auths = auths;
    return this;
  }

  public void unsetAuths() {
    this.auths = null;
  }

  /** Returns true if field auths is set (has been assigned a value) and false otherwise */
  public boolean isSetAuths() {
    return this.auths != null;
  }

  public void setAuthsIsSet(boolean value) {
    if (!value) {
      this.auths = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COMMUNICATION_IDS:
      if (value == null) {
        unsetCommunicationIds();
      } else {
        setCommunicationIds((java.util.List<java.lang.String>)value);
      }
      break;

    case AUTHS:
      if (value == null) {
        unsetAuths();
      } else {
        setAuths((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMUNICATION_IDS:
      return getCommunicationIds();

    case AUTHS:
      return getAuths();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMMUNICATION_IDS:
      return isSetCommunicationIds();
    case AUTHS:
      return isSetAuths();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FetchRequest)
      return this.equals((FetchRequest)that);
    return false;
  }

  public boolean equals(FetchRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_communicationIds = true && this.isSetCommunicationIds();
    boolean that_present_communicationIds = true && that.isSetCommunicationIds();
    if (this_present_communicationIds || that_present_communicationIds) {
      if (!(this_present_communicationIds && that_present_communicationIds))
        return false;
      if (!this.communicationIds.equals(that.communicationIds))
        return false;
    }

    boolean this_present_auths = true && this.isSetAuths();
    boolean that_present_auths = true && that.isSetAuths();
    if (this_present_auths || that_present_auths) {
      if (!(this_present_auths && that_present_auths))
        return false;
      if (!this.auths.equals(that.auths))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommunicationIds()) ? 131071 : 524287);
    if (isSetCommunicationIds())
      hashCode = hashCode * 8191 + communicationIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuths()) ? 131071 : 524287);
    if (isSetAuths())
      hashCode = hashCode * 8191 + auths.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FetchRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCommunicationIds()).compareTo(other.isSetCommunicationIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommunicationIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communicationIds, other.communicationIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuths()).compareTo(other.isSetAuths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auths, other.auths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FetchRequest(");
    boolean first = true;

    sb.append("communicationIds:");
    if (this.communicationIds == null) {
      sb.append("null");
    } else {
      sb.append(this.communicationIds);
    }
    first = false;
    if (isSetAuths()) {
      if (!first) sb.append(", ");
      sb.append("auths:");
      if (this.auths == null) {
        sb.append("null");
      } else {
        sb.append(this.auths);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (communicationIds == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'communicationIds' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FetchRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FetchRequestStandardScheme getScheme() {
      return new FetchRequestStandardScheme();
    }
  }

  private static class FetchRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<FetchRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FetchRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMUNICATION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.communicationIds = new java.util.ArrayList<java.lang.String>(_list8.size);
                java.lang.String _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readString();
                  struct.communicationIds.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setCommunicationIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTHS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.auths = iprot.readString();
              struct.setAuthsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FetchRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.communicationIds != null) {
        oprot.writeFieldBegin(COMMUNICATION_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.communicationIds.size()));
          for (java.lang.String _iter11 : struct.communicationIds)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.auths != null) {
        if (struct.isSetAuths()) {
          oprot.writeFieldBegin(AUTHS_FIELD_DESC);
          oprot.writeString(struct.auths);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FetchRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FetchRequestTupleScheme getScheme() {
      return new FetchRequestTupleScheme();
    }
  }

  private static class FetchRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<FetchRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FetchRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.communicationIds.size());
        for (java.lang.String _iter12 : struct.communicationIds)
        {
          oprot.writeString(_iter12);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAuths()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetAuths()) {
        oprot.writeString(struct.auths);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FetchRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.communicationIds = new java.util.ArrayList<java.lang.String>(_list13.size);
        java.lang.String _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = iprot.readString();
          struct.communicationIds.add(_elem14);
        }
      }
      struct.setCommunicationIdsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.auths = iprot.readString();
        struct.setAuthsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

