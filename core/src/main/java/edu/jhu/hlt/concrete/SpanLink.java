/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A collection of tokens that represent a link to another resource.
 * This resource might be another Concrete object (e.g., another
 * Concrete Communication), represented with the 'concreteTarget'
 * field, or it could link to a resource outside of Concrete via the
 * 'externalTarget' field.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class SpanLink implements org.apache.thrift.TBase<SpanLink, SpanLink._Fields>, java.io.Serializable, Cloneable, Comparable<SpanLink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpanLink");

  private static final org.apache.thrift.protocol.TField TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokens", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONCRETE_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("concreteTarget", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EXTERNAL_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("externalTarget", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("linkType", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpanLinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpanLinkTupleSchemeFactory();

  private TokenRefSequence tokens; // required
  private edu.jhu.hlt.concrete.UUID concreteTarget; // optional
  private java.lang.String externalTarget; // optional
  private java.lang.String linkType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The tokens that make up this SpanLink object.
     */
    TOKENS((short)1, "tokens"),
    CONCRETE_TARGET((short)2, "concreteTarget"),
    EXTERNAL_TARGET((short)3, "externalTarget"),
    LINK_TYPE((short)4, "linkType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKENS
          return TOKENS;
        case 2: // CONCRETE_TARGET
          return CONCRETE_TARGET;
        case 3: // EXTERNAL_TARGET
          return EXTERNAL_TARGET;
        case 4: // LINK_TYPE
          return LINK_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CONCRETE_TARGET,_Fields.EXTERNAL_TARGET};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKENS, new org.apache.thrift.meta_data.FieldMetaData("tokens", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenRefSequence.class)));
    tmpMap.put(_Fields.CONCRETE_TARGET, new org.apache.thrift.meta_data.FieldMetaData("concreteTarget", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.EXTERNAL_TARGET, new org.apache.thrift.meta_data.FieldMetaData("externalTarget", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("linkType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpanLink.class, metaDataMap);
  }

  public SpanLink() {
  }

  public SpanLink(
    TokenRefSequence tokens,
    java.lang.String linkType)
  {
    this();
    this.tokens = tokens;
    this.linkType = linkType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpanLink(SpanLink other) {
    if (other.isSetTokens()) {
      this.tokens = new TokenRefSequence(other.tokens);
    }
    if (other.isSetConcreteTarget()) {
      this.concreteTarget = new edu.jhu.hlt.concrete.UUID(other.concreteTarget);
    }
    if (other.isSetExternalTarget()) {
      this.externalTarget = other.externalTarget;
    }
    if (other.isSetLinkType()) {
      this.linkType = other.linkType;
    }
  }

  public SpanLink deepCopy() {
    return new SpanLink(this);
  }

  @Override
  public void clear() {
    this.tokens = null;
    this.concreteTarget = null;
    this.externalTarget = null;
    this.linkType = null;
  }

  /**
   * The tokens that make up this SpanLink object.
   */
  public TokenRefSequence getTokens() {
    return this.tokens;
  }

  /**
   * The tokens that make up this SpanLink object.
   */
  public SpanLink setTokens(TokenRefSequence tokens) {
    this.tokens = tokens;
    return this;
  }

  public void unsetTokens() {
    this.tokens = null;
  }

  /** Returns true if field tokens is set (has been assigned a value) and false otherwise */
  public boolean isSetTokens() {
    return this.tokens != null;
  }

  public void setTokensIsSet(boolean value) {
    if (!value) {
      this.tokens = null;
    }
  }

  public edu.jhu.hlt.concrete.UUID getConcreteTarget() {
    return this.concreteTarget;
  }

  public SpanLink setConcreteTarget(edu.jhu.hlt.concrete.UUID concreteTarget) {
    this.concreteTarget = concreteTarget;
    return this;
  }

  public void unsetConcreteTarget() {
    this.concreteTarget = null;
  }

  /** Returns true if field concreteTarget is set (has been assigned a value) and false otherwise */
  public boolean isSetConcreteTarget() {
    return this.concreteTarget != null;
  }

  public void setConcreteTargetIsSet(boolean value) {
    if (!value) {
      this.concreteTarget = null;
    }
  }

  public java.lang.String getExternalTarget() {
    return this.externalTarget;
  }

  public SpanLink setExternalTarget(java.lang.String externalTarget) {
    this.externalTarget = externalTarget;
    return this;
  }

  public void unsetExternalTarget() {
    this.externalTarget = null;
  }

  /** Returns true if field externalTarget is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalTarget() {
    return this.externalTarget != null;
  }

  public void setExternalTargetIsSet(boolean value) {
    if (!value) {
      this.externalTarget = null;
    }
  }

  public java.lang.String getLinkType() {
    return this.linkType;
  }

  public SpanLink setLinkType(java.lang.String linkType) {
    this.linkType = linkType;
    return this;
  }

  public void unsetLinkType() {
    this.linkType = null;
  }

  /** Returns true if field linkType is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkType() {
    return this.linkType != null;
  }

  public void setLinkTypeIsSet(boolean value) {
    if (!value) {
      this.linkType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TOKENS:
      if (value == null) {
        unsetTokens();
      } else {
        setTokens((TokenRefSequence)value);
      }
      break;

    case CONCRETE_TARGET:
      if (value == null) {
        unsetConcreteTarget();
      } else {
        setConcreteTarget((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case EXTERNAL_TARGET:
      if (value == null) {
        unsetExternalTarget();
      } else {
        setExternalTarget((java.lang.String)value);
      }
      break;

    case LINK_TYPE:
      if (value == null) {
        unsetLinkType();
      } else {
        setLinkType((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKENS:
      return getTokens();

    case CONCRETE_TARGET:
      return getConcreteTarget();

    case EXTERNAL_TARGET:
      return getExternalTarget();

    case LINK_TYPE:
      return getLinkType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TOKENS:
      return isSetTokens();
    case CONCRETE_TARGET:
      return isSetConcreteTarget();
    case EXTERNAL_TARGET:
      return isSetExternalTarget();
    case LINK_TYPE:
      return isSetLinkType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SpanLink)
      return this.equals((SpanLink)that);
    return false;
  }

  public boolean equals(SpanLink that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tokens = true && this.isSetTokens();
    boolean that_present_tokens = true && that.isSetTokens();
    if (this_present_tokens || that_present_tokens) {
      if (!(this_present_tokens && that_present_tokens))
        return false;
      if (!this.tokens.equals(that.tokens))
        return false;
    }

    boolean this_present_concreteTarget = true && this.isSetConcreteTarget();
    boolean that_present_concreteTarget = true && that.isSetConcreteTarget();
    if (this_present_concreteTarget || that_present_concreteTarget) {
      if (!(this_present_concreteTarget && that_present_concreteTarget))
        return false;
      if (!this.concreteTarget.equals(that.concreteTarget))
        return false;
    }

    boolean this_present_externalTarget = true && this.isSetExternalTarget();
    boolean that_present_externalTarget = true && that.isSetExternalTarget();
    if (this_present_externalTarget || that_present_externalTarget) {
      if (!(this_present_externalTarget && that_present_externalTarget))
        return false;
      if (!this.externalTarget.equals(that.externalTarget))
        return false;
    }

    boolean this_present_linkType = true && this.isSetLinkType();
    boolean that_present_linkType = true && that.isSetLinkType();
    if (this_present_linkType || that_present_linkType) {
      if (!(this_present_linkType && that_present_linkType))
        return false;
      if (!this.linkType.equals(that.linkType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTokens()) ? 131071 : 524287);
    if (isSetTokens())
      hashCode = hashCode * 8191 + tokens.hashCode();

    hashCode = hashCode * 8191 + ((isSetConcreteTarget()) ? 131071 : 524287);
    if (isSetConcreteTarget())
      hashCode = hashCode * 8191 + concreteTarget.hashCode();

    hashCode = hashCode * 8191 + ((isSetExternalTarget()) ? 131071 : 524287);
    if (isSetExternalTarget())
      hashCode = hashCode * 8191 + externalTarget.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkType()) ? 131071 : 524287);
    if (isSetLinkType())
      hashCode = hashCode * 8191 + linkType.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SpanLink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTokens()).compareTo(other.isSetTokens());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokens()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokens, other.tokens);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConcreteTarget()).compareTo(other.isSetConcreteTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConcreteTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.concreteTarget, other.concreteTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExternalTarget()).compareTo(other.isSetExternalTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalTarget, other.externalTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkType()).compareTo(other.isSetLinkType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkType, other.linkType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SpanLink(");
    boolean first = true;

    sb.append("tokens:");
    if (this.tokens == null) {
      sb.append("null");
    } else {
      sb.append(this.tokens);
    }
    first = false;
    if (isSetConcreteTarget()) {
      if (!first) sb.append(", ");
      sb.append("concreteTarget:");
      if (this.concreteTarget == null) {
        sb.append("null");
      } else {
        sb.append(this.concreteTarget);
      }
      first = false;
    }
    if (isSetExternalTarget()) {
      if (!first) sb.append(", ");
      sb.append("externalTarget:");
      if (this.externalTarget == null) {
        sb.append("null");
      } else {
        sb.append(this.externalTarget);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("linkType:");
    if (this.linkType == null) {
      sb.append("null");
    } else {
      sb.append(this.linkType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tokens == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokens' was not present! Struct: " + toString());
    }
    if (linkType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tokens != null) {
      tokens.validate();
    }
    if (concreteTarget != null) {
      concreteTarget.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpanLinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpanLinkStandardScheme getScheme() {
      return new SpanLinkStandardScheme();
    }
  }

  private static class SpanLinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<SpanLink> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpanLink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKENS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokens = new TokenRefSequence();
              struct.tokens.read(iprot);
              struct.setTokensIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONCRETE_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.concreteTarget = new edu.jhu.hlt.concrete.UUID();
              struct.concreteTarget.read(iprot);
              struct.setConcreteTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTERNAL_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.externalTarget = iprot.readString();
              struct.setExternalTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LINK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkType = iprot.readString();
              struct.setLinkTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpanLink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tokens != null) {
        oprot.writeFieldBegin(TOKENS_FIELD_DESC);
        struct.tokens.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.concreteTarget != null) {
        if (struct.isSetConcreteTarget()) {
          oprot.writeFieldBegin(CONCRETE_TARGET_FIELD_DESC);
          struct.concreteTarget.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.externalTarget != null) {
        if (struct.isSetExternalTarget()) {
          oprot.writeFieldBegin(EXTERNAL_TARGET_FIELD_DESC);
          oprot.writeString(struct.externalTarget);
          oprot.writeFieldEnd();
        }
      }
      if (struct.linkType != null) {
        oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
        oprot.writeString(struct.linkType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpanLinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpanLinkTupleScheme getScheme() {
      return new SpanLinkTupleScheme();
    }
  }

  private static class SpanLinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<SpanLink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpanLink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tokens.write(oprot);
      oprot.writeString(struct.linkType);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConcreteTarget()) {
        optionals.set(0);
      }
      if (struct.isSetExternalTarget()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetConcreteTarget()) {
        struct.concreteTarget.write(oprot);
      }
      if (struct.isSetExternalTarget()) {
        oprot.writeString(struct.externalTarget);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpanLink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tokens = new TokenRefSequence();
      struct.tokens.read(iprot);
      struct.setTokensIsSet(true);
      struct.linkType = iprot.readString();
      struct.setLinkTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.concreteTarget = new edu.jhu.hlt.concrete.UUID();
        struct.concreteTarget.read(iprot);
        struct.setConcreteTargetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.externalTarget = iprot.readString();
        struct.setExternalTargetIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

