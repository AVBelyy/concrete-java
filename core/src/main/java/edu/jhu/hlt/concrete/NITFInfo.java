/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-04")
public class NITFInfo implements org.apache.thrift.TBase<NITFInfo, NITFInfo._Fields>, java.io.Serializable, Cloneable, Comparable<NITFInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NITFInfo");

  private static final org.apache.thrift.protocol.TField ALTERNATE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("alternateURL", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ARTICLE_ABSTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("articleAbstract", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTHOR_BIOGRAPHY_FIELD_DESC = new org.apache.thrift.protocol.TField("authorBiography", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("banner", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BIOGRAPHICAL_CATEGORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("biographicalCategoryList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("columnName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COLUMN_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("columnNumber", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CORRECTION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("correctionDate", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField CORRECTION_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("correctionText", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("credit", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DAY_OF_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("dayOfWeek", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DESCRIPTOR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("descriptorList", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField FEATURE_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("featurePage", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField GENERAL_ONLINE_DESCRIPTOR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("generalOnlineDescriptorList", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("guid", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField KICKER_FIELD_DESC = new org.apache.thrift.protocol.TField("kicker", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField LEAD_PARAGRAPH_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("leadParagraphList", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField LOCATION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("locationList", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField NAME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("nameList", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField NEWS_DESK_FIELD_DESC = new org.apache.thrift.protocol.TField("newsDesk", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField NORMALIZED_BYLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("normalizedByline", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField ONLINE_DESCRIPTOR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineDescriptorList", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField ONLINE_HEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineHeadline", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField ONLINE_LEAD_PARAGRAPH_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineLeadParagraph", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField ONLINE_LOCATION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineLocationList", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField ONLINE_ORGANIZATION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineOrganizationList", org.apache.thrift.protocol.TType.LIST, (short)26);
  private static final org.apache.thrift.protocol.TField ONLINE_PEOPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("onlinePeople", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField ONLINE_SECTION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineSectionList", org.apache.thrift.protocol.TType.LIST, (short)28);
  private static final org.apache.thrift.protocol.TField ONLINE_TITLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineTitleList", org.apache.thrift.protocol.TType.LIST, (short)29);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("organizationList", org.apache.thrift.protocol.TType.LIST, (short)30);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField PEOPLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("peopleList", org.apache.thrift.protocol.TType.LIST, (short)32);
  private static final org.apache.thrift.protocol.TField PUBLICATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publicationDate", org.apache.thrift.protocol.TType.I64, (short)33);
  private static final org.apache.thrift.protocol.TField PUBLICATION_DAY_OF_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("publicationDayOfMonth", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField PUBLICATION_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("publicationMonth", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField PUBLICATION_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("publicationYear", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField SECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("section", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField SERIES_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("seriesName", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField SLUG_FIELD_DESC = new org.apache.thrift.protocol.TField("slug", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField TAXONOMIC_CLASSIFIER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("taxonomicClassifierList", org.apache.thrift.protocol.TType.LIST, (short)40);
  private static final org.apache.thrift.protocol.TField TITLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("titleList", org.apache.thrift.protocol.TType.LIST, (short)41);
  private static final org.apache.thrift.protocol.TField TYPES_OF_MATERIAL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("typesOfMaterialList", org.apache.thrift.protocol.TType.LIST, (short)42);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField WORD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("wordCount", org.apache.thrift.protocol.TType.I32, (short)44);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NITFInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NITFInfoTupleSchemeFactory());
  }

  private String alternateURL; // optional
  private String articleAbstract; // optional
  private String authorBiography; // optional
  private String banner; // optional
  private List<String> biographicalCategoryList; // optional
  private String columnName; // optional
  private int columnNumber; // optional
  private long correctionDate; // optional
  private String correctionText; // optional
  private String credit; // optional
  private String dayOfWeek; // optional
  private List<String> descriptorList; // optional
  private String featurePage; // optional
  private List<String> generalOnlineDescriptorList; // optional
  private int guid; // optional
  private String kicker; // optional
  private List<String> leadParagraphList; // optional
  private List<String> locationList; // optional
  private List<String> nameList; // optional
  private String newsDesk; // optional
  private String normalizedByline; // optional
  private List<String> onlineDescriptorList; // optional
  private String onlineHeadline; // optional
  private String onlineLeadParagraph; // optional
  private List<String> onlineLocationList; // optional
  private List<String> onlineOrganizationList; // optional
  private List<String> onlinePeople; // optional
  private List<String> onlineSectionList; // optional
  private List<String> onlineTitleList; // optional
  private List<String> organizationList; // optional
  private int page; // optional
  private List<String> peopleList; // optional
  private long publicationDate; // optional
  private int publicationDayOfMonth; // optional
  private int publicationMonth; // optional
  private int publicationYear; // optional
  private String section; // optional
  private String seriesName; // optional
  private String slug; // optional
  private List<String> taxonomicClassifierList; // optional
  private List<String> titleList; // optional
  private List<String> typesOfMaterialList; // optional
  private String url; // optional
  private int wordCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * This field specifies the URL of the article, if published online. In some
     * cases, such as with the New York Times, when this field is present,
     * the URL is preferred to the URL field on articles published on
     * or after April 02, 2006, as the linked page will have richer content.
     */
    ALTERNATE_URL((short)1, "alternateURL"),
    /**
     * This field is a summary of the article, possibly written by
     * an indexing service.
     */
    ARTICLE_ABSTRACT((short)2, "articleAbstract"),
    /**
     * This field specifies the biography of the author of the article.
     * Generally, this field is specified for guest authors, and not for
     * regular reporters, except to provide the author's email address.
     */
    AUTHOR_BIOGRAPHY((short)3, "authorBiography"),
    /**
     * The banner field is used to indicate if there has been additional
     * information appended to the articles since its publication. Examples of
     * banners include ('Correction Appended' and 'Editor's Note Appended').
     */
    BANNER((short)4, "banner"),
    /**
     * When present, the biographical category field generally indicates that a
     * document focuses on a particular individual. The value of the field
     * indicates the area or category in which this individual is best known.
     * This field is most often defined for Obituaries and Book Reviews.
     * 
     * <ol>
     * <li>Politics and Government (U.S.)</li>
     * <li>Books and Magazines <li>Royalty</li>
     * </ol>
     */
    BIOGRAPHICAL_CATEGORY_LIST((short)5, "biographicalCategoryList"),
    /**
     * If the article is part of a regular column, this field specifies the name
     * of that column.
     * <br>
     * Sample Column Names:
     * <br>
     * <ol>
     * <li>World News Briefs</li>
     * <li>WEDDINGS</li>
     * <li>The Accessories Channel</li>
     * </ol>
     * 
     */
    COLUMN_NAME((short)6, "columnName"),
    /**
     * This field specifies the column in which the article starts in the print
     * paper. A typical printed page in the paper has six columns numbered from
     * right to left. As a consequence most, but not all, of the values for this
     * field fall in the range 1-6.
     */
    COLUMN_NUMBER((short)7, "columnNumber"),
    /**
     * This field specifies the date on which a correction was made to the
     * article. Generally, if the correction date is specified, the correction
     * text will also be specified (and vice versa).
     */
    CORRECTION_DATE((short)8, "correctionDate"),
    /**
     * For articles corrected following publication, this field specifies the
     * correction. Generally, if the correction text is specified, the
     * correction date will also be specified (and vice versa).
     */
    CORRECTION_TEXT((short)9, "correctionText"),
    /**
     * This field indicates the entity that produced the editorial content of
     * this document.
     */
    CREDIT((short)10, "credit"),
    /**
     * This field specifies the day of week on which the article was published.
     * <ul>
     * <li>Monday</li>
     * <li>Tuesday</li>
     * <li>Wednesday</li>
     * <li>Thursday</li>
     * <li>Friday</li>
     * <li>Saturday</li>
     * <li>Sunday</li>
     * </ul>
     */
    DAY_OF_WEEK((short)11, "dayOfWeek"),
    /**
     * The &quot;descriptors&quot; field specifies a list of descriptive terms drawn from
     * a normalized controlled vocabulary corresponding to subjects mentioned in
     * the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>ECONOMIC CONDITIONS AND TRENDS</li>
     * <li>AIRPLANES</li>
     * <li>VIOLINS</li>
     * </ol>
     */
    DESCRIPTOR_LIST((short)12, "descriptorList"),
    /**
     * The feature page containing this article, such as
     * <ul>
     * <li>Education Page</li>
     * <li>Fashion Page</li>
     * </ul>
     */
    FEATURE_PAGE((short)13, "featurePage"),
    /**
     * The &quot;general online descriptors&quot; field specifies a list of descriptors
     * that are at a higher level of generality than the other tags associated
     * with the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>Surfing</li>
     * <li>Venice Biennale</li>
     * <li>Ranches</li>
     * </ol>
     */
    GENERAL_ONLINE_DESCRIPTOR_LIST((short)14, "generalOnlineDescriptorList"),
    /**
     * The GUID field specifies an integer that is guaranteed to be unique for
     * every document in the corpus.
     */
    GUID((short)15, "guid"),
    /**
     * The kicker is an additional piece of information printed as an
     * accompaniment to a news headline.
     */
    KICKER((short)16, "kicker"),
    /**
     * The &quot;lead Paragraph&quot; field is the lead paragraph of the article.
     * Generally this field is populated with the first two paragraphs from the
     * article.
     */
    LEAD_PARAGRAPH_LIST((short)17, "leadParagraphList"),
    /**
     * The &quot;locations&quot; field specifies a list of geographic descriptors drawn
     * from a normalized controlled vocabulary that correspond to places
     * mentioned in the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>Wellsboro (Pa)</li>
     * <li>Kansas City (Kan)</li>
     * <li>Park Slope (NYC)</li>
     * </ol>
     */
    LOCATION_LIST((short)18, "locationList"),
    /**
     * The &quot;names&quot; field specifies a list of names mentioned in the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>Azza Fahmy</li>
     * <li>George C. Izenour</li>
     * <li>Chris Schenkel</li>
     * </ol>
     */
    NAME_LIST((short)19, "nameList"),
    /**
     * This field specifies the desk in the newsroom that
     * produced the article. The desk is related to, but is not the same as the
     * section in which the article appears.
     */
    NEWS_DESK((short)20, "newsDesk"),
    /**
     * The Normalized Byline field is the byline normalized to the form (last
     * name, first name).
     */
    NORMALIZED_BYLINE((short)21, "normalizedByline"),
    /**
     * This field specifies a list of descriptors from a normalized controlled
     * vocabulary that correspond to topics mentioned in the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>Marriages</li>
     * <li>Parks and Other Recreation Areas</li>
     * <li>Cooking and Cookbooks</li>
     * </ol>
     */
    ONLINE_DESCRIPTOR_LIST((short)22, "onlineDescriptorList"),
    /**
     * This field specifies the headline displayed with the article
     * online. Often this differs from the headline used in print.
     */
    ONLINE_HEADLINE((short)23, "onlineHeadline"),
    /**
     * This field specifies the lead paragraph for the online version.
     */
    ONLINE_LEAD_PARAGRAPH((short)24, "onlineLeadParagraph"),
    /**
     * This field specifies a list of place names that correspond to geographic
     * locations mentioned in the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>Hollywood</li>
     * <li>Los Angeles</li>
     * <li>Arcadia</li>
     * </ol>
     */
    ONLINE_LOCATION_LIST((short)25, "onlineLocationList"),
    /**
     * This field specifies a list of organizations that correspond to
     * organizations mentioned in the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>Nintendo Company Limited</li>
     * <li>Yeshiva University</li>
     * <li>Rose Center</li>
     * </ol>
     */
    ONLINE_ORGANIZATION_LIST((short)26, "onlineOrganizationList"),
    /**
     * This field specifies a list of people that correspond to individuals
     * mentioned in the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>Lopez, Jennifer</li>
     * <li>Joyce, James</li>
     * <li>Robinson, Jackie</li>
     * </ol>
     */
    ONLINE_PEOPLE((short)27, "onlinePeople"),
    /**
     * This field specifies the section(s) in which the online version of the article
     * is placed. This may typically be populated from a semicolon (;) delineated list.
     */
    ONLINE_SECTION_LIST((short)28, "onlineSectionList"),
    /**
     * This field specifies a list of authored works mentioned in the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>Matchstick Men (Movie)</li>
     * <li>Blades of Glory (Movie)</li>
     * <li>Bridge and Tunnel (Play)</li>
     * </ol>
     */
    ONLINE_TITLE_LIST((short)29, "onlineTitleList"),
    /**
     * This field specifies a list of organization names drawn from a normalized
     * controlled vocabulary that correspond to organizations mentioned in the
     * article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>Circuit City Stores Inc</li>
     * <li>Delaware County Community College (Pa)</li>
     * <li>CONNECTICUT GRAND OPERA</li>
     * </ol>
     */
    ORGANIZATION_LIST((short)30, "organizationList"),
    /**
     * This field specifies the page of the section in the paper in which the
     * article appears. This is not an absolute pagination. An article that
     * appears on page 3 in section A occurs in the physical paper before an
     * article that occurs on page 1 of section F. The section is encoded in
     * the <strong>section</strong> field.
     */
    PAGE((short)31, "page"),
    /**
     * This field specifies a list of people from a normalized controlled
     * vocabulary that correspond to individuals mentioned in the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>REAGAN, RONALD WILSON (PRES)</li>
     * <li>BEGIN, MENACHEM (PRIME MIN)</li>
     * <li>COLLINS, GLENN</li>
     * </ol>
     */
    PEOPLE_LIST((short)32, "peopleList"),
    /**
     * This field specifies the date of the article's publication.
     */
    PUBLICATION_DATE((short)33, "publicationDate"),
    /**
     * This field specifies the day of the month on which the article was
     * published, always in the range 1-31.
     */
    PUBLICATION_DAY_OF_MONTH((short)34, "publicationDayOfMonth"),
    /**
     * This field specifies the month on which the article was published in the
     * range 1-12 where 1 is January 2 is February etc.
     */
    PUBLICATION_MONTH((short)35, "publicationMonth"),
    /**
     * This field specifies the year in which the article was published. This
     * value is in the range 1987-2007 for this collection.
     */
    PUBLICATION_YEAR((short)36, "publicationYear"),
    /**
     * This field specifies the section of the paper in which the article
     * appears. This is not the name of the section, but rather a letter or
     * number that indicates the section.
     */
    SECTION((short)37, "section"),
    /**
     * If the article is part of a regular series, this field specifies the name
     * of that column.
     */
    SERIES_NAME((short)38, "seriesName"),
    /**
     * The slug is a short string that uniquely identifies an article from all
     * other articles published on the same day. Please note, however, that
     * different articles on different days may have the same slug.
     * <ul>
     * <li>30other</li>
     * <li>12reunion</li>
     * </ul>
     */
    SLUG((short)39, "slug"),
    /**
     * This field specifies a list of taxonomic classifiers that place this
     * article into a hierarchy of articles. The individual terms of each
     * taxonomic classifier are separated with the '/' character.
     * <br>
     * Examples Include:
     * <ol>
     * <li>Top/Features/Travel/Guides/Destinations/North America/United
     * States/Arizona</li>
     * <li>Top/News/U.S./Rockies</li>
     * <li>Top/Opinion</li>
     * </ol>
     */
    TAXONOMIC_CLASSIFIER_LIST((short)40, "taxonomicClassifierList"),
    /**
     * This field specifies a list of authored works that correspond to works
     * mentioned in the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>Greystoke: The Legend of Tarzan, Lord of the Apes (Movie)</li>
     * <li>Law and Order (TV Program)</li>
     * <li>BATTLEFIELD EARTH (BOOK)</li>
     * </ol>
     */
    TITLE_LIST((short)41, "titleList"),
    /**
     * This field specifies a normalized list of terms describing the general
     * editorial category of the article.
     * <br>
     * Examples Include:
     * <ol>
     * <li>REVIEW</li>
     * <li>OBITUARY</li>
     * <li>ANALYSIS</li>
     * </ol>
     */
    TYPES_OF_MATERIAL_LIST((short)42, "typesOfMaterialList"),
    /**
     * This field specifies the location of the online version of the article. The
     * &quot;Alternative Url&quot; field is preferred to this field on articles published
     * on or after April 02, 2006, as the linked page will have richer content.
     */
    URL((short)43, "url"),
    /**
     * This field specifies the number of words in the body of the article,
     * including the lead paragraph.
     */
    WORD_COUNT((short)44, "wordCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALTERNATE_URL
          return ALTERNATE_URL;
        case 2: // ARTICLE_ABSTRACT
          return ARTICLE_ABSTRACT;
        case 3: // AUTHOR_BIOGRAPHY
          return AUTHOR_BIOGRAPHY;
        case 4: // BANNER
          return BANNER;
        case 5: // BIOGRAPHICAL_CATEGORY_LIST
          return BIOGRAPHICAL_CATEGORY_LIST;
        case 6: // COLUMN_NAME
          return COLUMN_NAME;
        case 7: // COLUMN_NUMBER
          return COLUMN_NUMBER;
        case 8: // CORRECTION_DATE
          return CORRECTION_DATE;
        case 9: // CORRECTION_TEXT
          return CORRECTION_TEXT;
        case 10: // CREDIT
          return CREDIT;
        case 11: // DAY_OF_WEEK
          return DAY_OF_WEEK;
        case 12: // DESCRIPTOR_LIST
          return DESCRIPTOR_LIST;
        case 13: // FEATURE_PAGE
          return FEATURE_PAGE;
        case 14: // GENERAL_ONLINE_DESCRIPTOR_LIST
          return GENERAL_ONLINE_DESCRIPTOR_LIST;
        case 15: // GUID
          return GUID;
        case 16: // KICKER
          return KICKER;
        case 17: // LEAD_PARAGRAPH_LIST
          return LEAD_PARAGRAPH_LIST;
        case 18: // LOCATION_LIST
          return LOCATION_LIST;
        case 19: // NAME_LIST
          return NAME_LIST;
        case 20: // NEWS_DESK
          return NEWS_DESK;
        case 21: // NORMALIZED_BYLINE
          return NORMALIZED_BYLINE;
        case 22: // ONLINE_DESCRIPTOR_LIST
          return ONLINE_DESCRIPTOR_LIST;
        case 23: // ONLINE_HEADLINE
          return ONLINE_HEADLINE;
        case 24: // ONLINE_LEAD_PARAGRAPH
          return ONLINE_LEAD_PARAGRAPH;
        case 25: // ONLINE_LOCATION_LIST
          return ONLINE_LOCATION_LIST;
        case 26: // ONLINE_ORGANIZATION_LIST
          return ONLINE_ORGANIZATION_LIST;
        case 27: // ONLINE_PEOPLE
          return ONLINE_PEOPLE;
        case 28: // ONLINE_SECTION_LIST
          return ONLINE_SECTION_LIST;
        case 29: // ONLINE_TITLE_LIST
          return ONLINE_TITLE_LIST;
        case 30: // ORGANIZATION_LIST
          return ORGANIZATION_LIST;
        case 31: // PAGE
          return PAGE;
        case 32: // PEOPLE_LIST
          return PEOPLE_LIST;
        case 33: // PUBLICATION_DATE
          return PUBLICATION_DATE;
        case 34: // PUBLICATION_DAY_OF_MONTH
          return PUBLICATION_DAY_OF_MONTH;
        case 35: // PUBLICATION_MONTH
          return PUBLICATION_MONTH;
        case 36: // PUBLICATION_YEAR
          return PUBLICATION_YEAR;
        case 37: // SECTION
          return SECTION;
        case 38: // SERIES_NAME
          return SERIES_NAME;
        case 39: // SLUG
          return SLUG;
        case 40: // TAXONOMIC_CLASSIFIER_LIST
          return TAXONOMIC_CLASSIFIER_LIST;
        case 41: // TITLE_LIST
          return TITLE_LIST;
        case 42: // TYPES_OF_MATERIAL_LIST
          return TYPES_OF_MATERIAL_LIST;
        case 43: // URL
          return URL;
        case 44: // WORD_COUNT
          return WORD_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLUMNNUMBER_ISSET_ID = 0;
  private static final int __CORRECTIONDATE_ISSET_ID = 1;
  private static final int __GUID_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __PUBLICATIONDATE_ISSET_ID = 4;
  private static final int __PUBLICATIONDAYOFMONTH_ISSET_ID = 5;
  private static final int __PUBLICATIONMONTH_ISSET_ID = 6;
  private static final int __PUBLICATIONYEAR_ISSET_ID = 7;
  private static final int __WORDCOUNT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ALTERNATE_URL,_Fields.ARTICLE_ABSTRACT,_Fields.AUTHOR_BIOGRAPHY,_Fields.BANNER,_Fields.BIOGRAPHICAL_CATEGORY_LIST,_Fields.COLUMN_NAME,_Fields.COLUMN_NUMBER,_Fields.CORRECTION_DATE,_Fields.CORRECTION_TEXT,_Fields.CREDIT,_Fields.DAY_OF_WEEK,_Fields.DESCRIPTOR_LIST,_Fields.FEATURE_PAGE,_Fields.GENERAL_ONLINE_DESCRIPTOR_LIST,_Fields.GUID,_Fields.KICKER,_Fields.LEAD_PARAGRAPH_LIST,_Fields.LOCATION_LIST,_Fields.NAME_LIST,_Fields.NEWS_DESK,_Fields.NORMALIZED_BYLINE,_Fields.ONLINE_DESCRIPTOR_LIST,_Fields.ONLINE_HEADLINE,_Fields.ONLINE_LEAD_PARAGRAPH,_Fields.ONLINE_LOCATION_LIST,_Fields.ONLINE_ORGANIZATION_LIST,_Fields.ONLINE_PEOPLE,_Fields.ONLINE_SECTION_LIST,_Fields.ONLINE_TITLE_LIST,_Fields.ORGANIZATION_LIST,_Fields.PAGE,_Fields.PEOPLE_LIST,_Fields.PUBLICATION_DATE,_Fields.PUBLICATION_DAY_OF_MONTH,_Fields.PUBLICATION_MONTH,_Fields.PUBLICATION_YEAR,_Fields.SECTION,_Fields.SERIES_NAME,_Fields.SLUG,_Fields.TAXONOMIC_CLASSIFIER_LIST,_Fields.TITLE_LIST,_Fields.TYPES_OF_MATERIAL_LIST,_Fields.URL,_Fields.WORD_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALTERNATE_URL, new org.apache.thrift.meta_data.FieldMetaData("alternateURL", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTICLE_ABSTRACT, new org.apache.thrift.meta_data.FieldMetaData("articleAbstract", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR_BIOGRAPHY, new org.apache.thrift.meta_data.FieldMetaData("authorBiography", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANNER, new org.apache.thrift.meta_data.FieldMetaData("banner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIOGRAPHICAL_CATEGORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("biographicalCategoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("columnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("columnNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CORRECTION_DATE, new org.apache.thrift.meta_data.FieldMetaData("correctionDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CORRECTION_TEXT, new org.apache.thrift.meta_data.FieldMetaData("correctionText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT, new org.apache.thrift.meta_data.FieldMetaData("credit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAY_OF_WEEK, new org.apache.thrift.meta_data.FieldMetaData("dayOfWeek", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTOR_LIST, new org.apache.thrift.meta_data.FieldMetaData("descriptorList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FEATURE_PAGE, new org.apache.thrift.meta_data.FieldMetaData("featurePage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENERAL_ONLINE_DESCRIPTOR_LIST, new org.apache.thrift.meta_data.FieldMetaData("generalOnlineDescriptorList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("guid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KICKER, new org.apache.thrift.meta_data.FieldMetaData("kicker", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEAD_PARAGRAPH_LIST, new org.apache.thrift.meta_data.FieldMetaData("leadParagraphList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LOCATION_LIST, new org.apache.thrift.meta_data.FieldMetaData("locationList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NAME_LIST, new org.apache.thrift.meta_data.FieldMetaData("nameList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NEWS_DESK, new org.apache.thrift.meta_data.FieldMetaData("newsDesk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NORMALIZED_BYLINE, new org.apache.thrift.meta_data.FieldMetaData("normalizedByline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ONLINE_DESCRIPTOR_LIST, new org.apache.thrift.meta_data.FieldMetaData("onlineDescriptorList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ONLINE_HEADLINE, new org.apache.thrift.meta_data.FieldMetaData("onlineHeadline", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ONLINE_LEAD_PARAGRAPH, new org.apache.thrift.meta_data.FieldMetaData("onlineLeadParagraph", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ONLINE_LOCATION_LIST, new org.apache.thrift.meta_data.FieldMetaData("onlineLocationList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ONLINE_ORGANIZATION_LIST, new org.apache.thrift.meta_data.FieldMetaData("onlineOrganizationList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ONLINE_PEOPLE, new org.apache.thrift.meta_data.FieldMetaData("onlinePeople", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ONLINE_SECTION_LIST, new org.apache.thrift.meta_data.FieldMetaData("onlineSectionList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ONLINE_TITLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("onlineTitleList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ORGANIZATION_LIST, new org.apache.thrift.meta_data.FieldMetaData("organizationList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PEOPLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("peopleList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PUBLICATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("publicationDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUBLICATION_DAY_OF_MONTH, new org.apache.thrift.meta_data.FieldMetaData("publicationDayOfMonth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLICATION_MONTH, new org.apache.thrift.meta_data.FieldMetaData("publicationMonth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PUBLICATION_YEAR, new org.apache.thrift.meta_data.FieldMetaData("publicationYear", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECTION, new org.apache.thrift.meta_data.FieldMetaData("section", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERIES_NAME, new org.apache.thrift.meta_data.FieldMetaData("seriesName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLUG, new org.apache.thrift.meta_data.FieldMetaData("slug", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAXONOMIC_CLASSIFIER_LIST, new org.apache.thrift.meta_data.FieldMetaData("taxonomicClassifierList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TITLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("titleList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TYPES_OF_MATERIAL_LIST, new org.apache.thrift.meta_data.FieldMetaData("typesOfMaterialList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("wordCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NITFInfo.class, metaDataMap);
  }

  public NITFInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NITFInfo(NITFInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAlternateURL()) {
      this.alternateURL = other.alternateURL;
    }
    if (other.isSetArticleAbstract()) {
      this.articleAbstract = other.articleAbstract;
    }
    if (other.isSetAuthorBiography()) {
      this.authorBiography = other.authorBiography;
    }
    if (other.isSetBanner()) {
      this.banner = other.banner;
    }
    if (other.isSetBiographicalCategoryList()) {
      List<String> __this__biographicalCategoryList = new ArrayList<String>(other.biographicalCategoryList);
      this.biographicalCategoryList = __this__biographicalCategoryList;
    }
    if (other.isSetColumnName()) {
      this.columnName = other.columnName;
    }
    this.columnNumber = other.columnNumber;
    this.correctionDate = other.correctionDate;
    if (other.isSetCorrectionText()) {
      this.correctionText = other.correctionText;
    }
    if (other.isSetCredit()) {
      this.credit = other.credit;
    }
    if (other.isSetDayOfWeek()) {
      this.dayOfWeek = other.dayOfWeek;
    }
    if (other.isSetDescriptorList()) {
      List<String> __this__descriptorList = new ArrayList<String>(other.descriptorList);
      this.descriptorList = __this__descriptorList;
    }
    if (other.isSetFeaturePage()) {
      this.featurePage = other.featurePage;
    }
    if (other.isSetGeneralOnlineDescriptorList()) {
      List<String> __this__generalOnlineDescriptorList = new ArrayList<String>(other.generalOnlineDescriptorList);
      this.generalOnlineDescriptorList = __this__generalOnlineDescriptorList;
    }
    this.guid = other.guid;
    if (other.isSetKicker()) {
      this.kicker = other.kicker;
    }
    if (other.isSetLeadParagraphList()) {
      List<String> __this__leadParagraphList = new ArrayList<String>(other.leadParagraphList);
      this.leadParagraphList = __this__leadParagraphList;
    }
    if (other.isSetLocationList()) {
      List<String> __this__locationList = new ArrayList<String>(other.locationList);
      this.locationList = __this__locationList;
    }
    if (other.isSetNameList()) {
      List<String> __this__nameList = new ArrayList<String>(other.nameList);
      this.nameList = __this__nameList;
    }
    if (other.isSetNewsDesk()) {
      this.newsDesk = other.newsDesk;
    }
    if (other.isSetNormalizedByline()) {
      this.normalizedByline = other.normalizedByline;
    }
    if (other.isSetOnlineDescriptorList()) {
      List<String> __this__onlineDescriptorList = new ArrayList<String>(other.onlineDescriptorList);
      this.onlineDescriptorList = __this__onlineDescriptorList;
    }
    if (other.isSetOnlineHeadline()) {
      this.onlineHeadline = other.onlineHeadline;
    }
    if (other.isSetOnlineLeadParagraph()) {
      this.onlineLeadParagraph = other.onlineLeadParagraph;
    }
    if (other.isSetOnlineLocationList()) {
      List<String> __this__onlineLocationList = new ArrayList<String>(other.onlineLocationList);
      this.onlineLocationList = __this__onlineLocationList;
    }
    if (other.isSetOnlineOrganizationList()) {
      List<String> __this__onlineOrganizationList = new ArrayList<String>(other.onlineOrganizationList);
      this.onlineOrganizationList = __this__onlineOrganizationList;
    }
    if (other.isSetOnlinePeople()) {
      List<String> __this__onlinePeople = new ArrayList<String>(other.onlinePeople);
      this.onlinePeople = __this__onlinePeople;
    }
    if (other.isSetOnlineSectionList()) {
      List<String> __this__onlineSectionList = new ArrayList<String>(other.onlineSectionList);
      this.onlineSectionList = __this__onlineSectionList;
    }
    if (other.isSetOnlineTitleList()) {
      List<String> __this__onlineTitleList = new ArrayList<String>(other.onlineTitleList);
      this.onlineTitleList = __this__onlineTitleList;
    }
    if (other.isSetOrganizationList()) {
      List<String> __this__organizationList = new ArrayList<String>(other.organizationList);
      this.organizationList = __this__organizationList;
    }
    this.page = other.page;
    if (other.isSetPeopleList()) {
      List<String> __this__peopleList = new ArrayList<String>(other.peopleList);
      this.peopleList = __this__peopleList;
    }
    this.publicationDate = other.publicationDate;
    this.publicationDayOfMonth = other.publicationDayOfMonth;
    this.publicationMonth = other.publicationMonth;
    this.publicationYear = other.publicationYear;
    if (other.isSetSection()) {
      this.section = other.section;
    }
    if (other.isSetSeriesName()) {
      this.seriesName = other.seriesName;
    }
    if (other.isSetSlug()) {
      this.slug = other.slug;
    }
    if (other.isSetTaxonomicClassifierList()) {
      List<String> __this__taxonomicClassifierList = new ArrayList<String>(other.taxonomicClassifierList);
      this.taxonomicClassifierList = __this__taxonomicClassifierList;
    }
    if (other.isSetTitleList()) {
      List<String> __this__titleList = new ArrayList<String>(other.titleList);
      this.titleList = __this__titleList;
    }
    if (other.isSetTypesOfMaterialList()) {
      List<String> __this__typesOfMaterialList = new ArrayList<String>(other.typesOfMaterialList);
      this.typesOfMaterialList = __this__typesOfMaterialList;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.wordCount = other.wordCount;
  }

  public NITFInfo deepCopy() {
    return new NITFInfo(this);
  }

  @Override
  public void clear() {
    this.alternateURL = null;
    this.articleAbstract = null;
    this.authorBiography = null;
    this.banner = null;
    this.biographicalCategoryList = null;
    this.columnName = null;
    setColumnNumberIsSet(false);
    this.columnNumber = 0;
    setCorrectionDateIsSet(false);
    this.correctionDate = 0;
    this.correctionText = null;
    this.credit = null;
    this.dayOfWeek = null;
    this.descriptorList = null;
    this.featurePage = null;
    this.generalOnlineDescriptorList = null;
    setGuidIsSet(false);
    this.guid = 0;
    this.kicker = null;
    this.leadParagraphList = null;
    this.locationList = null;
    this.nameList = null;
    this.newsDesk = null;
    this.normalizedByline = null;
    this.onlineDescriptorList = null;
    this.onlineHeadline = null;
    this.onlineLeadParagraph = null;
    this.onlineLocationList = null;
    this.onlineOrganizationList = null;
    this.onlinePeople = null;
    this.onlineSectionList = null;
    this.onlineTitleList = null;
    this.organizationList = null;
    setPageIsSet(false);
    this.page = 0;
    this.peopleList = null;
    setPublicationDateIsSet(false);
    this.publicationDate = 0;
    setPublicationDayOfMonthIsSet(false);
    this.publicationDayOfMonth = 0;
    setPublicationMonthIsSet(false);
    this.publicationMonth = 0;
    setPublicationYearIsSet(false);
    this.publicationYear = 0;
    this.section = null;
    this.seriesName = null;
    this.slug = null;
    this.taxonomicClassifierList = null;
    this.titleList = null;
    this.typesOfMaterialList = null;
    this.url = null;
    setWordCountIsSet(false);
    this.wordCount = 0;
  }

  /**
   * This field specifies the URL of the article, if published online. In some
   * cases, such as with the New York Times, when this field is present,
   * the URL is preferred to the URL field on articles published on
   * or after April 02, 2006, as the linked page will have richer content.
   */
  public String getAlternateURL() {
    return this.alternateURL;
  }

  /**
   * This field specifies the URL of the article, if published online. In some
   * cases, such as with the New York Times, when this field is present,
   * the URL is preferred to the URL field on articles published on
   * or after April 02, 2006, as the linked page will have richer content.
   */
  public NITFInfo setAlternateURL(String alternateURL) {
    this.alternateURL = alternateURL;
    return this;
  }

  public void unsetAlternateURL() {
    this.alternateURL = null;
  }

  /** Returns true if field alternateURL is set (has been assigned a value) and false otherwise */
  public boolean isSetAlternateURL() {
    return this.alternateURL != null;
  }

  public void setAlternateURLIsSet(boolean value) {
    if (!value) {
      this.alternateURL = null;
    }
  }

  /**
   * This field is a summary of the article, possibly written by
   * an indexing service.
   */
  public String getArticleAbstract() {
    return this.articleAbstract;
  }

  /**
   * This field is a summary of the article, possibly written by
   * an indexing service.
   */
  public NITFInfo setArticleAbstract(String articleAbstract) {
    this.articleAbstract = articleAbstract;
    return this;
  }

  public void unsetArticleAbstract() {
    this.articleAbstract = null;
  }

  /** Returns true if field articleAbstract is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleAbstract() {
    return this.articleAbstract != null;
  }

  public void setArticleAbstractIsSet(boolean value) {
    if (!value) {
      this.articleAbstract = null;
    }
  }

  /**
   * This field specifies the biography of the author of the article.
   * Generally, this field is specified for guest authors, and not for
   * regular reporters, except to provide the author's email address.
   */
  public String getAuthorBiography() {
    return this.authorBiography;
  }

  /**
   * This field specifies the biography of the author of the article.
   * Generally, this field is specified for guest authors, and not for
   * regular reporters, except to provide the author's email address.
   */
  public NITFInfo setAuthorBiography(String authorBiography) {
    this.authorBiography = authorBiography;
    return this;
  }

  public void unsetAuthorBiography() {
    this.authorBiography = null;
  }

  /** Returns true if field authorBiography is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorBiography() {
    return this.authorBiography != null;
  }

  public void setAuthorBiographyIsSet(boolean value) {
    if (!value) {
      this.authorBiography = null;
    }
  }

  /**
   * The banner field is used to indicate if there has been additional
   * information appended to the articles since its publication. Examples of
   * banners include ('Correction Appended' and 'Editor's Note Appended').
   */
  public String getBanner() {
    return this.banner;
  }

  /**
   * The banner field is used to indicate if there has been additional
   * information appended to the articles since its publication. Examples of
   * banners include ('Correction Appended' and 'Editor's Note Appended').
   */
  public NITFInfo setBanner(String banner) {
    this.banner = banner;
    return this;
  }

  public void unsetBanner() {
    this.banner = null;
  }

  /** Returns true if field banner is set (has been assigned a value) and false otherwise */
  public boolean isSetBanner() {
    return this.banner != null;
  }

  public void setBannerIsSet(boolean value) {
    if (!value) {
      this.banner = null;
    }
  }

  public int getBiographicalCategoryListSize() {
    return (this.biographicalCategoryList == null) ? 0 : this.biographicalCategoryList.size();
  }

  public java.util.Iterator<String> getBiographicalCategoryListIterator() {
    return (this.biographicalCategoryList == null) ? null : this.biographicalCategoryList.iterator();
  }

  public void addToBiographicalCategoryList(String elem) {
    if (this.biographicalCategoryList == null) {
      this.biographicalCategoryList = new ArrayList<String>();
    }
    this.biographicalCategoryList.add(elem);
  }

  /**
   * When present, the biographical category field generally indicates that a
   * document focuses on a particular individual. The value of the field
   * indicates the area or category in which this individual is best known.
   * This field is most often defined for Obituaries and Book Reviews.
   * 
   * <ol>
   * <li>Politics and Government (U.S.)</li>
   * <li>Books and Magazines <li>Royalty</li>
   * </ol>
   */
  public List<String> getBiographicalCategoryList() {
    return this.biographicalCategoryList;
  }

  /**
   * When present, the biographical category field generally indicates that a
   * document focuses on a particular individual. The value of the field
   * indicates the area or category in which this individual is best known.
   * This field is most often defined for Obituaries and Book Reviews.
   * 
   * <ol>
   * <li>Politics and Government (U.S.)</li>
   * <li>Books and Magazines <li>Royalty</li>
   * </ol>
   */
  public NITFInfo setBiographicalCategoryList(List<String> biographicalCategoryList) {
    this.biographicalCategoryList = biographicalCategoryList;
    return this;
  }

  public void unsetBiographicalCategoryList() {
    this.biographicalCategoryList = null;
  }

  /** Returns true if field biographicalCategoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetBiographicalCategoryList() {
    return this.biographicalCategoryList != null;
  }

  public void setBiographicalCategoryListIsSet(boolean value) {
    if (!value) {
      this.biographicalCategoryList = null;
    }
  }

  /**
   * If the article is part of a regular column, this field specifies the name
   * of that column.
   * <br>
   * Sample Column Names:
   * <br>
   * <ol>
   * <li>World News Briefs</li>
   * <li>WEDDINGS</li>
   * <li>The Accessories Channel</li>
   * </ol>
   * 
   */
  public String getColumnName() {
    return this.columnName;
  }

  /**
   * If the article is part of a regular column, this field specifies the name
   * of that column.
   * <br>
   * Sample Column Names:
   * <br>
   * <ol>
   * <li>World News Briefs</li>
   * <li>WEDDINGS</li>
   * <li>The Accessories Channel</li>
   * </ol>
   * 
   */
  public NITFInfo setColumnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

  public void unsetColumnName() {
    this.columnName = null;
  }

  /** Returns true if field columnName is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnName() {
    return this.columnName != null;
  }

  public void setColumnNameIsSet(boolean value) {
    if (!value) {
      this.columnName = null;
    }
  }

  /**
   * This field specifies the column in which the article starts in the print
   * paper. A typical printed page in the paper has six columns numbered from
   * right to left. As a consequence most, but not all, of the values for this
   * field fall in the range 1-6.
   */
  public int getColumnNumber() {
    return this.columnNumber;
  }

  /**
   * This field specifies the column in which the article starts in the print
   * paper. A typical printed page in the paper has six columns numbered from
   * right to left. As a consequence most, but not all, of the values for this
   * field fall in the range 1-6.
   */
  public NITFInfo setColumnNumber(int columnNumber) {
    this.columnNumber = columnNumber;
    setColumnNumberIsSet(true);
    return this;
  }

  public void unsetColumnNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID);
  }

  /** Returns true if field columnNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID);
  }

  public void setColumnNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNNUMBER_ISSET_ID, value);
  }

  /**
   * This field specifies the date on which a correction was made to the
   * article. Generally, if the correction date is specified, the correction
   * text will also be specified (and vice versa).
   */
  public long getCorrectionDate() {
    return this.correctionDate;
  }

  /**
   * This field specifies the date on which a correction was made to the
   * article. Generally, if the correction date is specified, the correction
   * text will also be specified (and vice versa).
   */
  public NITFInfo setCorrectionDate(long correctionDate) {
    this.correctionDate = correctionDate;
    setCorrectionDateIsSet(true);
    return this;
  }

  public void unsetCorrectionDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORRECTIONDATE_ISSET_ID);
  }

  /** Returns true if field correctionDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectionDate() {
    return EncodingUtils.testBit(__isset_bitfield, __CORRECTIONDATE_ISSET_ID);
  }

  public void setCorrectionDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORRECTIONDATE_ISSET_ID, value);
  }

  /**
   * For articles corrected following publication, this field specifies the
   * correction. Generally, if the correction text is specified, the
   * correction date will also be specified (and vice versa).
   */
  public String getCorrectionText() {
    return this.correctionText;
  }

  /**
   * For articles corrected following publication, this field specifies the
   * correction. Generally, if the correction text is specified, the
   * correction date will also be specified (and vice versa).
   */
  public NITFInfo setCorrectionText(String correctionText) {
    this.correctionText = correctionText;
    return this;
  }

  public void unsetCorrectionText() {
    this.correctionText = null;
  }

  /** Returns true if field correctionText is set (has been assigned a value) and false otherwise */
  public boolean isSetCorrectionText() {
    return this.correctionText != null;
  }

  public void setCorrectionTextIsSet(boolean value) {
    if (!value) {
      this.correctionText = null;
    }
  }

  /**
   * This field indicates the entity that produced the editorial content of
   * this document.
   */
  public String getCredit() {
    return this.credit;
  }

  /**
   * This field indicates the entity that produced the editorial content of
   * this document.
   */
  public NITFInfo setCredit(String credit) {
    this.credit = credit;
    return this;
  }

  public void unsetCredit() {
    this.credit = null;
  }

  /** Returns true if field credit is set (has been assigned a value) and false otherwise */
  public boolean isSetCredit() {
    return this.credit != null;
  }

  public void setCreditIsSet(boolean value) {
    if (!value) {
      this.credit = null;
    }
  }

  /**
   * This field specifies the day of week on which the article was published.
   * <ul>
   * <li>Monday</li>
   * <li>Tuesday</li>
   * <li>Wednesday</li>
   * <li>Thursday</li>
   * <li>Friday</li>
   * <li>Saturday</li>
   * <li>Sunday</li>
   * </ul>
   */
  public String getDayOfWeek() {
    return this.dayOfWeek;
  }

  /**
   * This field specifies the day of week on which the article was published.
   * <ul>
   * <li>Monday</li>
   * <li>Tuesday</li>
   * <li>Wednesday</li>
   * <li>Thursday</li>
   * <li>Friday</li>
   * <li>Saturday</li>
   * <li>Sunday</li>
   * </ul>
   */
  public NITFInfo setDayOfWeek(String dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  public void unsetDayOfWeek() {
    this.dayOfWeek = null;
  }

  /** Returns true if field dayOfWeek is set (has been assigned a value) and false otherwise */
  public boolean isSetDayOfWeek() {
    return this.dayOfWeek != null;
  }

  public void setDayOfWeekIsSet(boolean value) {
    if (!value) {
      this.dayOfWeek = null;
    }
  }

  public int getDescriptorListSize() {
    return (this.descriptorList == null) ? 0 : this.descriptorList.size();
  }

  public java.util.Iterator<String> getDescriptorListIterator() {
    return (this.descriptorList == null) ? null : this.descriptorList.iterator();
  }

  public void addToDescriptorList(String elem) {
    if (this.descriptorList == null) {
      this.descriptorList = new ArrayList<String>();
    }
    this.descriptorList.add(elem);
  }

  /**
   * The &quot;descriptors&quot; field specifies a list of descriptive terms drawn from
   * a normalized controlled vocabulary corresponding to subjects mentioned in
   * the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>ECONOMIC CONDITIONS AND TRENDS</li>
   * <li>AIRPLANES</li>
   * <li>VIOLINS</li>
   * </ol>
   */
  public List<String> getDescriptorList() {
    return this.descriptorList;
  }

  /**
   * The &quot;descriptors&quot; field specifies a list of descriptive terms drawn from
   * a normalized controlled vocabulary corresponding to subjects mentioned in
   * the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>ECONOMIC CONDITIONS AND TRENDS</li>
   * <li>AIRPLANES</li>
   * <li>VIOLINS</li>
   * </ol>
   */
  public NITFInfo setDescriptorList(List<String> descriptorList) {
    this.descriptorList = descriptorList;
    return this;
  }

  public void unsetDescriptorList() {
    this.descriptorList = null;
  }

  /** Returns true if field descriptorList is set (has been assigned a value) and false otherwise */
  public boolean isSetDescriptorList() {
    return this.descriptorList != null;
  }

  public void setDescriptorListIsSet(boolean value) {
    if (!value) {
      this.descriptorList = null;
    }
  }

  /**
   * The feature page containing this article, such as
   * <ul>
   * <li>Education Page</li>
   * <li>Fashion Page</li>
   * </ul>
   */
  public String getFeaturePage() {
    return this.featurePage;
  }

  /**
   * The feature page containing this article, such as
   * <ul>
   * <li>Education Page</li>
   * <li>Fashion Page</li>
   * </ul>
   */
  public NITFInfo setFeaturePage(String featurePage) {
    this.featurePage = featurePage;
    return this;
  }

  public void unsetFeaturePage() {
    this.featurePage = null;
  }

  /** Returns true if field featurePage is set (has been assigned a value) and false otherwise */
  public boolean isSetFeaturePage() {
    return this.featurePage != null;
  }

  public void setFeaturePageIsSet(boolean value) {
    if (!value) {
      this.featurePage = null;
    }
  }

  public int getGeneralOnlineDescriptorListSize() {
    return (this.generalOnlineDescriptorList == null) ? 0 : this.generalOnlineDescriptorList.size();
  }

  public java.util.Iterator<String> getGeneralOnlineDescriptorListIterator() {
    return (this.generalOnlineDescriptorList == null) ? null : this.generalOnlineDescriptorList.iterator();
  }

  public void addToGeneralOnlineDescriptorList(String elem) {
    if (this.generalOnlineDescriptorList == null) {
      this.generalOnlineDescriptorList = new ArrayList<String>();
    }
    this.generalOnlineDescriptorList.add(elem);
  }

  /**
   * The &quot;general online descriptors&quot; field specifies a list of descriptors
   * that are at a higher level of generality than the other tags associated
   * with the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Surfing</li>
   * <li>Venice Biennale</li>
   * <li>Ranches</li>
   * </ol>
   */
  public List<String> getGeneralOnlineDescriptorList() {
    return this.generalOnlineDescriptorList;
  }

  /**
   * The &quot;general online descriptors&quot; field specifies a list of descriptors
   * that are at a higher level of generality than the other tags associated
   * with the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Surfing</li>
   * <li>Venice Biennale</li>
   * <li>Ranches</li>
   * </ol>
   */
  public NITFInfo setGeneralOnlineDescriptorList(List<String> generalOnlineDescriptorList) {
    this.generalOnlineDescriptorList = generalOnlineDescriptorList;
    return this;
  }

  public void unsetGeneralOnlineDescriptorList() {
    this.generalOnlineDescriptorList = null;
  }

  /** Returns true if field generalOnlineDescriptorList is set (has been assigned a value) and false otherwise */
  public boolean isSetGeneralOnlineDescriptorList() {
    return this.generalOnlineDescriptorList != null;
  }

  public void setGeneralOnlineDescriptorListIsSet(boolean value) {
    if (!value) {
      this.generalOnlineDescriptorList = null;
    }
  }

  /**
   * The GUID field specifies an integer that is guaranteed to be unique for
   * every document in the corpus.
   */
  public int getGuid() {
    return this.guid;
  }

  /**
   * The GUID field specifies an integer that is guaranteed to be unique for
   * every document in the corpus.
   */
  public NITFInfo setGuid(int guid) {
    this.guid = guid;
    setGuidIsSet(true);
    return this;
  }

  public void unsetGuid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUID_ISSET_ID);
  }

  /** Returns true if field guid is set (has been assigned a value) and false otherwise */
  public boolean isSetGuid() {
    return EncodingUtils.testBit(__isset_bitfield, __GUID_ISSET_ID);
  }

  public void setGuidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUID_ISSET_ID, value);
  }

  /**
   * The kicker is an additional piece of information printed as an
   * accompaniment to a news headline.
   */
  public String getKicker() {
    return this.kicker;
  }

  /**
   * The kicker is an additional piece of information printed as an
   * accompaniment to a news headline.
   */
  public NITFInfo setKicker(String kicker) {
    this.kicker = kicker;
    return this;
  }

  public void unsetKicker() {
    this.kicker = null;
  }

  /** Returns true if field kicker is set (has been assigned a value) and false otherwise */
  public boolean isSetKicker() {
    return this.kicker != null;
  }

  public void setKickerIsSet(boolean value) {
    if (!value) {
      this.kicker = null;
    }
  }

  public int getLeadParagraphListSize() {
    return (this.leadParagraphList == null) ? 0 : this.leadParagraphList.size();
  }

  public java.util.Iterator<String> getLeadParagraphListIterator() {
    return (this.leadParagraphList == null) ? null : this.leadParagraphList.iterator();
  }

  public void addToLeadParagraphList(String elem) {
    if (this.leadParagraphList == null) {
      this.leadParagraphList = new ArrayList<String>();
    }
    this.leadParagraphList.add(elem);
  }

  /**
   * The &quot;lead Paragraph&quot; field is the lead paragraph of the article.
   * Generally this field is populated with the first two paragraphs from the
   * article.
   */
  public List<String> getLeadParagraphList() {
    return this.leadParagraphList;
  }

  /**
   * The &quot;lead Paragraph&quot; field is the lead paragraph of the article.
   * Generally this field is populated with the first two paragraphs from the
   * article.
   */
  public NITFInfo setLeadParagraphList(List<String> leadParagraphList) {
    this.leadParagraphList = leadParagraphList;
    return this;
  }

  public void unsetLeadParagraphList() {
    this.leadParagraphList = null;
  }

  /** Returns true if field leadParagraphList is set (has been assigned a value) and false otherwise */
  public boolean isSetLeadParagraphList() {
    return this.leadParagraphList != null;
  }

  public void setLeadParagraphListIsSet(boolean value) {
    if (!value) {
      this.leadParagraphList = null;
    }
  }

  public int getLocationListSize() {
    return (this.locationList == null) ? 0 : this.locationList.size();
  }

  public java.util.Iterator<String> getLocationListIterator() {
    return (this.locationList == null) ? null : this.locationList.iterator();
  }

  public void addToLocationList(String elem) {
    if (this.locationList == null) {
      this.locationList = new ArrayList<String>();
    }
    this.locationList.add(elem);
  }

  /**
   * The &quot;locations&quot; field specifies a list of geographic descriptors drawn
   * from a normalized controlled vocabulary that correspond to places
   * mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Wellsboro (Pa)</li>
   * <li>Kansas City (Kan)</li>
   * <li>Park Slope (NYC)</li>
   * </ol>
   */
  public List<String> getLocationList() {
    return this.locationList;
  }

  /**
   * The &quot;locations&quot; field specifies a list of geographic descriptors drawn
   * from a normalized controlled vocabulary that correspond to places
   * mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Wellsboro (Pa)</li>
   * <li>Kansas City (Kan)</li>
   * <li>Park Slope (NYC)</li>
   * </ol>
   */
  public NITFInfo setLocationList(List<String> locationList) {
    this.locationList = locationList;
    return this;
  }

  public void unsetLocationList() {
    this.locationList = null;
  }

  /** Returns true if field locationList is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationList() {
    return this.locationList != null;
  }

  public void setLocationListIsSet(boolean value) {
    if (!value) {
      this.locationList = null;
    }
  }

  public int getNameListSize() {
    return (this.nameList == null) ? 0 : this.nameList.size();
  }

  public java.util.Iterator<String> getNameListIterator() {
    return (this.nameList == null) ? null : this.nameList.iterator();
  }

  public void addToNameList(String elem) {
    if (this.nameList == null) {
      this.nameList = new ArrayList<String>();
    }
    this.nameList.add(elem);
  }

  /**
   * The &quot;names&quot; field specifies a list of names mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Azza Fahmy</li>
   * <li>George C. Izenour</li>
   * <li>Chris Schenkel</li>
   * </ol>
   */
  public List<String> getNameList() {
    return this.nameList;
  }

  /**
   * The &quot;names&quot; field specifies a list of names mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Azza Fahmy</li>
   * <li>George C. Izenour</li>
   * <li>Chris Schenkel</li>
   * </ol>
   */
  public NITFInfo setNameList(List<String> nameList) {
    this.nameList = nameList;
    return this;
  }

  public void unsetNameList() {
    this.nameList = null;
  }

  /** Returns true if field nameList is set (has been assigned a value) and false otherwise */
  public boolean isSetNameList() {
    return this.nameList != null;
  }

  public void setNameListIsSet(boolean value) {
    if (!value) {
      this.nameList = null;
    }
  }

  /**
   * This field specifies the desk in the newsroom that
   * produced the article. The desk is related to, but is not the same as the
   * section in which the article appears.
   */
  public String getNewsDesk() {
    return this.newsDesk;
  }

  /**
   * This field specifies the desk in the newsroom that
   * produced the article. The desk is related to, but is not the same as the
   * section in which the article appears.
   */
  public NITFInfo setNewsDesk(String newsDesk) {
    this.newsDesk = newsDesk;
    return this;
  }

  public void unsetNewsDesk() {
    this.newsDesk = null;
  }

  /** Returns true if field newsDesk is set (has been assigned a value) and false otherwise */
  public boolean isSetNewsDesk() {
    return this.newsDesk != null;
  }

  public void setNewsDeskIsSet(boolean value) {
    if (!value) {
      this.newsDesk = null;
    }
  }

  /**
   * The Normalized Byline field is the byline normalized to the form (last
   * name, first name).
   */
  public String getNormalizedByline() {
    return this.normalizedByline;
  }

  /**
   * The Normalized Byline field is the byline normalized to the form (last
   * name, first name).
   */
  public NITFInfo setNormalizedByline(String normalizedByline) {
    this.normalizedByline = normalizedByline;
    return this;
  }

  public void unsetNormalizedByline() {
    this.normalizedByline = null;
  }

  /** Returns true if field normalizedByline is set (has been assigned a value) and false otherwise */
  public boolean isSetNormalizedByline() {
    return this.normalizedByline != null;
  }

  public void setNormalizedBylineIsSet(boolean value) {
    if (!value) {
      this.normalizedByline = null;
    }
  }

  public int getOnlineDescriptorListSize() {
    return (this.onlineDescriptorList == null) ? 0 : this.onlineDescriptorList.size();
  }

  public java.util.Iterator<String> getOnlineDescriptorListIterator() {
    return (this.onlineDescriptorList == null) ? null : this.onlineDescriptorList.iterator();
  }

  public void addToOnlineDescriptorList(String elem) {
    if (this.onlineDescriptorList == null) {
      this.onlineDescriptorList = new ArrayList<String>();
    }
    this.onlineDescriptorList.add(elem);
  }

  /**
   * This field specifies a list of descriptors from a normalized controlled
   * vocabulary that correspond to topics mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Marriages</li>
   * <li>Parks and Other Recreation Areas</li>
   * <li>Cooking and Cookbooks</li>
   * </ol>
   */
  public List<String> getOnlineDescriptorList() {
    return this.onlineDescriptorList;
  }

  /**
   * This field specifies a list of descriptors from a normalized controlled
   * vocabulary that correspond to topics mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Marriages</li>
   * <li>Parks and Other Recreation Areas</li>
   * <li>Cooking and Cookbooks</li>
   * </ol>
   */
  public NITFInfo setOnlineDescriptorList(List<String> onlineDescriptorList) {
    this.onlineDescriptorList = onlineDescriptorList;
    return this;
  }

  public void unsetOnlineDescriptorList() {
    this.onlineDescriptorList = null;
  }

  /** Returns true if field onlineDescriptorList is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineDescriptorList() {
    return this.onlineDescriptorList != null;
  }

  public void setOnlineDescriptorListIsSet(boolean value) {
    if (!value) {
      this.onlineDescriptorList = null;
    }
  }

  /**
   * This field specifies the headline displayed with the article
   * online. Often this differs from the headline used in print.
   */
  public String getOnlineHeadline() {
    return this.onlineHeadline;
  }

  /**
   * This field specifies the headline displayed with the article
   * online. Often this differs from the headline used in print.
   */
  public NITFInfo setOnlineHeadline(String onlineHeadline) {
    this.onlineHeadline = onlineHeadline;
    return this;
  }

  public void unsetOnlineHeadline() {
    this.onlineHeadline = null;
  }

  /** Returns true if field onlineHeadline is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineHeadline() {
    return this.onlineHeadline != null;
  }

  public void setOnlineHeadlineIsSet(boolean value) {
    if (!value) {
      this.onlineHeadline = null;
    }
  }

  /**
   * This field specifies the lead paragraph for the online version.
   */
  public String getOnlineLeadParagraph() {
    return this.onlineLeadParagraph;
  }

  /**
   * This field specifies the lead paragraph for the online version.
   */
  public NITFInfo setOnlineLeadParagraph(String onlineLeadParagraph) {
    this.onlineLeadParagraph = onlineLeadParagraph;
    return this;
  }

  public void unsetOnlineLeadParagraph() {
    this.onlineLeadParagraph = null;
  }

  /** Returns true if field onlineLeadParagraph is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineLeadParagraph() {
    return this.onlineLeadParagraph != null;
  }

  public void setOnlineLeadParagraphIsSet(boolean value) {
    if (!value) {
      this.onlineLeadParagraph = null;
    }
  }

  public int getOnlineLocationListSize() {
    return (this.onlineLocationList == null) ? 0 : this.onlineLocationList.size();
  }

  public java.util.Iterator<String> getOnlineLocationListIterator() {
    return (this.onlineLocationList == null) ? null : this.onlineLocationList.iterator();
  }

  public void addToOnlineLocationList(String elem) {
    if (this.onlineLocationList == null) {
      this.onlineLocationList = new ArrayList<String>();
    }
    this.onlineLocationList.add(elem);
  }

  /**
   * This field specifies a list of place names that correspond to geographic
   * locations mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Hollywood</li>
   * <li>Los Angeles</li>
   * <li>Arcadia</li>
   * </ol>
   */
  public List<String> getOnlineLocationList() {
    return this.onlineLocationList;
  }

  /**
   * This field specifies a list of place names that correspond to geographic
   * locations mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Hollywood</li>
   * <li>Los Angeles</li>
   * <li>Arcadia</li>
   * </ol>
   */
  public NITFInfo setOnlineLocationList(List<String> onlineLocationList) {
    this.onlineLocationList = onlineLocationList;
    return this;
  }

  public void unsetOnlineLocationList() {
    this.onlineLocationList = null;
  }

  /** Returns true if field onlineLocationList is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineLocationList() {
    return this.onlineLocationList != null;
  }

  public void setOnlineLocationListIsSet(boolean value) {
    if (!value) {
      this.onlineLocationList = null;
    }
  }

  public int getOnlineOrganizationListSize() {
    return (this.onlineOrganizationList == null) ? 0 : this.onlineOrganizationList.size();
  }

  public java.util.Iterator<String> getOnlineOrganizationListIterator() {
    return (this.onlineOrganizationList == null) ? null : this.onlineOrganizationList.iterator();
  }

  public void addToOnlineOrganizationList(String elem) {
    if (this.onlineOrganizationList == null) {
      this.onlineOrganizationList = new ArrayList<String>();
    }
    this.onlineOrganizationList.add(elem);
  }

  /**
   * This field specifies a list of organizations that correspond to
   * organizations mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Nintendo Company Limited</li>
   * <li>Yeshiva University</li>
   * <li>Rose Center</li>
   * </ol>
   */
  public List<String> getOnlineOrganizationList() {
    return this.onlineOrganizationList;
  }

  /**
   * This field specifies a list of organizations that correspond to
   * organizations mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Nintendo Company Limited</li>
   * <li>Yeshiva University</li>
   * <li>Rose Center</li>
   * </ol>
   */
  public NITFInfo setOnlineOrganizationList(List<String> onlineOrganizationList) {
    this.onlineOrganizationList = onlineOrganizationList;
    return this;
  }

  public void unsetOnlineOrganizationList() {
    this.onlineOrganizationList = null;
  }

  /** Returns true if field onlineOrganizationList is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineOrganizationList() {
    return this.onlineOrganizationList != null;
  }

  public void setOnlineOrganizationListIsSet(boolean value) {
    if (!value) {
      this.onlineOrganizationList = null;
    }
  }

  public int getOnlinePeopleSize() {
    return (this.onlinePeople == null) ? 0 : this.onlinePeople.size();
  }

  public java.util.Iterator<String> getOnlinePeopleIterator() {
    return (this.onlinePeople == null) ? null : this.onlinePeople.iterator();
  }

  public void addToOnlinePeople(String elem) {
    if (this.onlinePeople == null) {
      this.onlinePeople = new ArrayList<String>();
    }
    this.onlinePeople.add(elem);
  }

  /**
   * This field specifies a list of people that correspond to individuals
   * mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Lopez, Jennifer</li>
   * <li>Joyce, James</li>
   * <li>Robinson, Jackie</li>
   * </ol>
   */
  public List<String> getOnlinePeople() {
    return this.onlinePeople;
  }

  /**
   * This field specifies a list of people that correspond to individuals
   * mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Lopez, Jennifer</li>
   * <li>Joyce, James</li>
   * <li>Robinson, Jackie</li>
   * </ol>
   */
  public NITFInfo setOnlinePeople(List<String> onlinePeople) {
    this.onlinePeople = onlinePeople;
    return this;
  }

  public void unsetOnlinePeople() {
    this.onlinePeople = null;
  }

  /** Returns true if field onlinePeople is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlinePeople() {
    return this.onlinePeople != null;
  }

  public void setOnlinePeopleIsSet(boolean value) {
    if (!value) {
      this.onlinePeople = null;
    }
  }

  public int getOnlineSectionListSize() {
    return (this.onlineSectionList == null) ? 0 : this.onlineSectionList.size();
  }

  public java.util.Iterator<String> getOnlineSectionListIterator() {
    return (this.onlineSectionList == null) ? null : this.onlineSectionList.iterator();
  }

  public void addToOnlineSectionList(String elem) {
    if (this.onlineSectionList == null) {
      this.onlineSectionList = new ArrayList<String>();
    }
    this.onlineSectionList.add(elem);
  }

  /**
   * This field specifies the section(s) in which the online version of the article
   * is placed. This may typically be populated from a semicolon (;) delineated list.
   */
  public List<String> getOnlineSectionList() {
    return this.onlineSectionList;
  }

  /**
   * This field specifies the section(s) in which the online version of the article
   * is placed. This may typically be populated from a semicolon (;) delineated list.
   */
  public NITFInfo setOnlineSectionList(List<String> onlineSectionList) {
    this.onlineSectionList = onlineSectionList;
    return this;
  }

  public void unsetOnlineSectionList() {
    this.onlineSectionList = null;
  }

  /** Returns true if field onlineSectionList is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineSectionList() {
    return this.onlineSectionList != null;
  }

  public void setOnlineSectionListIsSet(boolean value) {
    if (!value) {
      this.onlineSectionList = null;
    }
  }

  public int getOnlineTitleListSize() {
    return (this.onlineTitleList == null) ? 0 : this.onlineTitleList.size();
  }

  public java.util.Iterator<String> getOnlineTitleListIterator() {
    return (this.onlineTitleList == null) ? null : this.onlineTitleList.iterator();
  }

  public void addToOnlineTitleList(String elem) {
    if (this.onlineTitleList == null) {
      this.onlineTitleList = new ArrayList<String>();
    }
    this.onlineTitleList.add(elem);
  }

  /**
   * This field specifies a list of authored works mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Matchstick Men (Movie)</li>
   * <li>Blades of Glory (Movie)</li>
   * <li>Bridge and Tunnel (Play)</li>
   * </ol>
   */
  public List<String> getOnlineTitleList() {
    return this.onlineTitleList;
  }

  /**
   * This field specifies a list of authored works mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Matchstick Men (Movie)</li>
   * <li>Blades of Glory (Movie)</li>
   * <li>Bridge and Tunnel (Play)</li>
   * </ol>
   */
  public NITFInfo setOnlineTitleList(List<String> onlineTitleList) {
    this.onlineTitleList = onlineTitleList;
    return this;
  }

  public void unsetOnlineTitleList() {
    this.onlineTitleList = null;
  }

  /** Returns true if field onlineTitleList is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineTitleList() {
    return this.onlineTitleList != null;
  }

  public void setOnlineTitleListIsSet(boolean value) {
    if (!value) {
      this.onlineTitleList = null;
    }
  }

  public int getOrganizationListSize() {
    return (this.organizationList == null) ? 0 : this.organizationList.size();
  }

  public java.util.Iterator<String> getOrganizationListIterator() {
    return (this.organizationList == null) ? null : this.organizationList.iterator();
  }

  public void addToOrganizationList(String elem) {
    if (this.organizationList == null) {
      this.organizationList = new ArrayList<String>();
    }
    this.organizationList.add(elem);
  }

  /**
   * This field specifies a list of organization names drawn from a normalized
   * controlled vocabulary that correspond to organizations mentioned in the
   * article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Circuit City Stores Inc</li>
   * <li>Delaware County Community College (Pa)</li>
   * <li>CONNECTICUT GRAND OPERA</li>
   * </ol>
   */
  public List<String> getOrganizationList() {
    return this.organizationList;
  }

  /**
   * This field specifies a list of organization names drawn from a normalized
   * controlled vocabulary that correspond to organizations mentioned in the
   * article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Circuit City Stores Inc</li>
   * <li>Delaware County Community College (Pa)</li>
   * <li>CONNECTICUT GRAND OPERA</li>
   * </ol>
   */
  public NITFInfo setOrganizationList(List<String> organizationList) {
    this.organizationList = organizationList;
    return this;
  }

  public void unsetOrganizationList() {
    this.organizationList = null;
  }

  /** Returns true if field organizationList is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganizationList() {
    return this.organizationList != null;
  }

  public void setOrganizationListIsSet(boolean value) {
    if (!value) {
      this.organizationList = null;
    }
  }

  /**
   * This field specifies the page of the section in the paper in which the
   * article appears. This is not an absolute pagination. An article that
   * appears on page 3 in section A occurs in the physical paper before an
   * article that occurs on page 1 of section F. The section is encoded in
   * the <strong>section</strong> field.
   */
  public int getPage() {
    return this.page;
  }

  /**
   * This field specifies the page of the section in the paper in which the
   * article appears. This is not an absolute pagination. An article that
   * appears on page 3 in section A occurs in the physical paper before an
   * article that occurs on page 1 of section F. The section is encoded in
   * the <strong>section</strong> field.
   */
  public NITFInfo setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getPeopleListSize() {
    return (this.peopleList == null) ? 0 : this.peopleList.size();
  }

  public java.util.Iterator<String> getPeopleListIterator() {
    return (this.peopleList == null) ? null : this.peopleList.iterator();
  }

  public void addToPeopleList(String elem) {
    if (this.peopleList == null) {
      this.peopleList = new ArrayList<String>();
    }
    this.peopleList.add(elem);
  }

  /**
   * This field specifies a list of people from a normalized controlled
   * vocabulary that correspond to individuals mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>REAGAN, RONALD WILSON (PRES)</li>
   * <li>BEGIN, MENACHEM (PRIME MIN)</li>
   * <li>COLLINS, GLENN</li>
   * </ol>
   */
  public List<String> getPeopleList() {
    return this.peopleList;
  }

  /**
   * This field specifies a list of people from a normalized controlled
   * vocabulary that correspond to individuals mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>REAGAN, RONALD WILSON (PRES)</li>
   * <li>BEGIN, MENACHEM (PRIME MIN)</li>
   * <li>COLLINS, GLENN</li>
   * </ol>
   */
  public NITFInfo setPeopleList(List<String> peopleList) {
    this.peopleList = peopleList;
    return this;
  }

  public void unsetPeopleList() {
    this.peopleList = null;
  }

  /** Returns true if field peopleList is set (has been assigned a value) and false otherwise */
  public boolean isSetPeopleList() {
    return this.peopleList != null;
  }

  public void setPeopleListIsSet(boolean value) {
    if (!value) {
      this.peopleList = null;
    }
  }

  /**
   * This field specifies the date of the article's publication.
   */
  public long getPublicationDate() {
    return this.publicationDate;
  }

  /**
   * This field specifies the date of the article's publication.
   */
  public NITFInfo setPublicationDate(long publicationDate) {
    this.publicationDate = publicationDate;
    setPublicationDateIsSet(true);
    return this;
  }

  public void unsetPublicationDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICATIONDATE_ISSET_ID);
  }

  /** Returns true if field publicationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicationDate() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLICATIONDATE_ISSET_ID);
  }

  public void setPublicationDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICATIONDATE_ISSET_ID, value);
  }

  /**
   * This field specifies the day of the month on which the article was
   * published, always in the range 1-31.
   */
  public int getPublicationDayOfMonth() {
    return this.publicationDayOfMonth;
  }

  /**
   * This field specifies the day of the month on which the article was
   * published, always in the range 1-31.
   */
  public NITFInfo setPublicationDayOfMonth(int publicationDayOfMonth) {
    this.publicationDayOfMonth = publicationDayOfMonth;
    setPublicationDayOfMonthIsSet(true);
    return this;
  }

  public void unsetPublicationDayOfMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICATIONDAYOFMONTH_ISSET_ID);
  }

  /** Returns true if field publicationDayOfMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicationDayOfMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLICATIONDAYOFMONTH_ISSET_ID);
  }

  public void setPublicationDayOfMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICATIONDAYOFMONTH_ISSET_ID, value);
  }

  /**
   * This field specifies the month on which the article was published in the
   * range 1-12 where 1 is January 2 is February etc.
   */
  public int getPublicationMonth() {
    return this.publicationMonth;
  }

  /**
   * This field specifies the month on which the article was published in the
   * range 1-12 where 1 is January 2 is February etc.
   */
  public NITFInfo setPublicationMonth(int publicationMonth) {
    this.publicationMonth = publicationMonth;
    setPublicationMonthIsSet(true);
    return this;
  }

  public void unsetPublicationMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICATIONMONTH_ISSET_ID);
  }

  /** Returns true if field publicationMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicationMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLICATIONMONTH_ISSET_ID);
  }

  public void setPublicationMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICATIONMONTH_ISSET_ID, value);
  }

  /**
   * This field specifies the year in which the article was published. This
   * value is in the range 1987-2007 for this collection.
   */
  public int getPublicationYear() {
    return this.publicationYear;
  }

  /**
   * This field specifies the year in which the article was published. This
   * value is in the range 1987-2007 for this collection.
   */
  public NITFInfo setPublicationYear(int publicationYear) {
    this.publicationYear = publicationYear;
    setPublicationYearIsSet(true);
    return this;
  }

  public void unsetPublicationYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PUBLICATIONYEAR_ISSET_ID);
  }

  /** Returns true if field publicationYear is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicationYear() {
    return EncodingUtils.testBit(__isset_bitfield, __PUBLICATIONYEAR_ISSET_ID);
  }

  public void setPublicationYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PUBLICATIONYEAR_ISSET_ID, value);
  }

  /**
   * This field specifies the section of the paper in which the article
   * appears. This is not the name of the section, but rather a letter or
   * number that indicates the section.
   */
  public String getSection() {
    return this.section;
  }

  /**
   * This field specifies the section of the paper in which the article
   * appears. This is not the name of the section, but rather a letter or
   * number that indicates the section.
   */
  public NITFInfo setSection(String section) {
    this.section = section;
    return this;
  }

  public void unsetSection() {
    this.section = null;
  }

  /** Returns true if field section is set (has been assigned a value) and false otherwise */
  public boolean isSetSection() {
    return this.section != null;
  }

  public void setSectionIsSet(boolean value) {
    if (!value) {
      this.section = null;
    }
  }

  /**
   * If the article is part of a regular series, this field specifies the name
   * of that column.
   */
  public String getSeriesName() {
    return this.seriesName;
  }

  /**
   * If the article is part of a regular series, this field specifies the name
   * of that column.
   */
  public NITFInfo setSeriesName(String seriesName) {
    this.seriesName = seriesName;
    return this;
  }

  public void unsetSeriesName() {
    this.seriesName = null;
  }

  /** Returns true if field seriesName is set (has been assigned a value) and false otherwise */
  public boolean isSetSeriesName() {
    return this.seriesName != null;
  }

  public void setSeriesNameIsSet(boolean value) {
    if (!value) {
      this.seriesName = null;
    }
  }

  /**
   * The slug is a short string that uniquely identifies an article from all
   * other articles published on the same day. Please note, however, that
   * different articles on different days may have the same slug.
   * <ul>
   * <li>30other</li>
   * <li>12reunion</li>
   * </ul>
   */
  public String getSlug() {
    return this.slug;
  }

  /**
   * The slug is a short string that uniquely identifies an article from all
   * other articles published on the same day. Please note, however, that
   * different articles on different days may have the same slug.
   * <ul>
   * <li>30other</li>
   * <li>12reunion</li>
   * </ul>
   */
  public NITFInfo setSlug(String slug) {
    this.slug = slug;
    return this;
  }

  public void unsetSlug() {
    this.slug = null;
  }

  /** Returns true if field slug is set (has been assigned a value) and false otherwise */
  public boolean isSetSlug() {
    return this.slug != null;
  }

  public void setSlugIsSet(boolean value) {
    if (!value) {
      this.slug = null;
    }
  }

  public int getTaxonomicClassifierListSize() {
    return (this.taxonomicClassifierList == null) ? 0 : this.taxonomicClassifierList.size();
  }

  public java.util.Iterator<String> getTaxonomicClassifierListIterator() {
    return (this.taxonomicClassifierList == null) ? null : this.taxonomicClassifierList.iterator();
  }

  public void addToTaxonomicClassifierList(String elem) {
    if (this.taxonomicClassifierList == null) {
      this.taxonomicClassifierList = new ArrayList<String>();
    }
    this.taxonomicClassifierList.add(elem);
  }

  /**
   * This field specifies a list of taxonomic classifiers that place this
   * article into a hierarchy of articles. The individual terms of each
   * taxonomic classifier are separated with the '/' character.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Top/Features/Travel/Guides/Destinations/North America/United
   * States/Arizona</li>
   * <li>Top/News/U.S./Rockies</li>
   * <li>Top/Opinion</li>
   * </ol>
   */
  public List<String> getTaxonomicClassifierList() {
    return this.taxonomicClassifierList;
  }

  /**
   * This field specifies a list of taxonomic classifiers that place this
   * article into a hierarchy of articles. The individual terms of each
   * taxonomic classifier are separated with the '/' character.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Top/Features/Travel/Guides/Destinations/North America/United
   * States/Arizona</li>
   * <li>Top/News/U.S./Rockies</li>
   * <li>Top/Opinion</li>
   * </ol>
   */
  public NITFInfo setTaxonomicClassifierList(List<String> taxonomicClassifierList) {
    this.taxonomicClassifierList = taxonomicClassifierList;
    return this;
  }

  public void unsetTaxonomicClassifierList() {
    this.taxonomicClassifierList = null;
  }

  /** Returns true if field taxonomicClassifierList is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxonomicClassifierList() {
    return this.taxonomicClassifierList != null;
  }

  public void setTaxonomicClassifierListIsSet(boolean value) {
    if (!value) {
      this.taxonomicClassifierList = null;
    }
  }

  public int getTitleListSize() {
    return (this.titleList == null) ? 0 : this.titleList.size();
  }

  public java.util.Iterator<String> getTitleListIterator() {
    return (this.titleList == null) ? null : this.titleList.iterator();
  }

  public void addToTitleList(String elem) {
    if (this.titleList == null) {
      this.titleList = new ArrayList<String>();
    }
    this.titleList.add(elem);
  }

  /**
   * This field specifies a list of authored works that correspond to works
   * mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Greystoke: The Legend of Tarzan, Lord of the Apes (Movie)</li>
   * <li>Law and Order (TV Program)</li>
   * <li>BATTLEFIELD EARTH (BOOK)</li>
   * </ol>
   */
  public List<String> getTitleList() {
    return this.titleList;
  }

  /**
   * This field specifies a list of authored works that correspond to works
   * mentioned in the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>Greystoke: The Legend of Tarzan, Lord of the Apes (Movie)</li>
   * <li>Law and Order (TV Program)</li>
   * <li>BATTLEFIELD EARTH (BOOK)</li>
   * </ol>
   */
  public NITFInfo setTitleList(List<String> titleList) {
    this.titleList = titleList;
    return this;
  }

  public void unsetTitleList() {
    this.titleList = null;
  }

  /** Returns true if field titleList is set (has been assigned a value) and false otherwise */
  public boolean isSetTitleList() {
    return this.titleList != null;
  }

  public void setTitleListIsSet(boolean value) {
    if (!value) {
      this.titleList = null;
    }
  }

  public int getTypesOfMaterialListSize() {
    return (this.typesOfMaterialList == null) ? 0 : this.typesOfMaterialList.size();
  }

  public java.util.Iterator<String> getTypesOfMaterialListIterator() {
    return (this.typesOfMaterialList == null) ? null : this.typesOfMaterialList.iterator();
  }

  public void addToTypesOfMaterialList(String elem) {
    if (this.typesOfMaterialList == null) {
      this.typesOfMaterialList = new ArrayList<String>();
    }
    this.typesOfMaterialList.add(elem);
  }

  /**
   * This field specifies a normalized list of terms describing the general
   * editorial category of the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>REVIEW</li>
   * <li>OBITUARY</li>
   * <li>ANALYSIS</li>
   * </ol>
   */
  public List<String> getTypesOfMaterialList() {
    return this.typesOfMaterialList;
  }

  /**
   * This field specifies a normalized list of terms describing the general
   * editorial category of the article.
   * <br>
   * Examples Include:
   * <ol>
   * <li>REVIEW</li>
   * <li>OBITUARY</li>
   * <li>ANALYSIS</li>
   * </ol>
   */
  public NITFInfo setTypesOfMaterialList(List<String> typesOfMaterialList) {
    this.typesOfMaterialList = typesOfMaterialList;
    return this;
  }

  public void unsetTypesOfMaterialList() {
    this.typesOfMaterialList = null;
  }

  /** Returns true if field typesOfMaterialList is set (has been assigned a value) and false otherwise */
  public boolean isSetTypesOfMaterialList() {
    return this.typesOfMaterialList != null;
  }

  public void setTypesOfMaterialListIsSet(boolean value) {
    if (!value) {
      this.typesOfMaterialList = null;
    }
  }

  /**
   * This field specifies the location of the online version of the article. The
   * &quot;Alternative Url&quot; field is preferred to this field on articles published
   * on or after April 02, 2006, as the linked page will have richer content.
   */
  public String getUrl() {
    return this.url;
  }

  /**
   * This field specifies the location of the online version of the article. The
   * &quot;Alternative Url&quot; field is preferred to this field on articles published
   * on or after April 02, 2006, as the linked page will have richer content.
   */
  public NITFInfo setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  /**
   * This field specifies the number of words in the body of the article,
   * including the lead paragraph.
   */
  public int getWordCount() {
    return this.wordCount;
  }

  /**
   * This field specifies the number of words in the body of the article,
   * including the lead paragraph.
   */
  public NITFInfo setWordCount(int wordCount) {
    this.wordCount = wordCount;
    setWordCountIsSet(true);
    return this;
  }

  public void unsetWordCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORDCOUNT_ISSET_ID);
  }

  /** Returns true if field wordCount is set (has been assigned a value) and false otherwise */
  public boolean isSetWordCount() {
    return EncodingUtils.testBit(__isset_bitfield, __WORDCOUNT_ISSET_ID);
  }

  public void setWordCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORDCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ALTERNATE_URL:
      if (value == null) {
        unsetAlternateURL();
      } else {
        setAlternateURL((String)value);
      }
      break;

    case ARTICLE_ABSTRACT:
      if (value == null) {
        unsetArticleAbstract();
      } else {
        setArticleAbstract((String)value);
      }
      break;

    case AUTHOR_BIOGRAPHY:
      if (value == null) {
        unsetAuthorBiography();
      } else {
        setAuthorBiography((String)value);
      }
      break;

    case BANNER:
      if (value == null) {
        unsetBanner();
      } else {
        setBanner((String)value);
      }
      break;

    case BIOGRAPHICAL_CATEGORY_LIST:
      if (value == null) {
        unsetBiographicalCategoryList();
      } else {
        setBiographicalCategoryList((List<String>)value);
      }
      break;

    case COLUMN_NAME:
      if (value == null) {
        unsetColumnName();
      } else {
        setColumnName((String)value);
      }
      break;

    case COLUMN_NUMBER:
      if (value == null) {
        unsetColumnNumber();
      } else {
        setColumnNumber((Integer)value);
      }
      break;

    case CORRECTION_DATE:
      if (value == null) {
        unsetCorrectionDate();
      } else {
        setCorrectionDate((Long)value);
      }
      break;

    case CORRECTION_TEXT:
      if (value == null) {
        unsetCorrectionText();
      } else {
        setCorrectionText((String)value);
      }
      break;

    case CREDIT:
      if (value == null) {
        unsetCredit();
      } else {
        setCredit((String)value);
      }
      break;

    case DAY_OF_WEEK:
      if (value == null) {
        unsetDayOfWeek();
      } else {
        setDayOfWeek((String)value);
      }
      break;

    case DESCRIPTOR_LIST:
      if (value == null) {
        unsetDescriptorList();
      } else {
        setDescriptorList((List<String>)value);
      }
      break;

    case FEATURE_PAGE:
      if (value == null) {
        unsetFeaturePage();
      } else {
        setFeaturePage((String)value);
      }
      break;

    case GENERAL_ONLINE_DESCRIPTOR_LIST:
      if (value == null) {
        unsetGeneralOnlineDescriptorList();
      } else {
        setGeneralOnlineDescriptorList((List<String>)value);
      }
      break;

    case GUID:
      if (value == null) {
        unsetGuid();
      } else {
        setGuid((Integer)value);
      }
      break;

    case KICKER:
      if (value == null) {
        unsetKicker();
      } else {
        setKicker((String)value);
      }
      break;

    case LEAD_PARAGRAPH_LIST:
      if (value == null) {
        unsetLeadParagraphList();
      } else {
        setLeadParagraphList((List<String>)value);
      }
      break;

    case LOCATION_LIST:
      if (value == null) {
        unsetLocationList();
      } else {
        setLocationList((List<String>)value);
      }
      break;

    case NAME_LIST:
      if (value == null) {
        unsetNameList();
      } else {
        setNameList((List<String>)value);
      }
      break;

    case NEWS_DESK:
      if (value == null) {
        unsetNewsDesk();
      } else {
        setNewsDesk((String)value);
      }
      break;

    case NORMALIZED_BYLINE:
      if (value == null) {
        unsetNormalizedByline();
      } else {
        setNormalizedByline((String)value);
      }
      break;

    case ONLINE_DESCRIPTOR_LIST:
      if (value == null) {
        unsetOnlineDescriptorList();
      } else {
        setOnlineDescriptorList((List<String>)value);
      }
      break;

    case ONLINE_HEADLINE:
      if (value == null) {
        unsetOnlineHeadline();
      } else {
        setOnlineHeadline((String)value);
      }
      break;

    case ONLINE_LEAD_PARAGRAPH:
      if (value == null) {
        unsetOnlineLeadParagraph();
      } else {
        setOnlineLeadParagraph((String)value);
      }
      break;

    case ONLINE_LOCATION_LIST:
      if (value == null) {
        unsetOnlineLocationList();
      } else {
        setOnlineLocationList((List<String>)value);
      }
      break;

    case ONLINE_ORGANIZATION_LIST:
      if (value == null) {
        unsetOnlineOrganizationList();
      } else {
        setOnlineOrganizationList((List<String>)value);
      }
      break;

    case ONLINE_PEOPLE:
      if (value == null) {
        unsetOnlinePeople();
      } else {
        setOnlinePeople((List<String>)value);
      }
      break;

    case ONLINE_SECTION_LIST:
      if (value == null) {
        unsetOnlineSectionList();
      } else {
        setOnlineSectionList((List<String>)value);
      }
      break;

    case ONLINE_TITLE_LIST:
      if (value == null) {
        unsetOnlineTitleList();
      } else {
        setOnlineTitleList((List<String>)value);
      }
      break;

    case ORGANIZATION_LIST:
      if (value == null) {
        unsetOrganizationList();
      } else {
        setOrganizationList((List<String>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case PEOPLE_LIST:
      if (value == null) {
        unsetPeopleList();
      } else {
        setPeopleList((List<String>)value);
      }
      break;

    case PUBLICATION_DATE:
      if (value == null) {
        unsetPublicationDate();
      } else {
        setPublicationDate((Long)value);
      }
      break;

    case PUBLICATION_DAY_OF_MONTH:
      if (value == null) {
        unsetPublicationDayOfMonth();
      } else {
        setPublicationDayOfMonth((Integer)value);
      }
      break;

    case PUBLICATION_MONTH:
      if (value == null) {
        unsetPublicationMonth();
      } else {
        setPublicationMonth((Integer)value);
      }
      break;

    case PUBLICATION_YEAR:
      if (value == null) {
        unsetPublicationYear();
      } else {
        setPublicationYear((Integer)value);
      }
      break;

    case SECTION:
      if (value == null) {
        unsetSection();
      } else {
        setSection((String)value);
      }
      break;

    case SERIES_NAME:
      if (value == null) {
        unsetSeriesName();
      } else {
        setSeriesName((String)value);
      }
      break;

    case SLUG:
      if (value == null) {
        unsetSlug();
      } else {
        setSlug((String)value);
      }
      break;

    case TAXONOMIC_CLASSIFIER_LIST:
      if (value == null) {
        unsetTaxonomicClassifierList();
      } else {
        setTaxonomicClassifierList((List<String>)value);
      }
      break;

    case TITLE_LIST:
      if (value == null) {
        unsetTitleList();
      } else {
        setTitleList((List<String>)value);
      }
      break;

    case TYPES_OF_MATERIAL_LIST:
      if (value == null) {
        unsetTypesOfMaterialList();
      } else {
        setTypesOfMaterialList((List<String>)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case WORD_COUNT:
      if (value == null) {
        unsetWordCount();
      } else {
        setWordCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ALTERNATE_URL:
      return getAlternateURL();

    case ARTICLE_ABSTRACT:
      return getArticleAbstract();

    case AUTHOR_BIOGRAPHY:
      return getAuthorBiography();

    case BANNER:
      return getBanner();

    case BIOGRAPHICAL_CATEGORY_LIST:
      return getBiographicalCategoryList();

    case COLUMN_NAME:
      return getColumnName();

    case COLUMN_NUMBER:
      return getColumnNumber();

    case CORRECTION_DATE:
      return getCorrectionDate();

    case CORRECTION_TEXT:
      return getCorrectionText();

    case CREDIT:
      return getCredit();

    case DAY_OF_WEEK:
      return getDayOfWeek();

    case DESCRIPTOR_LIST:
      return getDescriptorList();

    case FEATURE_PAGE:
      return getFeaturePage();

    case GENERAL_ONLINE_DESCRIPTOR_LIST:
      return getGeneralOnlineDescriptorList();

    case GUID:
      return getGuid();

    case KICKER:
      return getKicker();

    case LEAD_PARAGRAPH_LIST:
      return getLeadParagraphList();

    case LOCATION_LIST:
      return getLocationList();

    case NAME_LIST:
      return getNameList();

    case NEWS_DESK:
      return getNewsDesk();

    case NORMALIZED_BYLINE:
      return getNormalizedByline();

    case ONLINE_DESCRIPTOR_LIST:
      return getOnlineDescriptorList();

    case ONLINE_HEADLINE:
      return getOnlineHeadline();

    case ONLINE_LEAD_PARAGRAPH:
      return getOnlineLeadParagraph();

    case ONLINE_LOCATION_LIST:
      return getOnlineLocationList();

    case ONLINE_ORGANIZATION_LIST:
      return getOnlineOrganizationList();

    case ONLINE_PEOPLE:
      return getOnlinePeople();

    case ONLINE_SECTION_LIST:
      return getOnlineSectionList();

    case ONLINE_TITLE_LIST:
      return getOnlineTitleList();

    case ORGANIZATION_LIST:
      return getOrganizationList();

    case PAGE:
      return getPage();

    case PEOPLE_LIST:
      return getPeopleList();

    case PUBLICATION_DATE:
      return getPublicationDate();

    case PUBLICATION_DAY_OF_MONTH:
      return getPublicationDayOfMonth();

    case PUBLICATION_MONTH:
      return getPublicationMonth();

    case PUBLICATION_YEAR:
      return getPublicationYear();

    case SECTION:
      return getSection();

    case SERIES_NAME:
      return getSeriesName();

    case SLUG:
      return getSlug();

    case TAXONOMIC_CLASSIFIER_LIST:
      return getTaxonomicClassifierList();

    case TITLE_LIST:
      return getTitleList();

    case TYPES_OF_MATERIAL_LIST:
      return getTypesOfMaterialList();

    case URL:
      return getUrl();

    case WORD_COUNT:
      return getWordCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ALTERNATE_URL:
      return isSetAlternateURL();
    case ARTICLE_ABSTRACT:
      return isSetArticleAbstract();
    case AUTHOR_BIOGRAPHY:
      return isSetAuthorBiography();
    case BANNER:
      return isSetBanner();
    case BIOGRAPHICAL_CATEGORY_LIST:
      return isSetBiographicalCategoryList();
    case COLUMN_NAME:
      return isSetColumnName();
    case COLUMN_NUMBER:
      return isSetColumnNumber();
    case CORRECTION_DATE:
      return isSetCorrectionDate();
    case CORRECTION_TEXT:
      return isSetCorrectionText();
    case CREDIT:
      return isSetCredit();
    case DAY_OF_WEEK:
      return isSetDayOfWeek();
    case DESCRIPTOR_LIST:
      return isSetDescriptorList();
    case FEATURE_PAGE:
      return isSetFeaturePage();
    case GENERAL_ONLINE_DESCRIPTOR_LIST:
      return isSetGeneralOnlineDescriptorList();
    case GUID:
      return isSetGuid();
    case KICKER:
      return isSetKicker();
    case LEAD_PARAGRAPH_LIST:
      return isSetLeadParagraphList();
    case LOCATION_LIST:
      return isSetLocationList();
    case NAME_LIST:
      return isSetNameList();
    case NEWS_DESK:
      return isSetNewsDesk();
    case NORMALIZED_BYLINE:
      return isSetNormalizedByline();
    case ONLINE_DESCRIPTOR_LIST:
      return isSetOnlineDescriptorList();
    case ONLINE_HEADLINE:
      return isSetOnlineHeadline();
    case ONLINE_LEAD_PARAGRAPH:
      return isSetOnlineLeadParagraph();
    case ONLINE_LOCATION_LIST:
      return isSetOnlineLocationList();
    case ONLINE_ORGANIZATION_LIST:
      return isSetOnlineOrganizationList();
    case ONLINE_PEOPLE:
      return isSetOnlinePeople();
    case ONLINE_SECTION_LIST:
      return isSetOnlineSectionList();
    case ONLINE_TITLE_LIST:
      return isSetOnlineTitleList();
    case ORGANIZATION_LIST:
      return isSetOrganizationList();
    case PAGE:
      return isSetPage();
    case PEOPLE_LIST:
      return isSetPeopleList();
    case PUBLICATION_DATE:
      return isSetPublicationDate();
    case PUBLICATION_DAY_OF_MONTH:
      return isSetPublicationDayOfMonth();
    case PUBLICATION_MONTH:
      return isSetPublicationMonth();
    case PUBLICATION_YEAR:
      return isSetPublicationYear();
    case SECTION:
      return isSetSection();
    case SERIES_NAME:
      return isSetSeriesName();
    case SLUG:
      return isSetSlug();
    case TAXONOMIC_CLASSIFIER_LIST:
      return isSetTaxonomicClassifierList();
    case TITLE_LIST:
      return isSetTitleList();
    case TYPES_OF_MATERIAL_LIST:
      return isSetTypesOfMaterialList();
    case URL:
      return isSetUrl();
    case WORD_COUNT:
      return isSetWordCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NITFInfo)
      return this.equals((NITFInfo)that);
    return false;
  }

  public boolean equals(NITFInfo that) {
    if (that == null)
      return false;

    boolean this_present_alternateURL = true && this.isSetAlternateURL();
    boolean that_present_alternateURL = true && that.isSetAlternateURL();
    if (this_present_alternateURL || that_present_alternateURL) {
      if (!(this_present_alternateURL && that_present_alternateURL))
        return false;
      if (!this.alternateURL.equals(that.alternateURL))
        return false;
    }

    boolean this_present_articleAbstract = true && this.isSetArticleAbstract();
    boolean that_present_articleAbstract = true && that.isSetArticleAbstract();
    if (this_present_articleAbstract || that_present_articleAbstract) {
      if (!(this_present_articleAbstract && that_present_articleAbstract))
        return false;
      if (!this.articleAbstract.equals(that.articleAbstract))
        return false;
    }

    boolean this_present_authorBiography = true && this.isSetAuthorBiography();
    boolean that_present_authorBiography = true && that.isSetAuthorBiography();
    if (this_present_authorBiography || that_present_authorBiography) {
      if (!(this_present_authorBiography && that_present_authorBiography))
        return false;
      if (!this.authorBiography.equals(that.authorBiography))
        return false;
    }

    boolean this_present_banner = true && this.isSetBanner();
    boolean that_present_banner = true && that.isSetBanner();
    if (this_present_banner || that_present_banner) {
      if (!(this_present_banner && that_present_banner))
        return false;
      if (!this.banner.equals(that.banner))
        return false;
    }

    boolean this_present_biographicalCategoryList = true && this.isSetBiographicalCategoryList();
    boolean that_present_biographicalCategoryList = true && that.isSetBiographicalCategoryList();
    if (this_present_biographicalCategoryList || that_present_biographicalCategoryList) {
      if (!(this_present_biographicalCategoryList && that_present_biographicalCategoryList))
        return false;
      if (!this.biographicalCategoryList.equals(that.biographicalCategoryList))
        return false;
    }

    boolean this_present_columnName = true && this.isSetColumnName();
    boolean that_present_columnName = true && that.isSetColumnName();
    if (this_present_columnName || that_present_columnName) {
      if (!(this_present_columnName && that_present_columnName))
        return false;
      if (!this.columnName.equals(that.columnName))
        return false;
    }

    boolean this_present_columnNumber = true && this.isSetColumnNumber();
    boolean that_present_columnNumber = true && that.isSetColumnNumber();
    if (this_present_columnNumber || that_present_columnNumber) {
      if (!(this_present_columnNumber && that_present_columnNumber))
        return false;
      if (this.columnNumber != that.columnNumber)
        return false;
    }

    boolean this_present_correctionDate = true && this.isSetCorrectionDate();
    boolean that_present_correctionDate = true && that.isSetCorrectionDate();
    if (this_present_correctionDate || that_present_correctionDate) {
      if (!(this_present_correctionDate && that_present_correctionDate))
        return false;
      if (this.correctionDate != that.correctionDate)
        return false;
    }

    boolean this_present_correctionText = true && this.isSetCorrectionText();
    boolean that_present_correctionText = true && that.isSetCorrectionText();
    if (this_present_correctionText || that_present_correctionText) {
      if (!(this_present_correctionText && that_present_correctionText))
        return false;
      if (!this.correctionText.equals(that.correctionText))
        return false;
    }

    boolean this_present_credit = true && this.isSetCredit();
    boolean that_present_credit = true && that.isSetCredit();
    if (this_present_credit || that_present_credit) {
      if (!(this_present_credit && that_present_credit))
        return false;
      if (!this.credit.equals(that.credit))
        return false;
    }

    boolean this_present_dayOfWeek = true && this.isSetDayOfWeek();
    boolean that_present_dayOfWeek = true && that.isSetDayOfWeek();
    if (this_present_dayOfWeek || that_present_dayOfWeek) {
      if (!(this_present_dayOfWeek && that_present_dayOfWeek))
        return false;
      if (!this.dayOfWeek.equals(that.dayOfWeek))
        return false;
    }

    boolean this_present_descriptorList = true && this.isSetDescriptorList();
    boolean that_present_descriptorList = true && that.isSetDescriptorList();
    if (this_present_descriptorList || that_present_descriptorList) {
      if (!(this_present_descriptorList && that_present_descriptorList))
        return false;
      if (!this.descriptorList.equals(that.descriptorList))
        return false;
    }

    boolean this_present_featurePage = true && this.isSetFeaturePage();
    boolean that_present_featurePage = true && that.isSetFeaturePage();
    if (this_present_featurePage || that_present_featurePage) {
      if (!(this_present_featurePage && that_present_featurePage))
        return false;
      if (!this.featurePage.equals(that.featurePage))
        return false;
    }

    boolean this_present_generalOnlineDescriptorList = true && this.isSetGeneralOnlineDescriptorList();
    boolean that_present_generalOnlineDescriptorList = true && that.isSetGeneralOnlineDescriptorList();
    if (this_present_generalOnlineDescriptorList || that_present_generalOnlineDescriptorList) {
      if (!(this_present_generalOnlineDescriptorList && that_present_generalOnlineDescriptorList))
        return false;
      if (!this.generalOnlineDescriptorList.equals(that.generalOnlineDescriptorList))
        return false;
    }

    boolean this_present_guid = true && this.isSetGuid();
    boolean that_present_guid = true && that.isSetGuid();
    if (this_present_guid || that_present_guid) {
      if (!(this_present_guid && that_present_guid))
        return false;
      if (this.guid != that.guid)
        return false;
    }

    boolean this_present_kicker = true && this.isSetKicker();
    boolean that_present_kicker = true && that.isSetKicker();
    if (this_present_kicker || that_present_kicker) {
      if (!(this_present_kicker && that_present_kicker))
        return false;
      if (!this.kicker.equals(that.kicker))
        return false;
    }

    boolean this_present_leadParagraphList = true && this.isSetLeadParagraphList();
    boolean that_present_leadParagraphList = true && that.isSetLeadParagraphList();
    if (this_present_leadParagraphList || that_present_leadParagraphList) {
      if (!(this_present_leadParagraphList && that_present_leadParagraphList))
        return false;
      if (!this.leadParagraphList.equals(that.leadParagraphList))
        return false;
    }

    boolean this_present_locationList = true && this.isSetLocationList();
    boolean that_present_locationList = true && that.isSetLocationList();
    if (this_present_locationList || that_present_locationList) {
      if (!(this_present_locationList && that_present_locationList))
        return false;
      if (!this.locationList.equals(that.locationList))
        return false;
    }

    boolean this_present_nameList = true && this.isSetNameList();
    boolean that_present_nameList = true && that.isSetNameList();
    if (this_present_nameList || that_present_nameList) {
      if (!(this_present_nameList && that_present_nameList))
        return false;
      if (!this.nameList.equals(that.nameList))
        return false;
    }

    boolean this_present_newsDesk = true && this.isSetNewsDesk();
    boolean that_present_newsDesk = true && that.isSetNewsDesk();
    if (this_present_newsDesk || that_present_newsDesk) {
      if (!(this_present_newsDesk && that_present_newsDesk))
        return false;
      if (!this.newsDesk.equals(that.newsDesk))
        return false;
    }

    boolean this_present_normalizedByline = true && this.isSetNormalizedByline();
    boolean that_present_normalizedByline = true && that.isSetNormalizedByline();
    if (this_present_normalizedByline || that_present_normalizedByline) {
      if (!(this_present_normalizedByline && that_present_normalizedByline))
        return false;
      if (!this.normalizedByline.equals(that.normalizedByline))
        return false;
    }

    boolean this_present_onlineDescriptorList = true && this.isSetOnlineDescriptorList();
    boolean that_present_onlineDescriptorList = true && that.isSetOnlineDescriptorList();
    if (this_present_onlineDescriptorList || that_present_onlineDescriptorList) {
      if (!(this_present_onlineDescriptorList && that_present_onlineDescriptorList))
        return false;
      if (!this.onlineDescriptorList.equals(that.onlineDescriptorList))
        return false;
    }

    boolean this_present_onlineHeadline = true && this.isSetOnlineHeadline();
    boolean that_present_onlineHeadline = true && that.isSetOnlineHeadline();
    if (this_present_onlineHeadline || that_present_onlineHeadline) {
      if (!(this_present_onlineHeadline && that_present_onlineHeadline))
        return false;
      if (!this.onlineHeadline.equals(that.onlineHeadline))
        return false;
    }

    boolean this_present_onlineLeadParagraph = true && this.isSetOnlineLeadParagraph();
    boolean that_present_onlineLeadParagraph = true && that.isSetOnlineLeadParagraph();
    if (this_present_onlineLeadParagraph || that_present_onlineLeadParagraph) {
      if (!(this_present_onlineLeadParagraph && that_present_onlineLeadParagraph))
        return false;
      if (!this.onlineLeadParagraph.equals(that.onlineLeadParagraph))
        return false;
    }

    boolean this_present_onlineLocationList = true && this.isSetOnlineLocationList();
    boolean that_present_onlineLocationList = true && that.isSetOnlineLocationList();
    if (this_present_onlineLocationList || that_present_onlineLocationList) {
      if (!(this_present_onlineLocationList && that_present_onlineLocationList))
        return false;
      if (!this.onlineLocationList.equals(that.onlineLocationList))
        return false;
    }

    boolean this_present_onlineOrganizationList = true && this.isSetOnlineOrganizationList();
    boolean that_present_onlineOrganizationList = true && that.isSetOnlineOrganizationList();
    if (this_present_onlineOrganizationList || that_present_onlineOrganizationList) {
      if (!(this_present_onlineOrganizationList && that_present_onlineOrganizationList))
        return false;
      if (!this.onlineOrganizationList.equals(that.onlineOrganizationList))
        return false;
    }

    boolean this_present_onlinePeople = true && this.isSetOnlinePeople();
    boolean that_present_onlinePeople = true && that.isSetOnlinePeople();
    if (this_present_onlinePeople || that_present_onlinePeople) {
      if (!(this_present_onlinePeople && that_present_onlinePeople))
        return false;
      if (!this.onlinePeople.equals(that.onlinePeople))
        return false;
    }

    boolean this_present_onlineSectionList = true && this.isSetOnlineSectionList();
    boolean that_present_onlineSectionList = true && that.isSetOnlineSectionList();
    if (this_present_onlineSectionList || that_present_onlineSectionList) {
      if (!(this_present_onlineSectionList && that_present_onlineSectionList))
        return false;
      if (!this.onlineSectionList.equals(that.onlineSectionList))
        return false;
    }

    boolean this_present_onlineTitleList = true && this.isSetOnlineTitleList();
    boolean that_present_onlineTitleList = true && that.isSetOnlineTitleList();
    if (this_present_onlineTitleList || that_present_onlineTitleList) {
      if (!(this_present_onlineTitleList && that_present_onlineTitleList))
        return false;
      if (!this.onlineTitleList.equals(that.onlineTitleList))
        return false;
    }

    boolean this_present_organizationList = true && this.isSetOrganizationList();
    boolean that_present_organizationList = true && that.isSetOrganizationList();
    if (this_present_organizationList || that_present_organizationList) {
      if (!(this_present_organizationList && that_present_organizationList))
        return false;
      if (!this.organizationList.equals(that.organizationList))
        return false;
    }

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_peopleList = true && this.isSetPeopleList();
    boolean that_present_peopleList = true && that.isSetPeopleList();
    if (this_present_peopleList || that_present_peopleList) {
      if (!(this_present_peopleList && that_present_peopleList))
        return false;
      if (!this.peopleList.equals(that.peopleList))
        return false;
    }

    boolean this_present_publicationDate = true && this.isSetPublicationDate();
    boolean that_present_publicationDate = true && that.isSetPublicationDate();
    if (this_present_publicationDate || that_present_publicationDate) {
      if (!(this_present_publicationDate && that_present_publicationDate))
        return false;
      if (this.publicationDate != that.publicationDate)
        return false;
    }

    boolean this_present_publicationDayOfMonth = true && this.isSetPublicationDayOfMonth();
    boolean that_present_publicationDayOfMonth = true && that.isSetPublicationDayOfMonth();
    if (this_present_publicationDayOfMonth || that_present_publicationDayOfMonth) {
      if (!(this_present_publicationDayOfMonth && that_present_publicationDayOfMonth))
        return false;
      if (this.publicationDayOfMonth != that.publicationDayOfMonth)
        return false;
    }

    boolean this_present_publicationMonth = true && this.isSetPublicationMonth();
    boolean that_present_publicationMonth = true && that.isSetPublicationMonth();
    if (this_present_publicationMonth || that_present_publicationMonth) {
      if (!(this_present_publicationMonth && that_present_publicationMonth))
        return false;
      if (this.publicationMonth != that.publicationMonth)
        return false;
    }

    boolean this_present_publicationYear = true && this.isSetPublicationYear();
    boolean that_present_publicationYear = true && that.isSetPublicationYear();
    if (this_present_publicationYear || that_present_publicationYear) {
      if (!(this_present_publicationYear && that_present_publicationYear))
        return false;
      if (this.publicationYear != that.publicationYear)
        return false;
    }

    boolean this_present_section = true && this.isSetSection();
    boolean that_present_section = true && that.isSetSection();
    if (this_present_section || that_present_section) {
      if (!(this_present_section && that_present_section))
        return false;
      if (!this.section.equals(that.section))
        return false;
    }

    boolean this_present_seriesName = true && this.isSetSeriesName();
    boolean that_present_seriesName = true && that.isSetSeriesName();
    if (this_present_seriesName || that_present_seriesName) {
      if (!(this_present_seriesName && that_present_seriesName))
        return false;
      if (!this.seriesName.equals(that.seriesName))
        return false;
    }

    boolean this_present_slug = true && this.isSetSlug();
    boolean that_present_slug = true && that.isSetSlug();
    if (this_present_slug || that_present_slug) {
      if (!(this_present_slug && that_present_slug))
        return false;
      if (!this.slug.equals(that.slug))
        return false;
    }

    boolean this_present_taxonomicClassifierList = true && this.isSetTaxonomicClassifierList();
    boolean that_present_taxonomicClassifierList = true && that.isSetTaxonomicClassifierList();
    if (this_present_taxonomicClassifierList || that_present_taxonomicClassifierList) {
      if (!(this_present_taxonomicClassifierList && that_present_taxonomicClassifierList))
        return false;
      if (!this.taxonomicClassifierList.equals(that.taxonomicClassifierList))
        return false;
    }

    boolean this_present_titleList = true && this.isSetTitleList();
    boolean that_present_titleList = true && that.isSetTitleList();
    if (this_present_titleList || that_present_titleList) {
      if (!(this_present_titleList && that_present_titleList))
        return false;
      if (!this.titleList.equals(that.titleList))
        return false;
    }

    boolean this_present_typesOfMaterialList = true && this.isSetTypesOfMaterialList();
    boolean that_present_typesOfMaterialList = true && that.isSetTypesOfMaterialList();
    if (this_present_typesOfMaterialList || that_present_typesOfMaterialList) {
      if (!(this_present_typesOfMaterialList && that_present_typesOfMaterialList))
        return false;
      if (!this.typesOfMaterialList.equals(that.typesOfMaterialList))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_wordCount = true && this.isSetWordCount();
    boolean that_present_wordCount = true && that.isSetWordCount();
    if (this_present_wordCount || that_present_wordCount) {
      if (!(this_present_wordCount && that_present_wordCount))
        return false;
      if (this.wordCount != that.wordCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_alternateURL = true && (isSetAlternateURL());
    list.add(present_alternateURL);
    if (present_alternateURL)
      list.add(alternateURL);

    boolean present_articleAbstract = true && (isSetArticleAbstract());
    list.add(present_articleAbstract);
    if (present_articleAbstract)
      list.add(articleAbstract);

    boolean present_authorBiography = true && (isSetAuthorBiography());
    list.add(present_authorBiography);
    if (present_authorBiography)
      list.add(authorBiography);

    boolean present_banner = true && (isSetBanner());
    list.add(present_banner);
    if (present_banner)
      list.add(banner);

    boolean present_biographicalCategoryList = true && (isSetBiographicalCategoryList());
    list.add(present_biographicalCategoryList);
    if (present_biographicalCategoryList)
      list.add(biographicalCategoryList);

    boolean present_columnName = true && (isSetColumnName());
    list.add(present_columnName);
    if (present_columnName)
      list.add(columnName);

    boolean present_columnNumber = true && (isSetColumnNumber());
    list.add(present_columnNumber);
    if (present_columnNumber)
      list.add(columnNumber);

    boolean present_correctionDate = true && (isSetCorrectionDate());
    list.add(present_correctionDate);
    if (present_correctionDate)
      list.add(correctionDate);

    boolean present_correctionText = true && (isSetCorrectionText());
    list.add(present_correctionText);
    if (present_correctionText)
      list.add(correctionText);

    boolean present_credit = true && (isSetCredit());
    list.add(present_credit);
    if (present_credit)
      list.add(credit);

    boolean present_dayOfWeek = true && (isSetDayOfWeek());
    list.add(present_dayOfWeek);
    if (present_dayOfWeek)
      list.add(dayOfWeek);

    boolean present_descriptorList = true && (isSetDescriptorList());
    list.add(present_descriptorList);
    if (present_descriptorList)
      list.add(descriptorList);

    boolean present_featurePage = true && (isSetFeaturePage());
    list.add(present_featurePage);
    if (present_featurePage)
      list.add(featurePage);

    boolean present_generalOnlineDescriptorList = true && (isSetGeneralOnlineDescriptorList());
    list.add(present_generalOnlineDescriptorList);
    if (present_generalOnlineDescriptorList)
      list.add(generalOnlineDescriptorList);

    boolean present_guid = true && (isSetGuid());
    list.add(present_guid);
    if (present_guid)
      list.add(guid);

    boolean present_kicker = true && (isSetKicker());
    list.add(present_kicker);
    if (present_kicker)
      list.add(kicker);

    boolean present_leadParagraphList = true && (isSetLeadParagraphList());
    list.add(present_leadParagraphList);
    if (present_leadParagraphList)
      list.add(leadParagraphList);

    boolean present_locationList = true && (isSetLocationList());
    list.add(present_locationList);
    if (present_locationList)
      list.add(locationList);

    boolean present_nameList = true && (isSetNameList());
    list.add(present_nameList);
    if (present_nameList)
      list.add(nameList);

    boolean present_newsDesk = true && (isSetNewsDesk());
    list.add(present_newsDesk);
    if (present_newsDesk)
      list.add(newsDesk);

    boolean present_normalizedByline = true && (isSetNormalizedByline());
    list.add(present_normalizedByline);
    if (present_normalizedByline)
      list.add(normalizedByline);

    boolean present_onlineDescriptorList = true && (isSetOnlineDescriptorList());
    list.add(present_onlineDescriptorList);
    if (present_onlineDescriptorList)
      list.add(onlineDescriptorList);

    boolean present_onlineHeadline = true && (isSetOnlineHeadline());
    list.add(present_onlineHeadline);
    if (present_onlineHeadline)
      list.add(onlineHeadline);

    boolean present_onlineLeadParagraph = true && (isSetOnlineLeadParagraph());
    list.add(present_onlineLeadParagraph);
    if (present_onlineLeadParagraph)
      list.add(onlineLeadParagraph);

    boolean present_onlineLocationList = true && (isSetOnlineLocationList());
    list.add(present_onlineLocationList);
    if (present_onlineLocationList)
      list.add(onlineLocationList);

    boolean present_onlineOrganizationList = true && (isSetOnlineOrganizationList());
    list.add(present_onlineOrganizationList);
    if (present_onlineOrganizationList)
      list.add(onlineOrganizationList);

    boolean present_onlinePeople = true && (isSetOnlinePeople());
    list.add(present_onlinePeople);
    if (present_onlinePeople)
      list.add(onlinePeople);

    boolean present_onlineSectionList = true && (isSetOnlineSectionList());
    list.add(present_onlineSectionList);
    if (present_onlineSectionList)
      list.add(onlineSectionList);

    boolean present_onlineTitleList = true && (isSetOnlineTitleList());
    list.add(present_onlineTitleList);
    if (present_onlineTitleList)
      list.add(onlineTitleList);

    boolean present_organizationList = true && (isSetOrganizationList());
    list.add(present_organizationList);
    if (present_organizationList)
      list.add(organizationList);

    boolean present_page = true && (isSetPage());
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_peopleList = true && (isSetPeopleList());
    list.add(present_peopleList);
    if (present_peopleList)
      list.add(peopleList);

    boolean present_publicationDate = true && (isSetPublicationDate());
    list.add(present_publicationDate);
    if (present_publicationDate)
      list.add(publicationDate);

    boolean present_publicationDayOfMonth = true && (isSetPublicationDayOfMonth());
    list.add(present_publicationDayOfMonth);
    if (present_publicationDayOfMonth)
      list.add(publicationDayOfMonth);

    boolean present_publicationMonth = true && (isSetPublicationMonth());
    list.add(present_publicationMonth);
    if (present_publicationMonth)
      list.add(publicationMonth);

    boolean present_publicationYear = true && (isSetPublicationYear());
    list.add(present_publicationYear);
    if (present_publicationYear)
      list.add(publicationYear);

    boolean present_section = true && (isSetSection());
    list.add(present_section);
    if (present_section)
      list.add(section);

    boolean present_seriesName = true && (isSetSeriesName());
    list.add(present_seriesName);
    if (present_seriesName)
      list.add(seriesName);

    boolean present_slug = true && (isSetSlug());
    list.add(present_slug);
    if (present_slug)
      list.add(slug);

    boolean present_taxonomicClassifierList = true && (isSetTaxonomicClassifierList());
    list.add(present_taxonomicClassifierList);
    if (present_taxonomicClassifierList)
      list.add(taxonomicClassifierList);

    boolean present_titleList = true && (isSetTitleList());
    list.add(present_titleList);
    if (present_titleList)
      list.add(titleList);

    boolean present_typesOfMaterialList = true && (isSetTypesOfMaterialList());
    list.add(present_typesOfMaterialList);
    if (present_typesOfMaterialList)
      list.add(typesOfMaterialList);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_wordCount = true && (isSetWordCount());
    list.add(present_wordCount);
    if (present_wordCount)
      list.add(wordCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(NITFInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAlternateURL()).compareTo(other.isSetAlternateURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlternateURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alternateURL, other.alternateURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleAbstract()).compareTo(other.isSetArticleAbstract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleAbstract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleAbstract, other.articleAbstract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorBiography()).compareTo(other.isSetAuthorBiography());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorBiography()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorBiography, other.authorBiography);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBanner()).compareTo(other.isSetBanner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBanner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.banner, other.banner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBiographicalCategoryList()).compareTo(other.isSetBiographicalCategoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBiographicalCategoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.biographicalCategoryList, other.biographicalCategoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnName()).compareTo(other.isSetColumnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnName, other.columnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnNumber()).compareTo(other.isSetColumnNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnNumber, other.columnNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectionDate()).compareTo(other.isSetCorrectionDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectionDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctionDate, other.correctionDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCorrectionText()).compareTo(other.isSetCorrectionText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCorrectionText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.correctionText, other.correctionText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredit()).compareTo(other.isSetCredit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credit, other.credit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDayOfWeek()).compareTo(other.isSetDayOfWeek());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayOfWeek()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayOfWeek, other.dayOfWeek);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescriptorList()).compareTo(other.isSetDescriptorList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescriptorList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descriptorList, other.descriptorList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeaturePage()).compareTo(other.isSetFeaturePage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeaturePage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.featurePage, other.featurePage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeneralOnlineDescriptorList()).compareTo(other.isSetGeneralOnlineDescriptorList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeneralOnlineDescriptorList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generalOnlineDescriptorList, other.generalOnlineDescriptorList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuid()).compareTo(other.isSetGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guid, other.guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKicker()).compareTo(other.isSetKicker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKicker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kicker, other.kicker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeadParagraphList()).compareTo(other.isSetLeadParagraphList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeadParagraphList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leadParagraphList, other.leadParagraphList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationList()).compareTo(other.isSetLocationList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationList, other.locationList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameList()).compareTo(other.isSetNameList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameList, other.nameList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewsDesk()).compareTo(other.isSetNewsDesk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewsDesk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsDesk, other.newsDesk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNormalizedByline()).compareTo(other.isSetNormalizedByline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNormalizedByline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.normalizedByline, other.normalizedByline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineDescriptorList()).compareTo(other.isSetOnlineDescriptorList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineDescriptorList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineDescriptorList, other.onlineDescriptorList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineHeadline()).compareTo(other.isSetOnlineHeadline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineHeadline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineHeadline, other.onlineHeadline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineLeadParagraph()).compareTo(other.isSetOnlineLeadParagraph());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineLeadParagraph()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineLeadParagraph, other.onlineLeadParagraph);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineLocationList()).compareTo(other.isSetOnlineLocationList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineLocationList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineLocationList, other.onlineLocationList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineOrganizationList()).compareTo(other.isSetOnlineOrganizationList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineOrganizationList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineOrganizationList, other.onlineOrganizationList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlinePeople()).compareTo(other.isSetOnlinePeople());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlinePeople()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlinePeople, other.onlinePeople);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineSectionList()).compareTo(other.isSetOnlineSectionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineSectionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineSectionList, other.onlineSectionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineTitleList()).compareTo(other.isSetOnlineTitleList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineTitleList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineTitleList, other.onlineTitleList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganizationList()).compareTo(other.isSetOrganizationList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganizationList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizationList, other.organizationList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeopleList()).compareTo(other.isSetPeopleList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeopleList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peopleList, other.peopleList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicationDate()).compareTo(other.isSetPublicationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicationDate, other.publicationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicationDayOfMonth()).compareTo(other.isSetPublicationDayOfMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicationDayOfMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicationDayOfMonth, other.publicationDayOfMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicationMonth()).compareTo(other.isSetPublicationMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicationMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicationMonth, other.publicationMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicationYear()).compareTo(other.isSetPublicationYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicationYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicationYear, other.publicationYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSection()).compareTo(other.isSetSection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.section, other.section);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeriesName()).compareTo(other.isSetSeriesName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeriesName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seriesName, other.seriesName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlug()).compareTo(other.isSetSlug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slug, other.slug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxonomicClassifierList()).compareTo(other.isSetTaxonomicClassifierList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxonomicClassifierList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxonomicClassifierList, other.taxonomicClassifierList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitleList()).compareTo(other.isSetTitleList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitleList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.titleList, other.titleList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTypesOfMaterialList()).compareTo(other.isSetTypesOfMaterialList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypesOfMaterialList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typesOfMaterialList, other.typesOfMaterialList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWordCount()).compareTo(other.isSetWordCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWordCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wordCount, other.wordCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NITFInfo(");
    boolean first = true;

    if (isSetAlternateURL()) {
      sb.append("alternateURL:");
      if (this.alternateURL == null) {
        sb.append("null");
      } else {
        sb.append(this.alternateURL);
      }
      first = false;
    }
    if (isSetArticleAbstract()) {
      if (!first) sb.append(", ");
      sb.append("articleAbstract:");
      if (this.articleAbstract == null) {
        sb.append("null");
      } else {
        sb.append(this.articleAbstract);
      }
      first = false;
    }
    if (isSetAuthorBiography()) {
      if (!first) sb.append(", ");
      sb.append("authorBiography:");
      if (this.authorBiography == null) {
        sb.append("null");
      } else {
        sb.append(this.authorBiography);
      }
      first = false;
    }
    if (isSetBanner()) {
      if (!first) sb.append(", ");
      sb.append("banner:");
      if (this.banner == null) {
        sb.append("null");
      } else {
        sb.append(this.banner);
      }
      first = false;
    }
    if (isSetBiographicalCategoryList()) {
      if (!first) sb.append(", ");
      sb.append("biographicalCategoryList:");
      if (this.biographicalCategoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.biographicalCategoryList);
      }
      first = false;
    }
    if (isSetColumnName()) {
      if (!first) sb.append(", ");
      sb.append("columnName:");
      if (this.columnName == null) {
        sb.append("null");
      } else {
        sb.append(this.columnName);
      }
      first = false;
    }
    if (isSetColumnNumber()) {
      if (!first) sb.append(", ");
      sb.append("columnNumber:");
      sb.append(this.columnNumber);
      first = false;
    }
    if (isSetCorrectionDate()) {
      if (!first) sb.append(", ");
      sb.append("correctionDate:");
      sb.append(this.correctionDate);
      first = false;
    }
    if (isSetCorrectionText()) {
      if (!first) sb.append(", ");
      sb.append("correctionText:");
      if (this.correctionText == null) {
        sb.append("null");
      } else {
        sb.append(this.correctionText);
      }
      first = false;
    }
    if (isSetCredit()) {
      if (!first) sb.append(", ");
      sb.append("credit:");
      if (this.credit == null) {
        sb.append("null");
      } else {
        sb.append(this.credit);
      }
      first = false;
    }
    if (isSetDayOfWeek()) {
      if (!first) sb.append(", ");
      sb.append("dayOfWeek:");
      if (this.dayOfWeek == null) {
        sb.append("null");
      } else {
        sb.append(this.dayOfWeek);
      }
      first = false;
    }
    if (isSetDescriptorList()) {
      if (!first) sb.append(", ");
      sb.append("descriptorList:");
      if (this.descriptorList == null) {
        sb.append("null");
      } else {
        sb.append(this.descriptorList);
      }
      first = false;
    }
    if (isSetFeaturePage()) {
      if (!first) sb.append(", ");
      sb.append("featurePage:");
      if (this.featurePage == null) {
        sb.append("null");
      } else {
        sb.append(this.featurePage);
      }
      first = false;
    }
    if (isSetGeneralOnlineDescriptorList()) {
      if (!first) sb.append(", ");
      sb.append("generalOnlineDescriptorList:");
      if (this.generalOnlineDescriptorList == null) {
        sb.append("null");
      } else {
        sb.append(this.generalOnlineDescriptorList);
      }
      first = false;
    }
    if (isSetGuid()) {
      if (!first) sb.append(", ");
      sb.append("guid:");
      sb.append(this.guid);
      first = false;
    }
    if (isSetKicker()) {
      if (!first) sb.append(", ");
      sb.append("kicker:");
      if (this.kicker == null) {
        sb.append("null");
      } else {
        sb.append(this.kicker);
      }
      first = false;
    }
    if (isSetLeadParagraphList()) {
      if (!first) sb.append(", ");
      sb.append("leadParagraphList:");
      if (this.leadParagraphList == null) {
        sb.append("null");
      } else {
        sb.append(this.leadParagraphList);
      }
      first = false;
    }
    if (isSetLocationList()) {
      if (!first) sb.append(", ");
      sb.append("locationList:");
      if (this.locationList == null) {
        sb.append("null");
      } else {
        sb.append(this.locationList);
      }
      first = false;
    }
    if (isSetNameList()) {
      if (!first) sb.append(", ");
      sb.append("nameList:");
      if (this.nameList == null) {
        sb.append("null");
      } else {
        sb.append(this.nameList);
      }
      first = false;
    }
    if (isSetNewsDesk()) {
      if (!first) sb.append(", ");
      sb.append("newsDesk:");
      if (this.newsDesk == null) {
        sb.append("null");
      } else {
        sb.append(this.newsDesk);
      }
      first = false;
    }
    if (isSetNormalizedByline()) {
      if (!first) sb.append(", ");
      sb.append("normalizedByline:");
      if (this.normalizedByline == null) {
        sb.append("null");
      } else {
        sb.append(this.normalizedByline);
      }
      first = false;
    }
    if (isSetOnlineDescriptorList()) {
      if (!first) sb.append(", ");
      sb.append("onlineDescriptorList:");
      if (this.onlineDescriptorList == null) {
        sb.append("null");
      } else {
        sb.append(this.onlineDescriptorList);
      }
      first = false;
    }
    if (isSetOnlineHeadline()) {
      if (!first) sb.append(", ");
      sb.append("onlineHeadline:");
      if (this.onlineHeadline == null) {
        sb.append("null");
      } else {
        sb.append(this.onlineHeadline);
      }
      first = false;
    }
    if (isSetOnlineLeadParagraph()) {
      if (!first) sb.append(", ");
      sb.append("onlineLeadParagraph:");
      if (this.onlineLeadParagraph == null) {
        sb.append("null");
      } else {
        sb.append(this.onlineLeadParagraph);
      }
      first = false;
    }
    if (isSetOnlineLocationList()) {
      if (!first) sb.append(", ");
      sb.append("onlineLocationList:");
      if (this.onlineLocationList == null) {
        sb.append("null");
      } else {
        sb.append(this.onlineLocationList);
      }
      first = false;
    }
    if (isSetOnlineOrganizationList()) {
      if (!first) sb.append(", ");
      sb.append("onlineOrganizationList:");
      if (this.onlineOrganizationList == null) {
        sb.append("null");
      } else {
        sb.append(this.onlineOrganizationList);
      }
      first = false;
    }
    if (isSetOnlinePeople()) {
      if (!first) sb.append(", ");
      sb.append("onlinePeople:");
      if (this.onlinePeople == null) {
        sb.append("null");
      } else {
        sb.append(this.onlinePeople);
      }
      first = false;
    }
    if (isSetOnlineSectionList()) {
      if (!first) sb.append(", ");
      sb.append("onlineSectionList:");
      if (this.onlineSectionList == null) {
        sb.append("null");
      } else {
        sb.append(this.onlineSectionList);
      }
      first = false;
    }
    if (isSetOnlineTitleList()) {
      if (!first) sb.append(", ");
      sb.append("onlineTitleList:");
      if (this.onlineTitleList == null) {
        sb.append("null");
      } else {
        sb.append(this.onlineTitleList);
      }
      first = false;
    }
    if (isSetOrganizationList()) {
      if (!first) sb.append(", ");
      sb.append("organizationList:");
      if (this.organizationList == null) {
        sb.append("null");
      } else {
        sb.append(this.organizationList);
      }
      first = false;
    }
    if (isSetPage()) {
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
    }
    if (isSetPeopleList()) {
      if (!first) sb.append(", ");
      sb.append("peopleList:");
      if (this.peopleList == null) {
        sb.append("null");
      } else {
        sb.append(this.peopleList);
      }
      first = false;
    }
    if (isSetPublicationDate()) {
      if (!first) sb.append(", ");
      sb.append("publicationDate:");
      sb.append(this.publicationDate);
      first = false;
    }
    if (isSetPublicationDayOfMonth()) {
      if (!first) sb.append(", ");
      sb.append("publicationDayOfMonth:");
      sb.append(this.publicationDayOfMonth);
      first = false;
    }
    if (isSetPublicationMonth()) {
      if (!first) sb.append(", ");
      sb.append("publicationMonth:");
      sb.append(this.publicationMonth);
      first = false;
    }
    if (isSetPublicationYear()) {
      if (!first) sb.append(", ");
      sb.append("publicationYear:");
      sb.append(this.publicationYear);
      first = false;
    }
    if (isSetSection()) {
      if (!first) sb.append(", ");
      sb.append("section:");
      if (this.section == null) {
        sb.append("null");
      } else {
        sb.append(this.section);
      }
      first = false;
    }
    if (isSetSeriesName()) {
      if (!first) sb.append(", ");
      sb.append("seriesName:");
      if (this.seriesName == null) {
        sb.append("null");
      } else {
        sb.append(this.seriesName);
      }
      first = false;
    }
    if (isSetSlug()) {
      if (!first) sb.append(", ");
      sb.append("slug:");
      if (this.slug == null) {
        sb.append("null");
      } else {
        sb.append(this.slug);
      }
      first = false;
    }
    if (isSetTaxonomicClassifierList()) {
      if (!first) sb.append(", ");
      sb.append("taxonomicClassifierList:");
      if (this.taxonomicClassifierList == null) {
        sb.append("null");
      } else {
        sb.append(this.taxonomicClassifierList);
      }
      first = false;
    }
    if (isSetTitleList()) {
      if (!first) sb.append(", ");
      sb.append("titleList:");
      if (this.titleList == null) {
        sb.append("null");
      } else {
        sb.append(this.titleList);
      }
      first = false;
    }
    if (isSetTypesOfMaterialList()) {
      if (!first) sb.append(", ");
      sb.append("typesOfMaterialList:");
      if (this.typesOfMaterialList == null) {
        sb.append("null");
      } else {
        sb.append(this.typesOfMaterialList);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetWordCount()) {
      if (!first) sb.append(", ");
      sb.append("wordCount:");
      sb.append(this.wordCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NITFInfoStandardSchemeFactory implements SchemeFactory {
    public NITFInfoStandardScheme getScheme() {
      return new NITFInfoStandardScheme();
    }
  }

  private static class NITFInfoStandardScheme extends StandardScheme<NITFInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NITFInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALTERNATE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alternateURL = iprot.readString();
              struct.setAlternateURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARTICLE_ABSTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.articleAbstract = iprot.readString();
              struct.setArticleAbstractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTHOR_BIOGRAPHY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorBiography = iprot.readString();
              struct.setAuthorBiographyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BANNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.banner = iprot.readString();
              struct.setBannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BIOGRAPHICAL_CATEGORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.biographicalCategoryList = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.biographicalCategoryList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setBiographicalCategoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnName = iprot.readString();
              struct.setColumnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COLUMN_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnNumber = iprot.readI32();
              struct.setColumnNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CORRECTION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.correctionDate = iprot.readI64();
              struct.setCorrectionDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CORRECTION_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.correctionText = iprot.readString();
              struct.setCorrectionTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.credit = iprot.readString();
              struct.setCreditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DAY_OF_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dayOfWeek = iprot.readString();
              struct.setDayOfWeekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DESCRIPTOR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.descriptorList = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.descriptorList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setDescriptorListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FEATURE_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.featurePage = iprot.readString();
              struct.setFeaturePageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // GENERAL_ONLINE_DESCRIPTOR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.generalOnlineDescriptorList = new ArrayList<String>(_list6.size);
                String _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readString();
                  struct.generalOnlineDescriptorList.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setGeneralOnlineDescriptorListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.guid = iprot.readI32();
              struct.setGuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // KICKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kicker = iprot.readString();
              struct.setKickerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LEAD_PARAGRAPH_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.leadParagraphList = new ArrayList<String>(_list9.size);
                String _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readString();
                  struct.leadParagraphList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setLeadParagraphListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LOCATION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.locationList = new ArrayList<String>(_list12.size);
                String _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readString();
                  struct.locationList.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setLocationListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // NAME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.nameList = new ArrayList<String>(_list15.size);
                String _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readString();
                  struct.nameList.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setNameListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // NEWS_DESK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newsDesk = iprot.readString();
              struct.setNewsDeskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NORMALIZED_BYLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.normalizedByline = iprot.readString();
              struct.setNormalizedBylineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ONLINE_DESCRIPTOR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.onlineDescriptorList = new ArrayList<String>(_list18.size);
                String _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = iprot.readString();
                  struct.onlineDescriptorList.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setOnlineDescriptorListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ONLINE_HEADLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.onlineHeadline = iprot.readString();
              struct.setOnlineHeadlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ONLINE_LEAD_PARAGRAPH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.onlineLeadParagraph = iprot.readString();
              struct.setOnlineLeadParagraphIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ONLINE_LOCATION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.onlineLocationList = new ArrayList<String>(_list21.size);
                String _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = iprot.readString();
                  struct.onlineLocationList.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setOnlineLocationListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ONLINE_ORGANIZATION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.onlineOrganizationList = new ArrayList<String>(_list24.size);
                String _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readString();
                  struct.onlineOrganizationList.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setOnlineOrganizationListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ONLINE_PEOPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.onlinePeople = new ArrayList<String>(_list27.size);
                String _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = iprot.readString();
                  struct.onlinePeople.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setOnlinePeopleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ONLINE_SECTION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.onlineSectionList = new ArrayList<String>(_list30.size);
                String _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = iprot.readString();
                  struct.onlineSectionList.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setOnlineSectionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // ONLINE_TITLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.onlineTitleList = new ArrayList<String>(_list33.size);
                String _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = iprot.readString();
                  struct.onlineTitleList.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setOnlineTitleListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // ORGANIZATION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.organizationList = new ArrayList<String>(_list36.size);
                String _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = iprot.readString();
                  struct.organizationList.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setOrganizationListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // PEOPLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.peopleList = new ArrayList<String>(_list39.size);
                String _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = iprot.readString();
                  struct.peopleList.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setPeopleListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // PUBLICATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.publicationDate = iprot.readI64();
              struct.setPublicationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // PUBLICATION_DAY_OF_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publicationDayOfMonth = iprot.readI32();
              struct.setPublicationDayOfMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // PUBLICATION_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publicationMonth = iprot.readI32();
              struct.setPublicationMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // PUBLICATION_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.publicationYear = iprot.readI32();
              struct.setPublicationYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // SECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.section = iprot.readString();
              struct.setSectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // SERIES_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.seriesName = iprot.readString();
              struct.setSeriesNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // SLUG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.slug = iprot.readString();
              struct.setSlugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // TAXONOMIC_CLASSIFIER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.taxonomicClassifierList = new ArrayList<String>(_list42.size);
                String _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = iprot.readString();
                  struct.taxonomicClassifierList.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setTaxonomicClassifierListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // TITLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                struct.titleList = new ArrayList<String>(_list45.size);
                String _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = iprot.readString();
                  struct.titleList.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setTitleListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // TYPES_OF_MATERIAL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.typesOfMaterialList = new ArrayList<String>(_list48.size);
                String _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readString();
                  struct.typesOfMaterialList.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setTypesOfMaterialListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // WORD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wordCount = iprot.readI32();
              struct.setWordCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NITFInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.alternateURL != null) {
        if (struct.isSetAlternateURL()) {
          oprot.writeFieldBegin(ALTERNATE_URL_FIELD_DESC);
          oprot.writeString(struct.alternateURL);
          oprot.writeFieldEnd();
        }
      }
      if (struct.articleAbstract != null) {
        if (struct.isSetArticleAbstract()) {
          oprot.writeFieldBegin(ARTICLE_ABSTRACT_FIELD_DESC);
          oprot.writeString(struct.articleAbstract);
          oprot.writeFieldEnd();
        }
      }
      if (struct.authorBiography != null) {
        if (struct.isSetAuthorBiography()) {
          oprot.writeFieldBegin(AUTHOR_BIOGRAPHY_FIELD_DESC);
          oprot.writeString(struct.authorBiography);
          oprot.writeFieldEnd();
        }
      }
      if (struct.banner != null) {
        if (struct.isSetBanner()) {
          oprot.writeFieldBegin(BANNER_FIELD_DESC);
          oprot.writeString(struct.banner);
          oprot.writeFieldEnd();
        }
      }
      if (struct.biographicalCategoryList != null) {
        if (struct.isSetBiographicalCategoryList()) {
          oprot.writeFieldBegin(BIOGRAPHICAL_CATEGORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.biographicalCategoryList.size()));
            for (String _iter51 : struct.biographicalCategoryList)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.columnName != null) {
        if (struct.isSetColumnName()) {
          oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
          oprot.writeString(struct.columnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetColumnNumber()) {
        oprot.writeFieldBegin(COLUMN_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.columnNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCorrectionDate()) {
        oprot.writeFieldBegin(CORRECTION_DATE_FIELD_DESC);
        oprot.writeI64(struct.correctionDate);
        oprot.writeFieldEnd();
      }
      if (struct.correctionText != null) {
        if (struct.isSetCorrectionText()) {
          oprot.writeFieldBegin(CORRECTION_TEXT_FIELD_DESC);
          oprot.writeString(struct.correctionText);
          oprot.writeFieldEnd();
        }
      }
      if (struct.credit != null) {
        if (struct.isSetCredit()) {
          oprot.writeFieldBegin(CREDIT_FIELD_DESC);
          oprot.writeString(struct.credit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dayOfWeek != null) {
        if (struct.isSetDayOfWeek()) {
          oprot.writeFieldBegin(DAY_OF_WEEK_FIELD_DESC);
          oprot.writeString(struct.dayOfWeek);
          oprot.writeFieldEnd();
        }
      }
      if (struct.descriptorList != null) {
        if (struct.isSetDescriptorList()) {
          oprot.writeFieldBegin(DESCRIPTOR_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.descriptorList.size()));
            for (String _iter52 : struct.descriptorList)
            {
              oprot.writeString(_iter52);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.featurePage != null) {
        if (struct.isSetFeaturePage()) {
          oprot.writeFieldBegin(FEATURE_PAGE_FIELD_DESC);
          oprot.writeString(struct.featurePage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.generalOnlineDescriptorList != null) {
        if (struct.isSetGeneralOnlineDescriptorList()) {
          oprot.writeFieldBegin(GENERAL_ONLINE_DESCRIPTOR_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.generalOnlineDescriptorList.size()));
            for (String _iter53 : struct.generalOnlineDescriptorList)
            {
              oprot.writeString(_iter53);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGuid()) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeI32(struct.guid);
        oprot.writeFieldEnd();
      }
      if (struct.kicker != null) {
        if (struct.isSetKicker()) {
          oprot.writeFieldBegin(KICKER_FIELD_DESC);
          oprot.writeString(struct.kicker);
          oprot.writeFieldEnd();
        }
      }
      if (struct.leadParagraphList != null) {
        if (struct.isSetLeadParagraphList()) {
          oprot.writeFieldBegin(LEAD_PARAGRAPH_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.leadParagraphList.size()));
            for (String _iter54 : struct.leadParagraphList)
            {
              oprot.writeString(_iter54);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.locationList != null) {
        if (struct.isSetLocationList()) {
          oprot.writeFieldBegin(LOCATION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.locationList.size()));
            for (String _iter55 : struct.locationList)
            {
              oprot.writeString(_iter55);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nameList != null) {
        if (struct.isSetNameList()) {
          oprot.writeFieldBegin(NAME_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.nameList.size()));
            for (String _iter56 : struct.nameList)
            {
              oprot.writeString(_iter56);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.newsDesk != null) {
        if (struct.isSetNewsDesk()) {
          oprot.writeFieldBegin(NEWS_DESK_FIELD_DESC);
          oprot.writeString(struct.newsDesk);
          oprot.writeFieldEnd();
        }
      }
      if (struct.normalizedByline != null) {
        if (struct.isSetNormalizedByline()) {
          oprot.writeFieldBegin(NORMALIZED_BYLINE_FIELD_DESC);
          oprot.writeString(struct.normalizedByline);
          oprot.writeFieldEnd();
        }
      }
      if (struct.onlineDescriptorList != null) {
        if (struct.isSetOnlineDescriptorList()) {
          oprot.writeFieldBegin(ONLINE_DESCRIPTOR_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.onlineDescriptorList.size()));
            for (String _iter57 : struct.onlineDescriptorList)
            {
              oprot.writeString(_iter57);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.onlineHeadline != null) {
        if (struct.isSetOnlineHeadline()) {
          oprot.writeFieldBegin(ONLINE_HEADLINE_FIELD_DESC);
          oprot.writeString(struct.onlineHeadline);
          oprot.writeFieldEnd();
        }
      }
      if (struct.onlineLeadParagraph != null) {
        if (struct.isSetOnlineLeadParagraph()) {
          oprot.writeFieldBegin(ONLINE_LEAD_PARAGRAPH_FIELD_DESC);
          oprot.writeString(struct.onlineLeadParagraph);
          oprot.writeFieldEnd();
        }
      }
      if (struct.onlineLocationList != null) {
        if (struct.isSetOnlineLocationList()) {
          oprot.writeFieldBegin(ONLINE_LOCATION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.onlineLocationList.size()));
            for (String _iter58 : struct.onlineLocationList)
            {
              oprot.writeString(_iter58);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.onlineOrganizationList != null) {
        if (struct.isSetOnlineOrganizationList()) {
          oprot.writeFieldBegin(ONLINE_ORGANIZATION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.onlineOrganizationList.size()));
            for (String _iter59 : struct.onlineOrganizationList)
            {
              oprot.writeString(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.onlinePeople != null) {
        if (struct.isSetOnlinePeople()) {
          oprot.writeFieldBegin(ONLINE_PEOPLE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.onlinePeople.size()));
            for (String _iter60 : struct.onlinePeople)
            {
              oprot.writeString(_iter60);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.onlineSectionList != null) {
        if (struct.isSetOnlineSectionList()) {
          oprot.writeFieldBegin(ONLINE_SECTION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.onlineSectionList.size()));
            for (String _iter61 : struct.onlineSectionList)
            {
              oprot.writeString(_iter61);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.onlineTitleList != null) {
        if (struct.isSetOnlineTitleList()) {
          oprot.writeFieldBegin(ONLINE_TITLE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.onlineTitleList.size()));
            for (String _iter62 : struct.onlineTitleList)
            {
              oprot.writeString(_iter62);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.organizationList != null) {
        if (struct.isSetOrganizationList()) {
          oprot.writeFieldBegin(ORGANIZATION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.organizationList.size()));
            for (String _iter63 : struct.organizationList)
            {
              oprot.writeString(_iter63);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPage()) {
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
      }
      if (struct.peopleList != null) {
        if (struct.isSetPeopleList()) {
          oprot.writeFieldBegin(PEOPLE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.peopleList.size()));
            for (String _iter64 : struct.peopleList)
            {
              oprot.writeString(_iter64);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPublicationDate()) {
        oprot.writeFieldBegin(PUBLICATION_DATE_FIELD_DESC);
        oprot.writeI64(struct.publicationDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPublicationDayOfMonth()) {
        oprot.writeFieldBegin(PUBLICATION_DAY_OF_MONTH_FIELD_DESC);
        oprot.writeI32(struct.publicationDayOfMonth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPublicationMonth()) {
        oprot.writeFieldBegin(PUBLICATION_MONTH_FIELD_DESC);
        oprot.writeI32(struct.publicationMonth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPublicationYear()) {
        oprot.writeFieldBegin(PUBLICATION_YEAR_FIELD_DESC);
        oprot.writeI32(struct.publicationYear);
        oprot.writeFieldEnd();
      }
      if (struct.section != null) {
        if (struct.isSetSection()) {
          oprot.writeFieldBegin(SECTION_FIELD_DESC);
          oprot.writeString(struct.section);
          oprot.writeFieldEnd();
        }
      }
      if (struct.seriesName != null) {
        if (struct.isSetSeriesName()) {
          oprot.writeFieldBegin(SERIES_NAME_FIELD_DESC);
          oprot.writeString(struct.seriesName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.slug != null) {
        if (struct.isSetSlug()) {
          oprot.writeFieldBegin(SLUG_FIELD_DESC);
          oprot.writeString(struct.slug);
          oprot.writeFieldEnd();
        }
      }
      if (struct.taxonomicClassifierList != null) {
        if (struct.isSetTaxonomicClassifierList()) {
          oprot.writeFieldBegin(TAXONOMIC_CLASSIFIER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.taxonomicClassifierList.size()));
            for (String _iter65 : struct.taxonomicClassifierList)
            {
              oprot.writeString(_iter65);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.titleList != null) {
        if (struct.isSetTitleList()) {
          oprot.writeFieldBegin(TITLE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.titleList.size()));
            for (String _iter66 : struct.titleList)
            {
              oprot.writeString(_iter66);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.typesOfMaterialList != null) {
        if (struct.isSetTypesOfMaterialList()) {
          oprot.writeFieldBegin(TYPES_OF_MATERIAL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.typesOfMaterialList.size()));
            for (String _iter67 : struct.typesOfMaterialList)
            {
              oprot.writeString(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWordCount()) {
        oprot.writeFieldBegin(WORD_COUNT_FIELD_DESC);
        oprot.writeI32(struct.wordCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NITFInfoTupleSchemeFactory implements SchemeFactory {
    public NITFInfoTupleScheme getScheme() {
      return new NITFInfoTupleScheme();
    }
  }

  private static class NITFInfoTupleScheme extends TupleScheme<NITFInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NITFInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAlternateURL()) {
        optionals.set(0);
      }
      if (struct.isSetArticleAbstract()) {
        optionals.set(1);
      }
      if (struct.isSetAuthorBiography()) {
        optionals.set(2);
      }
      if (struct.isSetBanner()) {
        optionals.set(3);
      }
      if (struct.isSetBiographicalCategoryList()) {
        optionals.set(4);
      }
      if (struct.isSetColumnName()) {
        optionals.set(5);
      }
      if (struct.isSetColumnNumber()) {
        optionals.set(6);
      }
      if (struct.isSetCorrectionDate()) {
        optionals.set(7);
      }
      if (struct.isSetCorrectionText()) {
        optionals.set(8);
      }
      if (struct.isSetCredit()) {
        optionals.set(9);
      }
      if (struct.isSetDayOfWeek()) {
        optionals.set(10);
      }
      if (struct.isSetDescriptorList()) {
        optionals.set(11);
      }
      if (struct.isSetFeaturePage()) {
        optionals.set(12);
      }
      if (struct.isSetGeneralOnlineDescriptorList()) {
        optionals.set(13);
      }
      if (struct.isSetGuid()) {
        optionals.set(14);
      }
      if (struct.isSetKicker()) {
        optionals.set(15);
      }
      if (struct.isSetLeadParagraphList()) {
        optionals.set(16);
      }
      if (struct.isSetLocationList()) {
        optionals.set(17);
      }
      if (struct.isSetNameList()) {
        optionals.set(18);
      }
      if (struct.isSetNewsDesk()) {
        optionals.set(19);
      }
      if (struct.isSetNormalizedByline()) {
        optionals.set(20);
      }
      if (struct.isSetOnlineDescriptorList()) {
        optionals.set(21);
      }
      if (struct.isSetOnlineHeadline()) {
        optionals.set(22);
      }
      if (struct.isSetOnlineLeadParagraph()) {
        optionals.set(23);
      }
      if (struct.isSetOnlineLocationList()) {
        optionals.set(24);
      }
      if (struct.isSetOnlineOrganizationList()) {
        optionals.set(25);
      }
      if (struct.isSetOnlinePeople()) {
        optionals.set(26);
      }
      if (struct.isSetOnlineSectionList()) {
        optionals.set(27);
      }
      if (struct.isSetOnlineTitleList()) {
        optionals.set(28);
      }
      if (struct.isSetOrganizationList()) {
        optionals.set(29);
      }
      if (struct.isSetPage()) {
        optionals.set(30);
      }
      if (struct.isSetPeopleList()) {
        optionals.set(31);
      }
      if (struct.isSetPublicationDate()) {
        optionals.set(32);
      }
      if (struct.isSetPublicationDayOfMonth()) {
        optionals.set(33);
      }
      if (struct.isSetPublicationMonth()) {
        optionals.set(34);
      }
      if (struct.isSetPublicationYear()) {
        optionals.set(35);
      }
      if (struct.isSetSection()) {
        optionals.set(36);
      }
      if (struct.isSetSeriesName()) {
        optionals.set(37);
      }
      if (struct.isSetSlug()) {
        optionals.set(38);
      }
      if (struct.isSetTaxonomicClassifierList()) {
        optionals.set(39);
      }
      if (struct.isSetTitleList()) {
        optionals.set(40);
      }
      if (struct.isSetTypesOfMaterialList()) {
        optionals.set(41);
      }
      if (struct.isSetUrl()) {
        optionals.set(42);
      }
      if (struct.isSetWordCount()) {
        optionals.set(43);
      }
      oprot.writeBitSet(optionals, 44);
      if (struct.isSetAlternateURL()) {
        oprot.writeString(struct.alternateURL);
      }
      if (struct.isSetArticleAbstract()) {
        oprot.writeString(struct.articleAbstract);
      }
      if (struct.isSetAuthorBiography()) {
        oprot.writeString(struct.authorBiography);
      }
      if (struct.isSetBanner()) {
        oprot.writeString(struct.banner);
      }
      if (struct.isSetBiographicalCategoryList()) {
        {
          oprot.writeI32(struct.biographicalCategoryList.size());
          for (String _iter68 : struct.biographicalCategoryList)
          {
            oprot.writeString(_iter68);
          }
        }
      }
      if (struct.isSetColumnName()) {
        oprot.writeString(struct.columnName);
      }
      if (struct.isSetColumnNumber()) {
        oprot.writeI32(struct.columnNumber);
      }
      if (struct.isSetCorrectionDate()) {
        oprot.writeI64(struct.correctionDate);
      }
      if (struct.isSetCorrectionText()) {
        oprot.writeString(struct.correctionText);
      }
      if (struct.isSetCredit()) {
        oprot.writeString(struct.credit);
      }
      if (struct.isSetDayOfWeek()) {
        oprot.writeString(struct.dayOfWeek);
      }
      if (struct.isSetDescriptorList()) {
        {
          oprot.writeI32(struct.descriptorList.size());
          for (String _iter69 : struct.descriptorList)
          {
            oprot.writeString(_iter69);
          }
        }
      }
      if (struct.isSetFeaturePage()) {
        oprot.writeString(struct.featurePage);
      }
      if (struct.isSetGeneralOnlineDescriptorList()) {
        {
          oprot.writeI32(struct.generalOnlineDescriptorList.size());
          for (String _iter70 : struct.generalOnlineDescriptorList)
          {
            oprot.writeString(_iter70);
          }
        }
      }
      if (struct.isSetGuid()) {
        oprot.writeI32(struct.guid);
      }
      if (struct.isSetKicker()) {
        oprot.writeString(struct.kicker);
      }
      if (struct.isSetLeadParagraphList()) {
        {
          oprot.writeI32(struct.leadParagraphList.size());
          for (String _iter71 : struct.leadParagraphList)
          {
            oprot.writeString(_iter71);
          }
        }
      }
      if (struct.isSetLocationList()) {
        {
          oprot.writeI32(struct.locationList.size());
          for (String _iter72 : struct.locationList)
          {
            oprot.writeString(_iter72);
          }
        }
      }
      if (struct.isSetNameList()) {
        {
          oprot.writeI32(struct.nameList.size());
          for (String _iter73 : struct.nameList)
          {
            oprot.writeString(_iter73);
          }
        }
      }
      if (struct.isSetNewsDesk()) {
        oprot.writeString(struct.newsDesk);
      }
      if (struct.isSetNormalizedByline()) {
        oprot.writeString(struct.normalizedByline);
      }
      if (struct.isSetOnlineDescriptorList()) {
        {
          oprot.writeI32(struct.onlineDescriptorList.size());
          for (String _iter74 : struct.onlineDescriptorList)
          {
            oprot.writeString(_iter74);
          }
        }
      }
      if (struct.isSetOnlineHeadline()) {
        oprot.writeString(struct.onlineHeadline);
      }
      if (struct.isSetOnlineLeadParagraph()) {
        oprot.writeString(struct.onlineLeadParagraph);
      }
      if (struct.isSetOnlineLocationList()) {
        {
          oprot.writeI32(struct.onlineLocationList.size());
          for (String _iter75 : struct.onlineLocationList)
          {
            oprot.writeString(_iter75);
          }
        }
      }
      if (struct.isSetOnlineOrganizationList()) {
        {
          oprot.writeI32(struct.onlineOrganizationList.size());
          for (String _iter76 : struct.onlineOrganizationList)
          {
            oprot.writeString(_iter76);
          }
        }
      }
      if (struct.isSetOnlinePeople()) {
        {
          oprot.writeI32(struct.onlinePeople.size());
          for (String _iter77 : struct.onlinePeople)
          {
            oprot.writeString(_iter77);
          }
        }
      }
      if (struct.isSetOnlineSectionList()) {
        {
          oprot.writeI32(struct.onlineSectionList.size());
          for (String _iter78 : struct.onlineSectionList)
          {
            oprot.writeString(_iter78);
          }
        }
      }
      if (struct.isSetOnlineTitleList()) {
        {
          oprot.writeI32(struct.onlineTitleList.size());
          for (String _iter79 : struct.onlineTitleList)
          {
            oprot.writeString(_iter79);
          }
        }
      }
      if (struct.isSetOrganizationList()) {
        {
          oprot.writeI32(struct.organizationList.size());
          for (String _iter80 : struct.organizationList)
          {
            oprot.writeString(_iter80);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetPeopleList()) {
        {
          oprot.writeI32(struct.peopleList.size());
          for (String _iter81 : struct.peopleList)
          {
            oprot.writeString(_iter81);
          }
        }
      }
      if (struct.isSetPublicationDate()) {
        oprot.writeI64(struct.publicationDate);
      }
      if (struct.isSetPublicationDayOfMonth()) {
        oprot.writeI32(struct.publicationDayOfMonth);
      }
      if (struct.isSetPublicationMonth()) {
        oprot.writeI32(struct.publicationMonth);
      }
      if (struct.isSetPublicationYear()) {
        oprot.writeI32(struct.publicationYear);
      }
      if (struct.isSetSection()) {
        oprot.writeString(struct.section);
      }
      if (struct.isSetSeriesName()) {
        oprot.writeString(struct.seriesName);
      }
      if (struct.isSetSlug()) {
        oprot.writeString(struct.slug);
      }
      if (struct.isSetTaxonomicClassifierList()) {
        {
          oprot.writeI32(struct.taxonomicClassifierList.size());
          for (String _iter82 : struct.taxonomicClassifierList)
          {
            oprot.writeString(_iter82);
          }
        }
      }
      if (struct.isSetTitleList()) {
        {
          oprot.writeI32(struct.titleList.size());
          for (String _iter83 : struct.titleList)
          {
            oprot.writeString(_iter83);
          }
        }
      }
      if (struct.isSetTypesOfMaterialList()) {
        {
          oprot.writeI32(struct.typesOfMaterialList.size());
          for (String _iter84 : struct.typesOfMaterialList)
          {
            oprot.writeString(_iter84);
          }
        }
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetWordCount()) {
        oprot.writeI32(struct.wordCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NITFInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(44);
      if (incoming.get(0)) {
        struct.alternateURL = iprot.readString();
        struct.setAlternateURLIsSet(true);
      }
      if (incoming.get(1)) {
        struct.articleAbstract = iprot.readString();
        struct.setArticleAbstractIsSet(true);
      }
      if (incoming.get(2)) {
        struct.authorBiography = iprot.readString();
        struct.setAuthorBiographyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.banner = iprot.readString();
        struct.setBannerIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.biographicalCategoryList = new ArrayList<String>(_list85.size);
          String _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = iprot.readString();
            struct.biographicalCategoryList.add(_elem86);
          }
        }
        struct.setBiographicalCategoryListIsSet(true);
      }
      if (incoming.get(5)) {
        struct.columnName = iprot.readString();
        struct.setColumnNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.columnNumber = iprot.readI32();
        struct.setColumnNumberIsSet(true);
      }
      if (incoming.get(7)) {
        struct.correctionDate = iprot.readI64();
        struct.setCorrectionDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.correctionText = iprot.readString();
        struct.setCorrectionTextIsSet(true);
      }
      if (incoming.get(9)) {
        struct.credit = iprot.readString();
        struct.setCreditIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dayOfWeek = iprot.readString();
        struct.setDayOfWeekIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list88 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.descriptorList = new ArrayList<String>(_list88.size);
          String _elem89;
          for (int _i90 = 0; _i90 < _list88.size; ++_i90)
          {
            _elem89 = iprot.readString();
            struct.descriptorList.add(_elem89);
          }
        }
        struct.setDescriptorListIsSet(true);
      }
      if (incoming.get(12)) {
        struct.featurePage = iprot.readString();
        struct.setFeaturePageIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list91 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.generalOnlineDescriptorList = new ArrayList<String>(_list91.size);
          String _elem92;
          for (int _i93 = 0; _i93 < _list91.size; ++_i93)
          {
            _elem92 = iprot.readString();
            struct.generalOnlineDescriptorList.add(_elem92);
          }
        }
        struct.setGeneralOnlineDescriptorListIsSet(true);
      }
      if (incoming.get(14)) {
        struct.guid = iprot.readI32();
        struct.setGuidIsSet(true);
      }
      if (incoming.get(15)) {
        struct.kicker = iprot.readString();
        struct.setKickerIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list94 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.leadParagraphList = new ArrayList<String>(_list94.size);
          String _elem95;
          for (int _i96 = 0; _i96 < _list94.size; ++_i96)
          {
            _elem95 = iprot.readString();
            struct.leadParagraphList.add(_elem95);
          }
        }
        struct.setLeadParagraphListIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.locationList = new ArrayList<String>(_list97.size);
          String _elem98;
          for (int _i99 = 0; _i99 < _list97.size; ++_i99)
          {
            _elem98 = iprot.readString();
            struct.locationList.add(_elem98);
          }
        }
        struct.setLocationListIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list100 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.nameList = new ArrayList<String>(_list100.size);
          String _elem101;
          for (int _i102 = 0; _i102 < _list100.size; ++_i102)
          {
            _elem101 = iprot.readString();
            struct.nameList.add(_elem101);
          }
        }
        struct.setNameListIsSet(true);
      }
      if (incoming.get(19)) {
        struct.newsDesk = iprot.readString();
        struct.setNewsDeskIsSet(true);
      }
      if (incoming.get(20)) {
        struct.normalizedByline = iprot.readString();
        struct.setNormalizedBylineIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.onlineDescriptorList = new ArrayList<String>(_list103.size);
          String _elem104;
          for (int _i105 = 0; _i105 < _list103.size; ++_i105)
          {
            _elem104 = iprot.readString();
            struct.onlineDescriptorList.add(_elem104);
          }
        }
        struct.setOnlineDescriptorListIsSet(true);
      }
      if (incoming.get(22)) {
        struct.onlineHeadline = iprot.readString();
        struct.setOnlineHeadlineIsSet(true);
      }
      if (incoming.get(23)) {
        struct.onlineLeadParagraph = iprot.readString();
        struct.setOnlineLeadParagraphIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.onlineLocationList = new ArrayList<String>(_list106.size);
          String _elem107;
          for (int _i108 = 0; _i108 < _list106.size; ++_i108)
          {
            _elem107 = iprot.readString();
            struct.onlineLocationList.add(_elem107);
          }
        }
        struct.setOnlineLocationListIsSet(true);
      }
      if (incoming.get(25)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.onlineOrganizationList = new ArrayList<String>(_list109.size);
          String _elem110;
          for (int _i111 = 0; _i111 < _list109.size; ++_i111)
          {
            _elem110 = iprot.readString();
            struct.onlineOrganizationList.add(_elem110);
          }
        }
        struct.setOnlineOrganizationListIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list112 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.onlinePeople = new ArrayList<String>(_list112.size);
          String _elem113;
          for (int _i114 = 0; _i114 < _list112.size; ++_i114)
          {
            _elem113 = iprot.readString();
            struct.onlinePeople.add(_elem113);
          }
        }
        struct.setOnlinePeopleIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.onlineSectionList = new ArrayList<String>(_list115.size);
          String _elem116;
          for (int _i117 = 0; _i117 < _list115.size; ++_i117)
          {
            _elem116 = iprot.readString();
            struct.onlineSectionList.add(_elem116);
          }
        }
        struct.setOnlineSectionListIsSet(true);
      }
      if (incoming.get(28)) {
        {
          org.apache.thrift.protocol.TList _list118 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.onlineTitleList = new ArrayList<String>(_list118.size);
          String _elem119;
          for (int _i120 = 0; _i120 < _list118.size; ++_i120)
          {
            _elem119 = iprot.readString();
            struct.onlineTitleList.add(_elem119);
          }
        }
        struct.setOnlineTitleListIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.organizationList = new ArrayList<String>(_list121.size);
          String _elem122;
          for (int _i123 = 0; _i123 < _list121.size; ++_i123)
          {
            _elem122 = iprot.readString();
            struct.organizationList.add(_elem122);
          }
        }
        struct.setOrganizationListIsSet(true);
      }
      if (incoming.get(30)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(31)) {
        {
          org.apache.thrift.protocol.TList _list124 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.peopleList = new ArrayList<String>(_list124.size);
          String _elem125;
          for (int _i126 = 0; _i126 < _list124.size; ++_i126)
          {
            _elem125 = iprot.readString();
            struct.peopleList.add(_elem125);
          }
        }
        struct.setPeopleListIsSet(true);
      }
      if (incoming.get(32)) {
        struct.publicationDate = iprot.readI64();
        struct.setPublicationDateIsSet(true);
      }
      if (incoming.get(33)) {
        struct.publicationDayOfMonth = iprot.readI32();
        struct.setPublicationDayOfMonthIsSet(true);
      }
      if (incoming.get(34)) {
        struct.publicationMonth = iprot.readI32();
        struct.setPublicationMonthIsSet(true);
      }
      if (incoming.get(35)) {
        struct.publicationYear = iprot.readI32();
        struct.setPublicationYearIsSet(true);
      }
      if (incoming.get(36)) {
        struct.section = iprot.readString();
        struct.setSectionIsSet(true);
      }
      if (incoming.get(37)) {
        struct.seriesName = iprot.readString();
        struct.setSeriesNameIsSet(true);
      }
      if (incoming.get(38)) {
        struct.slug = iprot.readString();
        struct.setSlugIsSet(true);
      }
      if (incoming.get(39)) {
        {
          org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.taxonomicClassifierList = new ArrayList<String>(_list127.size);
          String _elem128;
          for (int _i129 = 0; _i129 < _list127.size; ++_i129)
          {
            _elem128 = iprot.readString();
            struct.taxonomicClassifierList.add(_elem128);
          }
        }
        struct.setTaxonomicClassifierListIsSet(true);
      }
      if (incoming.get(40)) {
        {
          org.apache.thrift.protocol.TList _list130 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.titleList = new ArrayList<String>(_list130.size);
          String _elem131;
          for (int _i132 = 0; _i132 < _list130.size; ++_i132)
          {
            _elem131 = iprot.readString();
            struct.titleList.add(_elem131);
          }
        }
        struct.setTitleListIsSet(true);
      }
      if (incoming.get(41)) {
        {
          org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.typesOfMaterialList = new ArrayList<String>(_list133.size);
          String _elem134;
          for (int _i135 = 0; _i135 < _list133.size; ++_i135)
          {
            _elem134 = iprot.readString();
            struct.typesOfMaterialList.add(_elem134);
          }
        }
        struct.setTypesOfMaterialListIsSet(true);
      }
      if (incoming.get(42)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(43)) {
        struct.wordCount = iprot.readI32();
        struct.setWordCountIsSet(true);
      }
    }
  }

}

