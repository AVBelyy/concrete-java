/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A theory about some token-level annotation.
 * The TokenTagging consists of a mapping from tokens
 * (using token ids) to string tags (e.g. part-of-speech tags or lemmas).
 * 
 * The mapping defined by a TokenTagging may be partial --
 * i.e., some tokens may not be assigned any part of speech tags.
 * 
 * For lattice tokenizations, you may need to create multiple
 * part-of-speech taggings (for different paths through the lattice),
 * since the appropriate tag for a given token may depend on the path
 * taken. For example, you might define a separate
 * TokenTagging for each of the top K paths, which leaves all
 * tokens that are not part of the path unlabeled.
 * 
 * Currently, we use strings to encode annotations. In
 * the future, we may add fields for encoding specific tag sets
 * (eg treebank tags), or for adding compound tags.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class TokenTagging implements org.apache.thrift.TBase<TokenTagging, TokenTagging._Fields>, java.io.Serializable, Cloneable, Comparable<TokenTagging> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TokenTagging");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TAGGED_TOKEN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("taggedTokenList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TAGGING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taggingType", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TokenTaggingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TokenTaggingTupleSchemeFactory();

  private edu.jhu.hlt.concrete.UUID uuid; // required
  private edu.jhu.hlt.concrete.AnnotationMetadata metadata; // required
  private java.util.List<TaggedToken> taggedTokenList; // required
  private java.lang.String taggingType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The UUID of this TokenTagging object.
     */
    UUID((short)1, "uuid"),
    /**
     * Information about where the annotation came from.
     * This should be used to tell between gold-standard annotations
     * and automatically generated theories about the data
     */
    METADATA((short)2, "metadata"),
    /**
     * The mapping from tokens to annotations.
     * This may be a partial mapping.
     */
    TAGGED_TOKEN_LIST((short)3, "taggedTokenList"),
    /**
     * An ontology-backed string that represents the
     * type of token taggings this TokenTagging object
     * produces.
     */
    TAGGING_TYPE((short)4, "taggingType");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // METADATA
          return METADATA;
        case 3: // TAGGED_TOKEN_LIST
          return TAGGED_TOKEN_LIST;
        case 4: // TAGGING_TYPE
          return TAGGING_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TAGGING_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.AnnotationMetadata.class)));
    tmpMap.put(_Fields.TAGGED_TOKEN_LIST, new org.apache.thrift.meta_data.FieldMetaData("taggedTokenList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaggedToken.class))));
    tmpMap.put(_Fields.TAGGING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taggingType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TokenTagging.class, metaDataMap);
  }

  public TokenTagging() {
  }

  public TokenTagging(
    edu.jhu.hlt.concrete.UUID uuid,
    edu.jhu.hlt.concrete.AnnotationMetadata metadata,
    java.util.List<TaggedToken> taggedTokenList)
  {
    this();
    this.uuid = uuid;
    this.metadata = metadata;
    this.taggedTokenList = taggedTokenList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TokenTagging(TokenTagging other) {
    if (other.isSetUuid()) {
      this.uuid = new edu.jhu.hlt.concrete.UUID(other.uuid);
    }
    if (other.isSetMetadata()) {
      this.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata(other.metadata);
    }
    if (other.isSetTaggedTokenList()) {
      java.util.List<TaggedToken> __this__taggedTokenList = new java.util.ArrayList<TaggedToken>(other.taggedTokenList.size());
      for (TaggedToken other_element : other.taggedTokenList) {
        __this__taggedTokenList.add(new TaggedToken(other_element));
      }
      this.taggedTokenList = __this__taggedTokenList;
    }
    if (other.isSetTaggingType()) {
      this.taggingType = other.taggingType;
    }
  }

  public TokenTagging deepCopy() {
    return new TokenTagging(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.metadata = null;
    this.taggedTokenList = null;
    this.taggingType = null;
  }

  /**
   * The UUID of this TokenTagging object.
   */
  public edu.jhu.hlt.concrete.UUID getUuid() {
    return this.uuid;
  }

  /**
   * The UUID of this TokenTagging object.
   */
  public TokenTagging setUuid(edu.jhu.hlt.concrete.UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  /**
   * Information about where the annotation came from.
   * This should be used to tell between gold-standard annotations
   * and automatically generated theories about the data
   */
  public edu.jhu.hlt.concrete.AnnotationMetadata getMetadata() {
    return this.metadata;
  }

  /**
   * Information about where the annotation came from.
   * This should be used to tell between gold-standard annotations
   * and automatically generated theories about the data
   */
  public TokenTagging setMetadata(edu.jhu.hlt.concrete.AnnotationMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public int getTaggedTokenListSize() {
    return (this.taggedTokenList == null) ? 0 : this.taggedTokenList.size();
  }

  public java.util.Iterator<TaggedToken> getTaggedTokenListIterator() {
    return (this.taggedTokenList == null) ? null : this.taggedTokenList.iterator();
  }

  public void addToTaggedTokenList(TaggedToken elem) {
    if (this.taggedTokenList == null) {
      this.taggedTokenList = new java.util.ArrayList<TaggedToken>();
    }
    this.taggedTokenList.add(elem);
  }

  /**
   * The mapping from tokens to annotations.
   * This may be a partial mapping.
   */
  public java.util.List<TaggedToken> getTaggedTokenList() {
    return this.taggedTokenList;
  }

  /**
   * The mapping from tokens to annotations.
   * This may be a partial mapping.
   */
  public TokenTagging setTaggedTokenList(java.util.List<TaggedToken> taggedTokenList) {
    this.taggedTokenList = taggedTokenList;
    return this;
  }

  public void unsetTaggedTokenList() {
    this.taggedTokenList = null;
  }

  /** Returns true if field taggedTokenList is set (has been assigned a value) and false otherwise */
  public boolean isSetTaggedTokenList() {
    return this.taggedTokenList != null;
  }

  public void setTaggedTokenListIsSet(boolean value) {
    if (!value) {
      this.taggedTokenList = null;
    }
  }

  /**
   * An ontology-backed string that represents the
   * type of token taggings this TokenTagging object
   * produces.
   */
  public java.lang.String getTaggingType() {
    return this.taggingType;
  }

  /**
   * An ontology-backed string that represents the
   * type of token taggings this TokenTagging object
   * produces.
   */
  public TokenTagging setTaggingType(java.lang.String taggingType) {
    this.taggingType = taggingType;
    return this;
  }

  public void unsetTaggingType() {
    this.taggingType = null;
  }

  /** Returns true if field taggingType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaggingType() {
    return this.taggingType != null;
  }

  public void setTaggingTypeIsSet(boolean value) {
    if (!value) {
      this.taggingType = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((edu.jhu.hlt.concrete.AnnotationMetadata)value);
      }
      break;

    case TAGGED_TOKEN_LIST:
      if (value == null) {
        unsetTaggedTokenList();
      } else {
        setTaggedTokenList((java.util.List<TaggedToken>)value);
      }
      break;

    case TAGGING_TYPE:
      if (value == null) {
        unsetTaggingType();
      } else {
        setTaggingType((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case METADATA:
      return getMetadata();

    case TAGGED_TOKEN_LIST:
      return getTaggedTokenList();

    case TAGGING_TYPE:
      return getTaggingType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case METADATA:
      return isSetMetadata();
    case TAGGED_TOKEN_LIST:
      return isSetTaggedTokenList();
    case TAGGING_TYPE:
      return isSetTaggingType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TokenTagging)
      return this.equals((TokenTagging)that);
    return false;
  }

  public boolean equals(TokenTagging that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_taggedTokenList = true && this.isSetTaggedTokenList();
    boolean that_present_taggedTokenList = true && that.isSetTaggedTokenList();
    if (this_present_taggedTokenList || that_present_taggedTokenList) {
      if (!(this_present_taggedTokenList && that_present_taggedTokenList))
        return false;
      if (!this.taggedTokenList.equals(that.taggedTokenList))
        return false;
    }

    boolean this_present_taggingType = true && this.isSetTaggingType();
    boolean that_present_taggingType = true && that.isSetTaggingType();
    if (this_present_taggingType || that_present_taggingType) {
      if (!(this_present_taggingType && that_present_taggingType))
        return false;
      if (!this.taggingType.equals(that.taggingType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetMetadata()) ? 131071 : 524287);
    if (isSetMetadata())
      hashCode = hashCode * 8191 + metadata.hashCode();

    hashCode = hashCode * 8191 + ((isSetTaggedTokenList()) ? 131071 : 524287);
    if (isSetTaggedTokenList())
      hashCode = hashCode * 8191 + taggedTokenList.hashCode();

    hashCode = hashCode * 8191 + ((isSetTaggingType()) ? 131071 : 524287);
    if (isSetTaggingType())
      hashCode = hashCode * 8191 + taggingType.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TokenTagging other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaggedTokenList()).compareTo(other.isSetTaggedTokenList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaggedTokenList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taggedTokenList, other.taggedTokenList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaggingType()).compareTo(other.isSetTaggingType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaggingType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taggingType, other.taggingType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TokenTagging(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata:");
    if (this.metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taggedTokenList:");
    if (this.taggedTokenList == null) {
      sb.append("null");
    } else {
      sb.append(this.taggedTokenList);
    }
    first = false;
    if (isSetTaggingType()) {
      if (!first) sb.append(", ");
      sb.append("taggingType:");
      if (this.taggingType == null) {
        sb.append("null");
      } else {
        sb.append(this.taggingType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (metadata == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata' was not present! Struct: " + toString());
    }
    if (taggedTokenList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taggedTokenList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uuid != null) {
      uuid.validate();
    }
    if (metadata != null) {
      metadata.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenTaggingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TokenTaggingStandardScheme getScheme() {
      return new TokenTaggingStandardScheme();
    }
  }

  private static class TokenTaggingStandardScheme extends org.apache.thrift.scheme.StandardScheme<TokenTagging> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TokenTagging struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uuid = new edu.jhu.hlt.concrete.UUID();
              struct.uuid.read(iprot);
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata();
              struct.metadata.read(iprot);
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TAGGED_TOKEN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.taggedTokenList = new java.util.ArrayList<TaggedToken>(_list56.size);
                TaggedToken _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = new TaggedToken();
                  _elem57.read(iprot);
                  struct.taggedTokenList.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setTaggedTokenListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TAGGING_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taggingType = iprot.readString();
              struct.setTaggingTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TokenTagging struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        struct.uuid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.metadata != null) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        struct.metadata.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.taggedTokenList != null) {
        oprot.writeFieldBegin(TAGGED_TOKEN_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.taggedTokenList.size()));
          for (TaggedToken _iter59 : struct.taggedTokenList)
          {
            _iter59.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.taggingType != null) {
        if (struct.isSetTaggingType()) {
          oprot.writeFieldBegin(TAGGING_TYPE_FIELD_DESC);
          oprot.writeString(struct.taggingType);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenTaggingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TokenTaggingTupleScheme getScheme() {
      return new TokenTaggingTupleScheme();
    }
  }

  private static class TokenTaggingTupleScheme extends org.apache.thrift.scheme.TupleScheme<TokenTagging> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TokenTagging struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.uuid.write(oprot);
      struct.metadata.write(oprot);
      {
        oprot.writeI32(struct.taggedTokenList.size());
        for (TaggedToken _iter60 : struct.taggedTokenList)
        {
          _iter60.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTaggingType()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTaggingType()) {
        oprot.writeString(struct.taggingType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TokenTagging struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.uuid = new edu.jhu.hlt.concrete.UUID();
      struct.uuid.read(iprot);
      struct.setUuidIsSet(true);
      struct.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata();
      struct.metadata.read(iprot);
      struct.setMetadataIsSet(true);
      {
        org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.taggedTokenList = new java.util.ArrayList<TaggedToken>(_list61.size);
        TaggedToken _elem62;
        for (int _i63 = 0; _i63 < _list61.size; ++_i63)
        {
          _elem62 = new TaggedToken();
          _elem62.read(iprot);
          struct.taggedTokenList.add(_elem62);
        }
      }
      struct.setTaggedTokenListIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.taggingType = iprot.readString();
        struct.setTaggingTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

