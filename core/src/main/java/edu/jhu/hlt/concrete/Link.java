/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A structure that represents the origin of an entity linking annotation.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class Link implements org.apache.thrift.TBase<Link, Link._Fields>, java.io.Serializable, Cloneable, Comparable<Link> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Link");

  private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LINK_TARGET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("linkTargetList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LinkTupleSchemeFactory();

  private edu.jhu.hlt.concrete.UUID sourceId; // required
  private java.util.List<LinkTarget> linkTargetList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The "root" of this Link; points to a EntityMention UUID, Entity UUID, etc.
     */
    SOURCE_ID((short)1, "sourceId"),
    /**
     * A list of LinkTarget objects that this Link contains.
     */
    LINK_TARGET_LIST((short)2, "linkTargetList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOURCE_ID
          return SOURCE_ID;
        case 2: // LINK_TARGET_LIST
          return LINK_TARGET_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.LINK_TARGET_LIST, new org.apache.thrift.meta_data.FieldMetaData("linkTargetList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LinkTarget.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Link.class, metaDataMap);
  }

  public Link() {
  }

  public Link(
    edu.jhu.hlt.concrete.UUID sourceId,
    java.util.List<LinkTarget> linkTargetList)
  {
    this();
    this.sourceId = sourceId;
    this.linkTargetList = linkTargetList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Link(Link other) {
    if (other.isSetSourceId()) {
      this.sourceId = new edu.jhu.hlt.concrete.UUID(other.sourceId);
    }
    if (other.isSetLinkTargetList()) {
      java.util.List<LinkTarget> __this__linkTargetList = new java.util.ArrayList<LinkTarget>(other.linkTargetList.size());
      for (LinkTarget other_element : other.linkTargetList) {
        __this__linkTargetList.add(new LinkTarget(other_element));
      }
      this.linkTargetList = __this__linkTargetList;
    }
  }

  public Link deepCopy() {
    return new Link(this);
  }

  @Override
  public void clear() {
    this.sourceId = null;
    this.linkTargetList = null;
  }

  /**
   * The "root" of this Link; points to a EntityMention UUID, Entity UUID, etc.
   */
  public edu.jhu.hlt.concrete.UUID getSourceId() {
    return this.sourceId;
  }

  /**
   * The "root" of this Link; points to a EntityMention UUID, Entity UUID, etc.
   */
  public Link setSourceId(edu.jhu.hlt.concrete.UUID sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  public void unsetSourceId() {
    this.sourceId = null;
  }

  /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceId() {
    return this.sourceId != null;
  }

  public void setSourceIdIsSet(boolean value) {
    if (!value) {
      this.sourceId = null;
    }
  }

  public int getLinkTargetListSize() {
    return (this.linkTargetList == null) ? 0 : this.linkTargetList.size();
  }

  public java.util.Iterator<LinkTarget> getLinkTargetListIterator() {
    return (this.linkTargetList == null) ? null : this.linkTargetList.iterator();
  }

  public void addToLinkTargetList(LinkTarget elem) {
    if (this.linkTargetList == null) {
      this.linkTargetList = new java.util.ArrayList<LinkTarget>();
    }
    this.linkTargetList.add(elem);
  }

  /**
   * A list of LinkTarget objects that this Link contains.
   */
  public java.util.List<LinkTarget> getLinkTargetList() {
    return this.linkTargetList;
  }

  /**
   * A list of LinkTarget objects that this Link contains.
   */
  public Link setLinkTargetList(java.util.List<LinkTarget> linkTargetList) {
    this.linkTargetList = linkTargetList;
    return this;
  }

  public void unsetLinkTargetList() {
    this.linkTargetList = null;
  }

  /** Returns true if field linkTargetList is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkTargetList() {
    return this.linkTargetList != null;
  }

  public void setLinkTargetListIsSet(boolean value) {
    if (!value) {
      this.linkTargetList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SOURCE_ID:
      if (value == null) {
        unsetSourceId();
      } else {
        setSourceId((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case LINK_TARGET_LIST:
      if (value == null) {
        unsetLinkTargetList();
      } else {
        setLinkTargetList((java.util.List<LinkTarget>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SOURCE_ID:
      return getSourceId();

    case LINK_TARGET_LIST:
      return getLinkTargetList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SOURCE_ID:
      return isSetSourceId();
    case LINK_TARGET_LIST:
      return isSetLinkTargetList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Link)
      return this.equals((Link)that);
    return false;
  }

  public boolean equals(Link that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sourceId = true && this.isSetSourceId();
    boolean that_present_sourceId = true && that.isSetSourceId();
    if (this_present_sourceId || that_present_sourceId) {
      if (!(this_present_sourceId && that_present_sourceId))
        return false;
      if (!this.sourceId.equals(that.sourceId))
        return false;
    }

    boolean this_present_linkTargetList = true && this.isSetLinkTargetList();
    boolean that_present_linkTargetList = true && that.isSetLinkTargetList();
    if (this_present_linkTargetList || that_present_linkTargetList) {
      if (!(this_present_linkTargetList && that_present_linkTargetList))
        return false;
      if (!this.linkTargetList.equals(that.linkTargetList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSourceId()) ? 131071 : 524287);
    if (isSetSourceId())
      hashCode = hashCode * 8191 + sourceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetLinkTargetList()) ? 131071 : 524287);
    if (isSetLinkTargetList())
      hashCode = hashCode * 8191 + linkTargetList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Link other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLinkTargetList()).compareTo(other.isSetLinkTargetList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkTargetList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkTargetList, other.linkTargetList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Link(");
    boolean first = true;

    sb.append("sourceId:");
    if (this.sourceId == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("linkTargetList:");
    if (this.linkTargetList == null) {
      sb.append("null");
    } else {
      sb.append(this.linkTargetList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sourceId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sourceId' was not present! Struct: " + toString());
    }
    if (linkTargetList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'linkTargetList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (sourceId != null) {
      sourceId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LinkStandardScheme getScheme() {
      return new LinkStandardScheme();
    }
  }

  private static class LinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<Link> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Link struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sourceId = new edu.jhu.hlt.concrete.UUID();
              struct.sourceId.read(iprot);
              struct.setSourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LINK_TARGET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.linkTargetList = new java.util.ArrayList<LinkTarget>(_list0.size);
                LinkTarget _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new LinkTarget();
                  _elem1.read(iprot);
                  struct.linkTargetList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setLinkTargetListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Link struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sourceId != null) {
        oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
        struct.sourceId.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.linkTargetList != null) {
        oprot.writeFieldBegin(LINK_TARGET_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.linkTargetList.size()));
          for (LinkTarget _iter3 : struct.linkTargetList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LinkTupleScheme getScheme() {
      return new LinkTupleScheme();
    }
  }

  private static class LinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<Link> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Link struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sourceId.write(oprot);
      {
        oprot.writeI32(struct.linkTargetList.size());
        for (LinkTarget _iter4 : struct.linkTargetList)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Link struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.sourceId = new edu.jhu.hlt.concrete.UUID();
      struct.sourceId.read(iprot);
      struct.setSourceIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.linkTargetList = new java.util.ArrayList<LinkTarget>(_list5.size);
        LinkTarget _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new LinkTarget();
          _elem6.read(iprot);
          struct.linkTargetList.add(_elem6);
        }
      }
      struct.setLinkTargetListIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

