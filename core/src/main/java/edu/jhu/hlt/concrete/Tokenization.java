/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A theory (or set of alternative theories) about the sequence of
 * tokens that make up a sentence.
 * 
 * This message type is used to record the output of not just for
 * tokenizers, but also for a wide variety of other tools, including
 * machine translation systems, text normalizers, part-of-speech
 * taggers, and stemmers.
 * 
 * Each Tokenization is encoded using either a TokenList
 * or a TokenLattice. (If you want to encode an n-best list, then
 * you should store it as n separate Tokenization objects.) The
 * "kind" field is used to indicate whether this Tokenization contains
 * a list of tokens or a TokenLattice.
 * 
 * The confidence value for each sequence is determined by combining
 * the confidence from the "metadata" field with confidence
 * information from individual token sequences as follows:
 * 
 * <ul>
 * <li> For n-best lists:
 * metadata.confidence </li>
 * <li> For lattices:
 * metadata.confidence * exp(-sum(arc.weight)) </li>
 * </ul>
 * 
 * Note: in some cases (such as the output of a machine translation
 * tool), the order of the tokens in a token sequence may not
 * correspond with the order of their original text span offsets.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-10")
public class Tokenization implements org.apache.thrift.TBase<Tokenization, Tokenization._Fields>, java.io.Serializable, Cloneable, Comparable<Tokenization> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Tokenization");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenList", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField LATTICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lattice", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField KIND_FIELD_DESC = new org.apache.thrift.protocol.TField("kind", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TOKEN_TAGGING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenTaggingList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField PARSE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("parseList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DEPENDENCY_PARSE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dependencyParseList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SPAN_LINK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("spanLinkList", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TokenizationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TokenizationTupleSchemeFactory());
  }

  private edu.jhu.hlt.concrete.UUID uuid; // required
  private edu.jhu.hlt.concrete.AnnotationMetadata metadata; // required
  private TokenList tokenList; // optional
  private TokenLattice lattice; // optional
  private TokenizationKind kind; // required
  private List<TokenTagging> tokenTaggingList; // optional
  private List<Parse> parseList; // optional
  private List<DependencyParse> dependencyParseList; // optional
  private List<SpanLink> spanLinkList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    /**
     * Information about where this tokenization came from.
     */
    METADATA((short)2, "metadata"),
    /**
     * A wrapper around an ordered list of the tokens in this tokenization.
     * This may also give easy access to the "reconstructed text" associated
     * with this tokenization.
     * This field should only have a value if kind==TOKEN_LIST.
     */
    TOKEN_LIST((short)3, "tokenList"),
    /**
     * A lattice that compactly describes a set of token sequences that
     * might make up this tokenization.  This field should only have a
     * value if kind==LATTICE.
     */
    LATTICE((short)4, "lattice"),
    /**
     * Enumerated value indicating whether this tokenization is
     * implemented using an n-best list or a lattice.
     * 
     * @see TokenizationKind
     */
    KIND((short)5, "kind"),
    TOKEN_TAGGING_LIST((short)6, "tokenTaggingList"),
    PARSE_LIST((short)7, "parseList"),
    DEPENDENCY_PARSE_LIST((short)8, "dependencyParseList"),
    SPAN_LINK_LIST((short)9, "spanLinkList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // METADATA
          return METADATA;
        case 3: // TOKEN_LIST
          return TOKEN_LIST;
        case 4: // LATTICE
          return LATTICE;
        case 5: // KIND
          return KIND;
        case 6: // TOKEN_TAGGING_LIST
          return TOKEN_TAGGING_LIST;
        case 7: // PARSE_LIST
          return PARSE_LIST;
        case 8: // DEPENDENCY_PARSE_LIST
          return DEPENDENCY_PARSE_LIST;
        case 9: // SPAN_LINK_LIST
          return SPAN_LINK_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TOKEN_LIST,_Fields.LATTICE,_Fields.TOKEN_TAGGING_LIST,_Fields.PARSE_LIST,_Fields.DEPENDENCY_PARSE_LIST,_Fields.SPAN_LINK_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.AnnotationMetadata.class)));
    tmpMap.put(_Fields.TOKEN_LIST, new org.apache.thrift.meta_data.FieldMetaData("tokenList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenList.class)));
    tmpMap.put(_Fields.LATTICE, new org.apache.thrift.meta_data.FieldMetaData("lattice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenLattice.class)));
    tmpMap.put(_Fields.KIND, new org.apache.thrift.meta_data.FieldMetaData("kind", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TokenizationKind.class)));
    tmpMap.put(_Fields.TOKEN_TAGGING_LIST, new org.apache.thrift.meta_data.FieldMetaData("tokenTaggingList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TokenTagging.class))));
    tmpMap.put(_Fields.PARSE_LIST, new org.apache.thrift.meta_data.FieldMetaData("parseList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Parse.class))));
    tmpMap.put(_Fields.DEPENDENCY_PARSE_LIST, new org.apache.thrift.meta_data.FieldMetaData("dependencyParseList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DependencyParse.class))));
    tmpMap.put(_Fields.SPAN_LINK_LIST, new org.apache.thrift.meta_data.FieldMetaData("spanLinkList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpanLink.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Tokenization.class, metaDataMap);
  }

  public Tokenization() {
  }

  public Tokenization(
    edu.jhu.hlt.concrete.UUID uuid,
    edu.jhu.hlt.concrete.AnnotationMetadata metadata,
    TokenizationKind kind)
  {
    this();
    this.uuid = uuid;
    this.metadata = metadata;
    this.kind = kind;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Tokenization(Tokenization other) {
    if (other.isSetUuid()) {
      this.uuid = new edu.jhu.hlt.concrete.UUID(other.uuid);
    }
    if (other.isSetMetadata()) {
      this.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata(other.metadata);
    }
    if (other.isSetTokenList()) {
      this.tokenList = new TokenList(other.tokenList);
    }
    if (other.isSetLattice()) {
      this.lattice = new TokenLattice(other.lattice);
    }
    if (other.isSetKind()) {
      this.kind = other.kind;
    }
    if (other.isSetTokenTaggingList()) {
      List<TokenTagging> __this__tokenTaggingList = new ArrayList<TokenTagging>(other.tokenTaggingList.size());
      for (TokenTagging other_element : other.tokenTaggingList) {
        __this__tokenTaggingList.add(new TokenTagging(other_element));
      }
      this.tokenTaggingList = __this__tokenTaggingList;
    }
    if (other.isSetParseList()) {
      List<Parse> __this__parseList = new ArrayList<Parse>(other.parseList.size());
      for (Parse other_element : other.parseList) {
        __this__parseList.add(new Parse(other_element));
      }
      this.parseList = __this__parseList;
    }
    if (other.isSetDependencyParseList()) {
      List<DependencyParse> __this__dependencyParseList = new ArrayList<DependencyParse>(other.dependencyParseList.size());
      for (DependencyParse other_element : other.dependencyParseList) {
        __this__dependencyParseList.add(new DependencyParse(other_element));
      }
      this.dependencyParseList = __this__dependencyParseList;
    }
    if (other.isSetSpanLinkList()) {
      List<SpanLink> __this__spanLinkList = new ArrayList<SpanLink>(other.spanLinkList.size());
      for (SpanLink other_element : other.spanLinkList) {
        __this__spanLinkList.add(new SpanLink(other_element));
      }
      this.spanLinkList = __this__spanLinkList;
    }
  }

  public Tokenization deepCopy() {
    return new Tokenization(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.metadata = null;
    this.tokenList = null;
    this.lattice = null;
    this.kind = null;
    this.tokenTaggingList = null;
    this.parseList = null;
    this.dependencyParseList = null;
    this.spanLinkList = null;
  }

  public edu.jhu.hlt.concrete.UUID getUuid() {
    return this.uuid;
  }

  public Tokenization setUuid(edu.jhu.hlt.concrete.UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  /**
   * Information about where this tokenization came from.
   */
  public edu.jhu.hlt.concrete.AnnotationMetadata getMetadata() {
    return this.metadata;
  }

  /**
   * Information about where this tokenization came from.
   */
  public Tokenization setMetadata(edu.jhu.hlt.concrete.AnnotationMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  /**
   * A wrapper around an ordered list of the tokens in this tokenization.
   * This may also give easy access to the "reconstructed text" associated
   * with this tokenization.
   * This field should only have a value if kind==TOKEN_LIST.
   */
  public TokenList getTokenList() {
    return this.tokenList;
  }

  /**
   * A wrapper around an ordered list of the tokens in this tokenization.
   * This may also give easy access to the "reconstructed text" associated
   * with this tokenization.
   * This field should only have a value if kind==TOKEN_LIST.
   */
  public Tokenization setTokenList(TokenList tokenList) {
    this.tokenList = tokenList;
    return this;
  }

  public void unsetTokenList() {
    this.tokenList = null;
  }

  /** Returns true if field tokenList is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenList() {
    return this.tokenList != null;
  }

  public void setTokenListIsSet(boolean value) {
    if (!value) {
      this.tokenList = null;
    }
  }

  /**
   * A lattice that compactly describes a set of token sequences that
   * might make up this tokenization.  This field should only have a
   * value if kind==LATTICE.
   */
  public TokenLattice getLattice() {
    return this.lattice;
  }

  /**
   * A lattice that compactly describes a set of token sequences that
   * might make up this tokenization.  This field should only have a
   * value if kind==LATTICE.
   */
  public Tokenization setLattice(TokenLattice lattice) {
    this.lattice = lattice;
    return this;
  }

  public void unsetLattice() {
    this.lattice = null;
  }

  /** Returns true if field lattice is set (has been assigned a value) and false otherwise */
  public boolean isSetLattice() {
    return this.lattice != null;
  }

  public void setLatticeIsSet(boolean value) {
    if (!value) {
      this.lattice = null;
    }
  }

  /**
   * Enumerated value indicating whether this tokenization is
   * implemented using an n-best list or a lattice.
   * 
   * @see TokenizationKind
   */
  public TokenizationKind getKind() {
    return this.kind;
  }

  /**
   * Enumerated value indicating whether this tokenization is
   * implemented using an n-best list or a lattice.
   * 
   * @see TokenizationKind
   */
  public Tokenization setKind(TokenizationKind kind) {
    this.kind = kind;
    return this;
  }

  public void unsetKind() {
    this.kind = null;
  }

  /** Returns true if field kind is set (has been assigned a value) and false otherwise */
  public boolean isSetKind() {
    return this.kind != null;
  }

  public void setKindIsSet(boolean value) {
    if (!value) {
      this.kind = null;
    }
  }

  public int getTokenTaggingListSize() {
    return (this.tokenTaggingList == null) ? 0 : this.tokenTaggingList.size();
  }

  public java.util.Iterator<TokenTagging> getTokenTaggingListIterator() {
    return (this.tokenTaggingList == null) ? null : this.tokenTaggingList.iterator();
  }

  public void addToTokenTaggingList(TokenTagging elem) {
    if (this.tokenTaggingList == null) {
      this.tokenTaggingList = new ArrayList<TokenTagging>();
    }
    this.tokenTaggingList.add(elem);
  }

  public List<TokenTagging> getTokenTaggingList() {
    return this.tokenTaggingList;
  }

  public Tokenization setTokenTaggingList(List<TokenTagging> tokenTaggingList) {
    this.tokenTaggingList = tokenTaggingList;
    return this;
  }

  public void unsetTokenTaggingList() {
    this.tokenTaggingList = null;
  }

  /** Returns true if field tokenTaggingList is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenTaggingList() {
    return this.tokenTaggingList != null;
  }

  public void setTokenTaggingListIsSet(boolean value) {
    if (!value) {
      this.tokenTaggingList = null;
    }
  }

  public int getParseListSize() {
    return (this.parseList == null) ? 0 : this.parseList.size();
  }

  public java.util.Iterator<Parse> getParseListIterator() {
    return (this.parseList == null) ? null : this.parseList.iterator();
  }

  public void addToParseList(Parse elem) {
    if (this.parseList == null) {
      this.parseList = new ArrayList<Parse>();
    }
    this.parseList.add(elem);
  }

  public List<Parse> getParseList() {
    return this.parseList;
  }

  public Tokenization setParseList(List<Parse> parseList) {
    this.parseList = parseList;
    return this;
  }

  public void unsetParseList() {
    this.parseList = null;
  }

  /** Returns true if field parseList is set (has been assigned a value) and false otherwise */
  public boolean isSetParseList() {
    return this.parseList != null;
  }

  public void setParseListIsSet(boolean value) {
    if (!value) {
      this.parseList = null;
    }
  }

  public int getDependencyParseListSize() {
    return (this.dependencyParseList == null) ? 0 : this.dependencyParseList.size();
  }

  public java.util.Iterator<DependencyParse> getDependencyParseListIterator() {
    return (this.dependencyParseList == null) ? null : this.dependencyParseList.iterator();
  }

  public void addToDependencyParseList(DependencyParse elem) {
    if (this.dependencyParseList == null) {
      this.dependencyParseList = new ArrayList<DependencyParse>();
    }
    this.dependencyParseList.add(elem);
  }

  public List<DependencyParse> getDependencyParseList() {
    return this.dependencyParseList;
  }

  public Tokenization setDependencyParseList(List<DependencyParse> dependencyParseList) {
    this.dependencyParseList = dependencyParseList;
    return this;
  }

  public void unsetDependencyParseList() {
    this.dependencyParseList = null;
  }

  /** Returns true if field dependencyParseList is set (has been assigned a value) and false otherwise */
  public boolean isSetDependencyParseList() {
    return this.dependencyParseList != null;
  }

  public void setDependencyParseListIsSet(boolean value) {
    if (!value) {
      this.dependencyParseList = null;
    }
  }

  public int getSpanLinkListSize() {
    return (this.spanLinkList == null) ? 0 : this.spanLinkList.size();
  }

  public java.util.Iterator<SpanLink> getSpanLinkListIterator() {
    return (this.spanLinkList == null) ? null : this.spanLinkList.iterator();
  }

  public void addToSpanLinkList(SpanLink elem) {
    if (this.spanLinkList == null) {
      this.spanLinkList = new ArrayList<SpanLink>();
    }
    this.spanLinkList.add(elem);
  }

  public List<SpanLink> getSpanLinkList() {
    return this.spanLinkList;
  }

  public Tokenization setSpanLinkList(List<SpanLink> spanLinkList) {
    this.spanLinkList = spanLinkList;
    return this;
  }

  public void unsetSpanLinkList() {
    this.spanLinkList = null;
  }

  /** Returns true if field spanLinkList is set (has been assigned a value) and false otherwise */
  public boolean isSetSpanLinkList() {
    return this.spanLinkList != null;
  }

  public void setSpanLinkListIsSet(boolean value) {
    if (!value) {
      this.spanLinkList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((edu.jhu.hlt.concrete.AnnotationMetadata)value);
      }
      break;

    case TOKEN_LIST:
      if (value == null) {
        unsetTokenList();
      } else {
        setTokenList((TokenList)value);
      }
      break;

    case LATTICE:
      if (value == null) {
        unsetLattice();
      } else {
        setLattice((TokenLattice)value);
      }
      break;

    case KIND:
      if (value == null) {
        unsetKind();
      } else {
        setKind((TokenizationKind)value);
      }
      break;

    case TOKEN_TAGGING_LIST:
      if (value == null) {
        unsetTokenTaggingList();
      } else {
        setTokenTaggingList((List<TokenTagging>)value);
      }
      break;

    case PARSE_LIST:
      if (value == null) {
        unsetParseList();
      } else {
        setParseList((List<Parse>)value);
      }
      break;

    case DEPENDENCY_PARSE_LIST:
      if (value == null) {
        unsetDependencyParseList();
      } else {
        setDependencyParseList((List<DependencyParse>)value);
      }
      break;

    case SPAN_LINK_LIST:
      if (value == null) {
        unsetSpanLinkList();
      } else {
        setSpanLinkList((List<SpanLink>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case METADATA:
      return getMetadata();

    case TOKEN_LIST:
      return getTokenList();

    case LATTICE:
      return getLattice();

    case KIND:
      return getKind();

    case TOKEN_TAGGING_LIST:
      return getTokenTaggingList();

    case PARSE_LIST:
      return getParseList();

    case DEPENDENCY_PARSE_LIST:
      return getDependencyParseList();

    case SPAN_LINK_LIST:
      return getSpanLinkList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case METADATA:
      return isSetMetadata();
    case TOKEN_LIST:
      return isSetTokenList();
    case LATTICE:
      return isSetLattice();
    case KIND:
      return isSetKind();
    case TOKEN_TAGGING_LIST:
      return isSetTokenTaggingList();
    case PARSE_LIST:
      return isSetParseList();
    case DEPENDENCY_PARSE_LIST:
      return isSetDependencyParseList();
    case SPAN_LINK_LIST:
      return isSetSpanLinkList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Tokenization)
      return this.equals((Tokenization)that);
    return false;
  }

  public boolean equals(Tokenization that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_tokenList = true && this.isSetTokenList();
    boolean that_present_tokenList = true && that.isSetTokenList();
    if (this_present_tokenList || that_present_tokenList) {
      if (!(this_present_tokenList && that_present_tokenList))
        return false;
      if (!this.tokenList.equals(that.tokenList))
        return false;
    }

    boolean this_present_lattice = true && this.isSetLattice();
    boolean that_present_lattice = true && that.isSetLattice();
    if (this_present_lattice || that_present_lattice) {
      if (!(this_present_lattice && that_present_lattice))
        return false;
      if (!this.lattice.equals(that.lattice))
        return false;
    }

    boolean this_present_kind = true && this.isSetKind();
    boolean that_present_kind = true && that.isSetKind();
    if (this_present_kind || that_present_kind) {
      if (!(this_present_kind && that_present_kind))
        return false;
      if (!this.kind.equals(that.kind))
        return false;
    }

    boolean this_present_tokenTaggingList = true && this.isSetTokenTaggingList();
    boolean that_present_tokenTaggingList = true && that.isSetTokenTaggingList();
    if (this_present_tokenTaggingList || that_present_tokenTaggingList) {
      if (!(this_present_tokenTaggingList && that_present_tokenTaggingList))
        return false;
      if (!this.tokenTaggingList.equals(that.tokenTaggingList))
        return false;
    }

    boolean this_present_parseList = true && this.isSetParseList();
    boolean that_present_parseList = true && that.isSetParseList();
    if (this_present_parseList || that_present_parseList) {
      if (!(this_present_parseList && that_present_parseList))
        return false;
      if (!this.parseList.equals(that.parseList))
        return false;
    }

    boolean this_present_dependencyParseList = true && this.isSetDependencyParseList();
    boolean that_present_dependencyParseList = true && that.isSetDependencyParseList();
    if (this_present_dependencyParseList || that_present_dependencyParseList) {
      if (!(this_present_dependencyParseList && that_present_dependencyParseList))
        return false;
      if (!this.dependencyParseList.equals(that.dependencyParseList))
        return false;
    }

    boolean this_present_spanLinkList = true && this.isSetSpanLinkList();
    boolean that_present_spanLinkList = true && that.isSetSpanLinkList();
    if (this_present_spanLinkList || that_present_spanLinkList) {
      if (!(this_present_spanLinkList && that_present_spanLinkList))
        return false;
      if (!this.spanLinkList.equals(that.spanLinkList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uuid = true && (isSetUuid());
    list.add(present_uuid);
    if (present_uuid)
      list.add(uuid);

    boolean present_metadata = true && (isSetMetadata());
    list.add(present_metadata);
    if (present_metadata)
      list.add(metadata);

    boolean present_tokenList = true && (isSetTokenList());
    list.add(present_tokenList);
    if (present_tokenList)
      list.add(tokenList);

    boolean present_lattice = true && (isSetLattice());
    list.add(present_lattice);
    if (present_lattice)
      list.add(lattice);

    boolean present_kind = true && (isSetKind());
    list.add(present_kind);
    if (present_kind)
      list.add(kind.getValue());

    boolean present_tokenTaggingList = true && (isSetTokenTaggingList());
    list.add(present_tokenTaggingList);
    if (present_tokenTaggingList)
      list.add(tokenTaggingList);

    boolean present_parseList = true && (isSetParseList());
    list.add(present_parseList);
    if (present_parseList)
      list.add(parseList);

    boolean present_dependencyParseList = true && (isSetDependencyParseList());
    list.add(present_dependencyParseList);
    if (present_dependencyParseList)
      list.add(dependencyParseList);

    boolean present_spanLinkList = true && (isSetSpanLinkList());
    list.add(present_spanLinkList);
    if (present_spanLinkList)
      list.add(spanLinkList);

    return list.hashCode();
  }

  @Override
  public int compareTo(Tokenization other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenList()).compareTo(other.isSetTokenList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenList, other.tokenList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLattice()).compareTo(other.isSetLattice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLattice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lattice, other.lattice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKind()).compareTo(other.isSetKind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kind, other.kind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenTaggingList()).compareTo(other.isSetTokenTaggingList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenTaggingList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenTaggingList, other.tokenTaggingList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParseList()).compareTo(other.isSetParseList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParseList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parseList, other.parseList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDependencyParseList()).compareTo(other.isSetDependencyParseList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependencyParseList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependencyParseList, other.dependencyParseList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpanLinkList()).compareTo(other.isSetSpanLinkList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpanLinkList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanLinkList, other.spanLinkList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Tokenization(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata:");
    if (this.metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata);
    }
    first = false;
    if (isSetTokenList()) {
      if (!first) sb.append(", ");
      sb.append("tokenList:");
      if (this.tokenList == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenList);
      }
      first = false;
    }
    if (isSetLattice()) {
      if (!first) sb.append(", ");
      sb.append("lattice:");
      if (this.lattice == null) {
        sb.append("null");
      } else {
        sb.append(this.lattice);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("kind:");
    if (this.kind == null) {
      sb.append("null");
    } else {
      sb.append(this.kind);
    }
    first = false;
    if (isSetTokenTaggingList()) {
      if (!first) sb.append(", ");
      sb.append("tokenTaggingList:");
      if (this.tokenTaggingList == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenTaggingList);
      }
      first = false;
    }
    if (isSetParseList()) {
      if (!first) sb.append(", ");
      sb.append("parseList:");
      if (this.parseList == null) {
        sb.append("null");
      } else {
        sb.append(this.parseList);
      }
      first = false;
    }
    if (isSetDependencyParseList()) {
      if (!first) sb.append(", ");
      sb.append("dependencyParseList:");
      if (this.dependencyParseList == null) {
        sb.append("null");
      } else {
        sb.append(this.dependencyParseList);
      }
      first = false;
    }
    if (isSetSpanLinkList()) {
      if (!first) sb.append(", ");
      sb.append("spanLinkList:");
      if (this.spanLinkList == null) {
        sb.append("null");
      } else {
        sb.append(this.spanLinkList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (metadata == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata' was not present! Struct: " + toString());
    }
    if (kind == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'kind' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uuid != null) {
      uuid.validate();
    }
    if (metadata != null) {
      metadata.validate();
    }
    if (tokenList != null) {
      tokenList.validate();
    }
    if (lattice != null) {
      lattice.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenizationStandardSchemeFactory implements SchemeFactory {
    public TokenizationStandardScheme getScheme() {
      return new TokenizationStandardScheme();
    }
  }

  private static class TokenizationStandardScheme extends StandardScheme<Tokenization> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Tokenization struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uuid = new edu.jhu.hlt.concrete.UUID();
              struct.uuid.read(iprot);
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata();
              struct.metadata.read(iprot);
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokenList = new TokenList();
              struct.tokenList.read(iprot);
              struct.setTokenListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LATTICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lattice = new TokenLattice();
              struct.lattice.read(iprot);
              struct.setLatticeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // KIND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.kind = edu.jhu.hlt.concrete.TokenizationKind.findByValue(iprot.readI32());
              struct.setKindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOKEN_TAGGING_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.tokenTaggingList = new ArrayList<TokenTagging>(_list80.size);
                TokenTagging _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = new TokenTagging();
                  _elem81.read(iprot);
                  struct.tokenTaggingList.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setTokenTaggingListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARSE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.parseList = new ArrayList<Parse>(_list83.size);
                Parse _elem84;
                for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                {
                  _elem84 = new Parse();
                  _elem84.read(iprot);
                  struct.parseList.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setParseListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEPENDENCY_PARSE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                struct.dependencyParseList = new ArrayList<DependencyParse>(_list86.size);
                DependencyParse _elem87;
                for (int _i88 = 0; _i88 < _list86.size; ++_i88)
                {
                  _elem87 = new DependencyParse();
                  _elem87.read(iprot);
                  struct.dependencyParseList.add(_elem87);
                }
                iprot.readListEnd();
              }
              struct.setDependencyParseListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SPAN_LINK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list89 = iprot.readListBegin();
                struct.spanLinkList = new ArrayList<SpanLink>(_list89.size);
                SpanLink _elem90;
                for (int _i91 = 0; _i91 < _list89.size; ++_i91)
                {
                  _elem90 = new SpanLink();
                  _elem90.read(iprot);
                  struct.spanLinkList.add(_elem90);
                }
                iprot.readListEnd();
              }
              struct.setSpanLinkListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Tokenization struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        struct.uuid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.metadata != null) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        struct.metadata.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tokenList != null) {
        if (struct.isSetTokenList()) {
          oprot.writeFieldBegin(TOKEN_LIST_FIELD_DESC);
          struct.tokenList.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lattice != null) {
        if (struct.isSetLattice()) {
          oprot.writeFieldBegin(LATTICE_FIELD_DESC);
          struct.lattice.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kind != null) {
        oprot.writeFieldBegin(KIND_FIELD_DESC);
        oprot.writeI32(struct.kind.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.tokenTaggingList != null) {
        if (struct.isSetTokenTaggingList()) {
          oprot.writeFieldBegin(TOKEN_TAGGING_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tokenTaggingList.size()));
            for (TokenTagging _iter92 : struct.tokenTaggingList)
            {
              _iter92.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.parseList != null) {
        if (struct.isSetParseList()) {
          oprot.writeFieldBegin(PARSE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parseList.size()));
            for (Parse _iter93 : struct.parseList)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dependencyParseList != null) {
        if (struct.isSetDependencyParseList()) {
          oprot.writeFieldBegin(DEPENDENCY_PARSE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dependencyParseList.size()));
            for (DependencyParse _iter94 : struct.dependencyParseList)
            {
              _iter94.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.spanLinkList != null) {
        if (struct.isSetSpanLinkList()) {
          oprot.writeFieldBegin(SPAN_LINK_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spanLinkList.size()));
            for (SpanLink _iter95 : struct.spanLinkList)
            {
              _iter95.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenizationTupleSchemeFactory implements SchemeFactory {
    public TokenizationTupleScheme getScheme() {
      return new TokenizationTupleScheme();
    }
  }

  private static class TokenizationTupleScheme extends TupleScheme<Tokenization> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Tokenization struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.uuid.write(oprot);
      struct.metadata.write(oprot);
      oprot.writeI32(struct.kind.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetTokenList()) {
        optionals.set(0);
      }
      if (struct.isSetLattice()) {
        optionals.set(1);
      }
      if (struct.isSetTokenTaggingList()) {
        optionals.set(2);
      }
      if (struct.isSetParseList()) {
        optionals.set(3);
      }
      if (struct.isSetDependencyParseList()) {
        optionals.set(4);
      }
      if (struct.isSetSpanLinkList()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTokenList()) {
        struct.tokenList.write(oprot);
      }
      if (struct.isSetLattice()) {
        struct.lattice.write(oprot);
      }
      if (struct.isSetTokenTaggingList()) {
        {
          oprot.writeI32(struct.tokenTaggingList.size());
          for (TokenTagging _iter96 : struct.tokenTaggingList)
          {
            _iter96.write(oprot);
          }
        }
      }
      if (struct.isSetParseList()) {
        {
          oprot.writeI32(struct.parseList.size());
          for (Parse _iter97 : struct.parseList)
          {
            _iter97.write(oprot);
          }
        }
      }
      if (struct.isSetDependencyParseList()) {
        {
          oprot.writeI32(struct.dependencyParseList.size());
          for (DependencyParse _iter98 : struct.dependencyParseList)
          {
            _iter98.write(oprot);
          }
        }
      }
      if (struct.isSetSpanLinkList()) {
        {
          oprot.writeI32(struct.spanLinkList.size());
          for (SpanLink _iter99 : struct.spanLinkList)
          {
            _iter99.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Tokenization struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuid = new edu.jhu.hlt.concrete.UUID();
      struct.uuid.read(iprot);
      struct.setUuidIsSet(true);
      struct.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata();
      struct.metadata.read(iprot);
      struct.setMetadataIsSet(true);
      struct.kind = edu.jhu.hlt.concrete.TokenizationKind.findByValue(iprot.readI32());
      struct.setKindIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.tokenList = new TokenList();
        struct.tokenList.read(iprot);
        struct.setTokenListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lattice = new TokenLattice();
        struct.lattice.read(iprot);
        struct.setLatticeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list100 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tokenTaggingList = new ArrayList<TokenTagging>(_list100.size);
          TokenTagging _elem101;
          for (int _i102 = 0; _i102 < _list100.size; ++_i102)
          {
            _elem101 = new TokenTagging();
            _elem101.read(iprot);
            struct.tokenTaggingList.add(_elem101);
          }
        }
        struct.setTokenTaggingListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.parseList = new ArrayList<Parse>(_list103.size);
          Parse _elem104;
          for (int _i105 = 0; _i105 < _list103.size; ++_i105)
          {
            _elem104 = new Parse();
            _elem104.read(iprot);
            struct.parseList.add(_elem104);
          }
        }
        struct.setParseListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dependencyParseList = new ArrayList<DependencyParse>(_list106.size);
          DependencyParse _elem107;
          for (int _i108 = 0; _i108 < _list106.size; ++_i108)
          {
            _elem107 = new DependencyParse();
            _elem107.read(iprot);
            struct.dependencyParseList.add(_elem107);
          }
        }
        struct.setDependencyParseListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spanLinkList = new ArrayList<SpanLink>(_list109.size);
          SpanLink _elem110;
          for (int _i111 = 0; _i111 < _list109.size; ++_i111)
          {
            _elem110 = new SpanLink();
            _elem110.read(iprot);
            struct.spanLinkList.add(_elem110);
          }
        }
        struct.setSpanLinkListIsSet(true);
      }
    }
  }

}

