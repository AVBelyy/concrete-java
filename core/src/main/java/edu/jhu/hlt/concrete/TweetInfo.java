/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class TweetInfo implements org.apache.thrift.TBase<TweetInfo, TweetInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TweetInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TweetInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TRUNCATED_FIELD_DESC = new org.apache.thrift.protocol.TField("truncated", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField ENTITIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entities", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField COORDINATES_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinates", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("place", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField FAVORITED_FIELD_DESC = new org.apache.thrift.protocol.TField("favorited", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField RETWEETED_FIELD_DESC = new org.apache.thrift.protocol.TField("retweeted", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField RETWEET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("retweetCount", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField IN_REPLY_TO_SCREEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("inReplyToScreenName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField IN_REPLY_TO_STATUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inReplyToStatusId", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField IN_REPLY_TO_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inReplyToUserId", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField RETWEETED_SCREEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("retweetedScreenName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField RETWEETED_STATUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("retweetedStatusId", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField RETWEETED_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("retweetedUserId", org.apache.thrift.protocol.TType.I64, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TweetInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TweetInfoTupleSchemeFactory();

  private long id; // optional
  private java.lang.String text; // optional
  private java.lang.String createdAt; // optional
  private TwitterUser user; // optional
  private boolean truncated; // optional
  private TwitterEntities entities; // optional
  private java.lang.String source; // optional
  private TwitterCoordinates coordinates; // optional
  private TwitterPlace place; // optional
  private boolean favorited; // optional
  private boolean retweeted; // optional
  private int retweetCount; // optional
  private java.lang.String inReplyToScreenName; // optional
  private long inReplyToStatusId; // optional
  private long inReplyToUserId; // optional
  private java.lang.String retweetedScreenName; // optional
  private long retweetedStatusId; // optional
  private long retweetedUserId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TEXT((short)3, "text"),
    CREATED_AT((short)4, "createdAt"),
    USER((short)5, "user"),
    TRUNCATED((short)6, "truncated"),
    ENTITIES((short)7, "entities"),
    SOURCE((short)8, "source"),
    COORDINATES((short)9, "coordinates"),
    PLACE((short)11, "place"),
    FAVORITED((short)12, "favorited"),
    RETWEETED((short)13, "retweeted"),
    RETWEET_COUNT((short)14, "retweetCount"),
    IN_REPLY_TO_SCREEN_NAME((short)15, "inReplyToScreenName"),
    IN_REPLY_TO_STATUS_ID((short)16, "inReplyToStatusId"),
    IN_REPLY_TO_USER_ID((short)18, "inReplyToUserId"),
    RETWEETED_SCREEN_NAME((short)19, "retweetedScreenName"),
    RETWEETED_STATUS_ID((short)20, "retweetedStatusId"),
    RETWEETED_USER_ID((short)21, "retweetedUserId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 3: // TEXT
          return TEXT;
        case 4: // CREATED_AT
          return CREATED_AT;
        case 5: // USER
          return USER;
        case 6: // TRUNCATED
          return TRUNCATED;
        case 7: // ENTITIES
          return ENTITIES;
        case 8: // SOURCE
          return SOURCE;
        case 9: // COORDINATES
          return COORDINATES;
        case 11: // PLACE
          return PLACE;
        case 12: // FAVORITED
          return FAVORITED;
        case 13: // RETWEETED
          return RETWEETED;
        case 14: // RETWEET_COUNT
          return RETWEET_COUNT;
        case 15: // IN_REPLY_TO_SCREEN_NAME
          return IN_REPLY_TO_SCREEN_NAME;
        case 16: // IN_REPLY_TO_STATUS_ID
          return IN_REPLY_TO_STATUS_ID;
        case 18: // IN_REPLY_TO_USER_ID
          return IN_REPLY_TO_USER_ID;
        case 19: // RETWEETED_SCREEN_NAME
          return RETWEETED_SCREEN_NAME;
        case 20: // RETWEETED_STATUS_ID
          return RETWEETED_STATUS_ID;
        case 21: // RETWEETED_USER_ID
          return RETWEETED_USER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TRUNCATED_ISSET_ID = 1;
  private static final int __FAVORITED_ISSET_ID = 2;
  private static final int __RETWEETED_ISSET_ID = 3;
  private static final int __RETWEETCOUNT_ISSET_ID = 4;
  private static final int __INREPLYTOSTATUSID_ISSET_ID = 5;
  private static final int __INREPLYTOUSERID_ISSET_ID = 6;
  private static final int __RETWEETEDSTATUSID_ISSET_ID = 7;
  private static final int __RETWEETEDUSERID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.TEXT,_Fields.CREATED_AT,_Fields.USER,_Fields.TRUNCATED,_Fields.ENTITIES,_Fields.SOURCE,_Fields.COORDINATES,_Fields.PLACE,_Fields.FAVORITED,_Fields.RETWEETED,_Fields.RETWEET_COUNT,_Fields.IN_REPLY_TO_SCREEN_NAME,_Fields.IN_REPLY_TO_STATUS_ID,_Fields.IN_REPLY_TO_USER_ID,_Fields.RETWEETED_SCREEN_NAME,_Fields.RETWEETED_STATUS_ID,_Fields.RETWEETED_USER_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwitterUser.class)));
    tmpMap.put(_Fields.TRUNCATED, new org.apache.thrift.meta_data.FieldMetaData("truncated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENTITIES, new org.apache.thrift.meta_data.FieldMetaData("entities", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwitterEntities.class)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COORDINATES, new org.apache.thrift.meta_data.FieldMetaData("coordinates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwitterCoordinates.class)));
    tmpMap.put(_Fields.PLACE, new org.apache.thrift.meta_data.FieldMetaData("place", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwitterPlace.class)));
    tmpMap.put(_Fields.FAVORITED, new org.apache.thrift.meta_data.FieldMetaData("favorited", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RETWEETED, new org.apache.thrift.meta_data.FieldMetaData("retweeted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RETWEET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("retweetCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IN_REPLY_TO_SCREEN_NAME, new org.apache.thrift.meta_data.FieldMetaData("inReplyToScreenName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IN_REPLY_TO_STATUS_ID, new org.apache.thrift.meta_data.FieldMetaData("inReplyToStatusId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IN_REPLY_TO_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("inReplyToUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RETWEETED_SCREEN_NAME, new org.apache.thrift.meta_data.FieldMetaData("retweetedScreenName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETWEETED_STATUS_ID, new org.apache.thrift.meta_data.FieldMetaData("retweetedStatusId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RETWEETED_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("retweetedUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TweetInfo.class, metaDataMap);
  }

  public TweetInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TweetInfo(TweetInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }
    if (other.isSetUser()) {
      this.user = new TwitterUser(other.user);
    }
    this.truncated = other.truncated;
    if (other.isSetEntities()) {
      this.entities = new TwitterEntities(other.entities);
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetCoordinates()) {
      this.coordinates = new TwitterCoordinates(other.coordinates);
    }
    if (other.isSetPlace()) {
      this.place = new TwitterPlace(other.place);
    }
    this.favorited = other.favorited;
    this.retweeted = other.retweeted;
    this.retweetCount = other.retweetCount;
    if (other.isSetInReplyToScreenName()) {
      this.inReplyToScreenName = other.inReplyToScreenName;
    }
    this.inReplyToStatusId = other.inReplyToStatusId;
    this.inReplyToUserId = other.inReplyToUserId;
    if (other.isSetRetweetedScreenName()) {
      this.retweetedScreenName = other.retweetedScreenName;
    }
    this.retweetedStatusId = other.retweetedStatusId;
    this.retweetedUserId = other.retweetedUserId;
  }

  public TweetInfo deepCopy() {
    return new TweetInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.text = null;
    this.createdAt = null;
    this.user = null;
    setTruncatedIsSet(false);
    this.truncated = false;
    this.entities = null;
    this.source = null;
    this.coordinates = null;
    this.place = null;
    setFavoritedIsSet(false);
    this.favorited = false;
    setRetweetedIsSet(false);
    this.retweeted = false;
    setRetweetCountIsSet(false);
    this.retweetCount = 0;
    this.inReplyToScreenName = null;
    setInReplyToStatusIdIsSet(false);
    this.inReplyToStatusId = 0;
    setInReplyToUserIdIsSet(false);
    this.inReplyToUserId = 0;
    this.retweetedScreenName = null;
    setRetweetedStatusIdIsSet(false);
    this.retweetedStatusId = 0;
    setRetweetedUserIdIsSet(false);
    this.retweetedUserId = 0;
  }

  public long getId() {
    return this.id;
  }

  public TweetInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getText() {
    return this.text;
  }

  public TweetInfo setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public java.lang.String getCreatedAt() {
    return this.createdAt;
  }

  public TweetInfo setCreatedAt(java.lang.String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public TwitterUser getUser() {
    return this.user;
  }

  public TweetInfo setUser(TwitterUser user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public boolean isTruncated() {
    return this.truncated;
  }

  public TweetInfo setTruncated(boolean truncated) {
    this.truncated = truncated;
    setTruncatedIsSet(true);
    return this;
  }

  public void unsetTruncated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRUNCATED_ISSET_ID);
  }

  /** Returns true if field truncated is set (has been assigned a value) and false otherwise */
  public boolean isSetTruncated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRUNCATED_ISSET_ID);
  }

  public void setTruncatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRUNCATED_ISSET_ID, value);
  }

  public TwitterEntities getEntities() {
    return this.entities;
  }

  public TweetInfo setEntities(TwitterEntities entities) {
    this.entities = entities;
    return this;
  }

  public void unsetEntities() {
    this.entities = null;
  }

  /** Returns true if field entities is set (has been assigned a value) and false otherwise */
  public boolean isSetEntities() {
    return this.entities != null;
  }

  public void setEntitiesIsSet(boolean value) {
    if (!value) {
      this.entities = null;
    }
  }

  public java.lang.String getSource() {
    return this.source;
  }

  public TweetInfo setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public TwitterCoordinates getCoordinates() {
    return this.coordinates;
  }

  public TweetInfo setCoordinates(TwitterCoordinates coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  public void unsetCoordinates() {
    this.coordinates = null;
  }

  /** Returns true if field coordinates is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinates() {
    return this.coordinates != null;
  }

  public void setCoordinatesIsSet(boolean value) {
    if (!value) {
      this.coordinates = null;
    }
  }

  public TwitterPlace getPlace() {
    return this.place;
  }

  public TweetInfo setPlace(TwitterPlace place) {
    this.place = place;
    return this;
  }

  public void unsetPlace() {
    this.place = null;
  }

  /** Returns true if field place is set (has been assigned a value) and false otherwise */
  public boolean isSetPlace() {
    return this.place != null;
  }

  public void setPlaceIsSet(boolean value) {
    if (!value) {
      this.place = null;
    }
  }

  public boolean isFavorited() {
    return this.favorited;
  }

  public TweetInfo setFavorited(boolean favorited) {
    this.favorited = favorited;
    setFavoritedIsSet(true);
    return this;
  }

  public void unsetFavorited() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAVORITED_ISSET_ID);
  }

  /** Returns true if field favorited is set (has been assigned a value) and false otherwise */
  public boolean isSetFavorited() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAVORITED_ISSET_ID);
  }

  public void setFavoritedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAVORITED_ISSET_ID, value);
  }

  public boolean isRetweeted() {
    return this.retweeted;
  }

  public TweetInfo setRetweeted(boolean retweeted) {
    this.retweeted = retweeted;
    setRetweetedIsSet(true);
    return this;
  }

  public void unsetRetweeted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RETWEETED_ISSET_ID);
  }

  /** Returns true if field retweeted is set (has been assigned a value) and false otherwise */
  public boolean isSetRetweeted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RETWEETED_ISSET_ID);
  }

  public void setRetweetedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RETWEETED_ISSET_ID, value);
  }

  public int getRetweetCount() {
    return this.retweetCount;
  }

  public TweetInfo setRetweetCount(int retweetCount) {
    this.retweetCount = retweetCount;
    setRetweetCountIsSet(true);
    return this;
  }

  public void unsetRetweetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RETWEETCOUNT_ISSET_ID);
  }

  /** Returns true if field retweetCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRetweetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RETWEETCOUNT_ISSET_ID);
  }

  public void setRetweetCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RETWEETCOUNT_ISSET_ID, value);
  }

  public java.lang.String getInReplyToScreenName() {
    return this.inReplyToScreenName;
  }

  public TweetInfo setInReplyToScreenName(java.lang.String inReplyToScreenName) {
    this.inReplyToScreenName = inReplyToScreenName;
    return this;
  }

  public void unsetInReplyToScreenName() {
    this.inReplyToScreenName = null;
  }

  /** Returns true if field inReplyToScreenName is set (has been assigned a value) and false otherwise */
  public boolean isSetInReplyToScreenName() {
    return this.inReplyToScreenName != null;
  }

  public void setInReplyToScreenNameIsSet(boolean value) {
    if (!value) {
      this.inReplyToScreenName = null;
    }
  }

  public long getInReplyToStatusId() {
    return this.inReplyToStatusId;
  }

  public TweetInfo setInReplyToStatusId(long inReplyToStatusId) {
    this.inReplyToStatusId = inReplyToStatusId;
    setInReplyToStatusIdIsSet(true);
    return this;
  }

  public void unsetInReplyToStatusId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INREPLYTOSTATUSID_ISSET_ID);
  }

  /** Returns true if field inReplyToStatusId is set (has been assigned a value) and false otherwise */
  public boolean isSetInReplyToStatusId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INREPLYTOSTATUSID_ISSET_ID);
  }

  public void setInReplyToStatusIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INREPLYTOSTATUSID_ISSET_ID, value);
  }

  public long getInReplyToUserId() {
    return this.inReplyToUserId;
  }

  public TweetInfo setInReplyToUserId(long inReplyToUserId) {
    this.inReplyToUserId = inReplyToUserId;
    setInReplyToUserIdIsSet(true);
    return this;
  }

  public void unsetInReplyToUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INREPLYTOUSERID_ISSET_ID);
  }

  /** Returns true if field inReplyToUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetInReplyToUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INREPLYTOUSERID_ISSET_ID);
  }

  public void setInReplyToUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INREPLYTOUSERID_ISSET_ID, value);
  }

  public java.lang.String getRetweetedScreenName() {
    return this.retweetedScreenName;
  }

  public TweetInfo setRetweetedScreenName(java.lang.String retweetedScreenName) {
    this.retweetedScreenName = retweetedScreenName;
    return this;
  }

  public void unsetRetweetedScreenName() {
    this.retweetedScreenName = null;
  }

  /** Returns true if field retweetedScreenName is set (has been assigned a value) and false otherwise */
  public boolean isSetRetweetedScreenName() {
    return this.retweetedScreenName != null;
  }

  public void setRetweetedScreenNameIsSet(boolean value) {
    if (!value) {
      this.retweetedScreenName = null;
    }
  }

  public long getRetweetedStatusId() {
    return this.retweetedStatusId;
  }

  public TweetInfo setRetweetedStatusId(long retweetedStatusId) {
    this.retweetedStatusId = retweetedStatusId;
    setRetweetedStatusIdIsSet(true);
    return this;
  }

  public void unsetRetweetedStatusId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RETWEETEDSTATUSID_ISSET_ID);
  }

  /** Returns true if field retweetedStatusId is set (has been assigned a value) and false otherwise */
  public boolean isSetRetweetedStatusId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RETWEETEDSTATUSID_ISSET_ID);
  }

  public void setRetweetedStatusIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RETWEETEDSTATUSID_ISSET_ID, value);
  }

  public long getRetweetedUserId() {
    return this.retweetedUserId;
  }

  public TweetInfo setRetweetedUserId(long retweetedUserId) {
    this.retweetedUserId = retweetedUserId;
    setRetweetedUserIdIsSet(true);
    return this;
  }

  public void unsetRetweetedUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RETWEETEDUSERID_ISSET_ID);
  }

  /** Returns true if field retweetedUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetRetweetedUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RETWEETEDUSERID_ISSET_ID);
  }

  public void setRetweetedUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RETWEETEDUSERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((java.lang.String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((java.lang.String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((TwitterUser)value);
      }
      break;

    case TRUNCATED:
      if (value == null) {
        unsetTruncated();
      } else {
        setTruncated((java.lang.Boolean)value);
      }
      break;

    case ENTITIES:
      if (value == null) {
        unsetEntities();
      } else {
        setEntities((TwitterEntities)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((java.lang.String)value);
      }
      break;

    case COORDINATES:
      if (value == null) {
        unsetCoordinates();
      } else {
        setCoordinates((TwitterCoordinates)value);
      }
      break;

    case PLACE:
      if (value == null) {
        unsetPlace();
      } else {
        setPlace((TwitterPlace)value);
      }
      break;

    case FAVORITED:
      if (value == null) {
        unsetFavorited();
      } else {
        setFavorited((java.lang.Boolean)value);
      }
      break;

    case RETWEETED:
      if (value == null) {
        unsetRetweeted();
      } else {
        setRetweeted((java.lang.Boolean)value);
      }
      break;

    case RETWEET_COUNT:
      if (value == null) {
        unsetRetweetCount();
      } else {
        setRetweetCount((java.lang.Integer)value);
      }
      break;

    case IN_REPLY_TO_SCREEN_NAME:
      if (value == null) {
        unsetInReplyToScreenName();
      } else {
        setInReplyToScreenName((java.lang.String)value);
      }
      break;

    case IN_REPLY_TO_STATUS_ID:
      if (value == null) {
        unsetInReplyToStatusId();
      } else {
        setInReplyToStatusId((java.lang.Long)value);
      }
      break;

    case IN_REPLY_TO_USER_ID:
      if (value == null) {
        unsetInReplyToUserId();
      } else {
        setInReplyToUserId((java.lang.Long)value);
      }
      break;

    case RETWEETED_SCREEN_NAME:
      if (value == null) {
        unsetRetweetedScreenName();
      } else {
        setRetweetedScreenName((java.lang.String)value);
      }
      break;

    case RETWEETED_STATUS_ID:
      if (value == null) {
        unsetRetweetedStatusId();
      } else {
        setRetweetedStatusId((java.lang.Long)value);
      }
      break;

    case RETWEETED_USER_ID:
      if (value == null) {
        unsetRetweetedUserId();
      } else {
        setRetweetedUserId((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TEXT:
      return getText();

    case CREATED_AT:
      return getCreatedAt();

    case USER:
      return getUser();

    case TRUNCATED:
      return isTruncated();

    case ENTITIES:
      return getEntities();

    case SOURCE:
      return getSource();

    case COORDINATES:
      return getCoordinates();

    case PLACE:
      return getPlace();

    case FAVORITED:
      return isFavorited();

    case RETWEETED:
      return isRetweeted();

    case RETWEET_COUNT:
      return getRetweetCount();

    case IN_REPLY_TO_SCREEN_NAME:
      return getInReplyToScreenName();

    case IN_REPLY_TO_STATUS_ID:
      return getInReplyToStatusId();

    case IN_REPLY_TO_USER_ID:
      return getInReplyToUserId();

    case RETWEETED_SCREEN_NAME:
      return getRetweetedScreenName();

    case RETWEETED_STATUS_ID:
      return getRetweetedStatusId();

    case RETWEETED_USER_ID:
      return getRetweetedUserId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TEXT:
      return isSetText();
    case CREATED_AT:
      return isSetCreatedAt();
    case USER:
      return isSetUser();
    case TRUNCATED:
      return isSetTruncated();
    case ENTITIES:
      return isSetEntities();
    case SOURCE:
      return isSetSource();
    case COORDINATES:
      return isSetCoordinates();
    case PLACE:
      return isSetPlace();
    case FAVORITED:
      return isSetFavorited();
    case RETWEETED:
      return isSetRetweeted();
    case RETWEET_COUNT:
      return isSetRetweetCount();
    case IN_REPLY_TO_SCREEN_NAME:
      return isSetInReplyToScreenName();
    case IN_REPLY_TO_STATUS_ID:
      return isSetInReplyToStatusId();
    case IN_REPLY_TO_USER_ID:
      return isSetInReplyToUserId();
    case RETWEETED_SCREEN_NAME:
      return isSetRetweetedScreenName();
    case RETWEETED_STATUS_ID:
      return isSetRetweetedStatusId();
    case RETWEETED_USER_ID:
      return isSetRetweetedUserId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TweetInfo)
      return this.equals((TweetInfo)that);
    return false;
  }

  public boolean equals(TweetInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_truncated = true && this.isSetTruncated();
    boolean that_present_truncated = true && that.isSetTruncated();
    if (this_present_truncated || that_present_truncated) {
      if (!(this_present_truncated && that_present_truncated))
        return false;
      if (this.truncated != that.truncated)
        return false;
    }

    boolean this_present_entities = true && this.isSetEntities();
    boolean that_present_entities = true && that.isSetEntities();
    if (this_present_entities || that_present_entities) {
      if (!(this_present_entities && that_present_entities))
        return false;
      if (!this.entities.equals(that.entities))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_coordinates = true && this.isSetCoordinates();
    boolean that_present_coordinates = true && that.isSetCoordinates();
    if (this_present_coordinates || that_present_coordinates) {
      if (!(this_present_coordinates && that_present_coordinates))
        return false;
      if (!this.coordinates.equals(that.coordinates))
        return false;
    }

    boolean this_present_place = true && this.isSetPlace();
    boolean that_present_place = true && that.isSetPlace();
    if (this_present_place || that_present_place) {
      if (!(this_present_place && that_present_place))
        return false;
      if (!this.place.equals(that.place))
        return false;
    }

    boolean this_present_favorited = true && this.isSetFavorited();
    boolean that_present_favorited = true && that.isSetFavorited();
    if (this_present_favorited || that_present_favorited) {
      if (!(this_present_favorited && that_present_favorited))
        return false;
      if (this.favorited != that.favorited)
        return false;
    }

    boolean this_present_retweeted = true && this.isSetRetweeted();
    boolean that_present_retweeted = true && that.isSetRetweeted();
    if (this_present_retweeted || that_present_retweeted) {
      if (!(this_present_retweeted && that_present_retweeted))
        return false;
      if (this.retweeted != that.retweeted)
        return false;
    }

    boolean this_present_retweetCount = true && this.isSetRetweetCount();
    boolean that_present_retweetCount = true && that.isSetRetweetCount();
    if (this_present_retweetCount || that_present_retweetCount) {
      if (!(this_present_retweetCount && that_present_retweetCount))
        return false;
      if (this.retweetCount != that.retweetCount)
        return false;
    }

    boolean this_present_inReplyToScreenName = true && this.isSetInReplyToScreenName();
    boolean that_present_inReplyToScreenName = true && that.isSetInReplyToScreenName();
    if (this_present_inReplyToScreenName || that_present_inReplyToScreenName) {
      if (!(this_present_inReplyToScreenName && that_present_inReplyToScreenName))
        return false;
      if (!this.inReplyToScreenName.equals(that.inReplyToScreenName))
        return false;
    }

    boolean this_present_inReplyToStatusId = true && this.isSetInReplyToStatusId();
    boolean that_present_inReplyToStatusId = true && that.isSetInReplyToStatusId();
    if (this_present_inReplyToStatusId || that_present_inReplyToStatusId) {
      if (!(this_present_inReplyToStatusId && that_present_inReplyToStatusId))
        return false;
      if (this.inReplyToStatusId != that.inReplyToStatusId)
        return false;
    }

    boolean this_present_inReplyToUserId = true && this.isSetInReplyToUserId();
    boolean that_present_inReplyToUserId = true && that.isSetInReplyToUserId();
    if (this_present_inReplyToUserId || that_present_inReplyToUserId) {
      if (!(this_present_inReplyToUserId && that_present_inReplyToUserId))
        return false;
      if (this.inReplyToUserId != that.inReplyToUserId)
        return false;
    }

    boolean this_present_retweetedScreenName = true && this.isSetRetweetedScreenName();
    boolean that_present_retweetedScreenName = true && that.isSetRetweetedScreenName();
    if (this_present_retweetedScreenName || that_present_retweetedScreenName) {
      if (!(this_present_retweetedScreenName && that_present_retweetedScreenName))
        return false;
      if (!this.retweetedScreenName.equals(that.retweetedScreenName))
        return false;
    }

    boolean this_present_retweetedStatusId = true && this.isSetRetweetedStatusId();
    boolean that_present_retweetedStatusId = true && that.isSetRetweetedStatusId();
    if (this_present_retweetedStatusId || that_present_retweetedStatusId) {
      if (!(this_present_retweetedStatusId && that_present_retweetedStatusId))
        return false;
      if (this.retweetedStatusId != that.retweetedStatusId)
        return false;
    }

    boolean this_present_retweetedUserId = true && this.isSetRetweetedUserId();
    boolean that_present_retweetedUserId = true && that.isSetRetweetedUserId();
    if (this_present_retweetedUserId || that_present_retweetedUserId) {
      if (!(this_present_retweetedUserId && that_present_retweetedUserId))
        return false;
      if (this.retweetedUserId != that.retweetedUserId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
    if (isSetText())
      hashCode = hashCode * 8191 + text.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreatedAt()) ? 131071 : 524287);
    if (isSetCreatedAt())
      hashCode = hashCode * 8191 + createdAt.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetTruncated()) ? 131071 : 524287);
    if (isSetTruncated())
      hashCode = hashCode * 8191 + ((truncated) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEntities()) ? 131071 : 524287);
    if (isSetEntities())
      hashCode = hashCode * 8191 + entities.hashCode();

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + source.hashCode();

    hashCode = hashCode * 8191 + ((isSetCoordinates()) ? 131071 : 524287);
    if (isSetCoordinates())
      hashCode = hashCode * 8191 + coordinates.hashCode();

    hashCode = hashCode * 8191 + ((isSetPlace()) ? 131071 : 524287);
    if (isSetPlace())
      hashCode = hashCode * 8191 + place.hashCode();

    hashCode = hashCode * 8191 + ((isSetFavorited()) ? 131071 : 524287);
    if (isSetFavorited())
      hashCode = hashCode * 8191 + ((favorited) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRetweeted()) ? 131071 : 524287);
    if (isSetRetweeted())
      hashCode = hashCode * 8191 + ((retweeted) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRetweetCount()) ? 131071 : 524287);
    if (isSetRetweetCount())
      hashCode = hashCode * 8191 + retweetCount;

    hashCode = hashCode * 8191 + ((isSetInReplyToScreenName()) ? 131071 : 524287);
    if (isSetInReplyToScreenName())
      hashCode = hashCode * 8191 + inReplyToScreenName.hashCode();

    hashCode = hashCode * 8191 + ((isSetInReplyToStatusId()) ? 131071 : 524287);
    if (isSetInReplyToStatusId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(inReplyToStatusId);

    hashCode = hashCode * 8191 + ((isSetInReplyToUserId()) ? 131071 : 524287);
    if (isSetInReplyToUserId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(inReplyToUserId);

    hashCode = hashCode * 8191 + ((isSetRetweetedScreenName()) ? 131071 : 524287);
    if (isSetRetweetedScreenName())
      hashCode = hashCode * 8191 + retweetedScreenName.hashCode();

    hashCode = hashCode * 8191 + ((isSetRetweetedStatusId()) ? 131071 : 524287);
    if (isSetRetweetedStatusId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(retweetedStatusId);

    hashCode = hashCode * 8191 + ((isSetRetweetedUserId()) ? 131071 : 524287);
    if (isSetRetweetedUserId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(retweetedUserId);

    return hashCode;
  }

  @Override
  public int compareTo(TweetInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTruncated()).compareTo(other.isSetTruncated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTruncated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.truncated, other.truncated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEntities()).compareTo(other.isSetEntities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntities()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entities, other.entities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCoordinates()).compareTo(other.isSetCoordinates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinates, other.coordinates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPlace()).compareTo(other.isSetPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.place, other.place);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFavorited()).compareTo(other.isSetFavorited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavorited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favorited, other.favorited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRetweeted()).compareTo(other.isSetRetweeted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetweeted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retweeted, other.retweeted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRetweetCount()).compareTo(other.isSetRetweetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetweetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retweetCount, other.retweetCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInReplyToScreenName()).compareTo(other.isSetInReplyToScreenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInReplyToScreenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inReplyToScreenName, other.inReplyToScreenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInReplyToStatusId()).compareTo(other.isSetInReplyToStatusId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInReplyToStatusId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inReplyToStatusId, other.inReplyToStatusId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInReplyToUserId()).compareTo(other.isSetInReplyToUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInReplyToUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inReplyToUserId, other.inReplyToUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRetweetedScreenName()).compareTo(other.isSetRetweetedScreenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetweetedScreenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retweetedScreenName, other.retweetedScreenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRetweetedStatusId()).compareTo(other.isSetRetweetedStatusId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetweetedStatusId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retweetedStatusId, other.retweetedStatusId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRetweetedUserId()).compareTo(other.isSetRetweetedUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetweetedUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retweetedUserId, other.retweetedUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TweetInfo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetText()) {
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetCreatedAt()) {
      if (!first) sb.append(", ");
      sb.append("createdAt:");
      if (this.createdAt == null) {
        sb.append("null");
      } else {
        sb.append(this.createdAt);
      }
      first = false;
    }
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetTruncated()) {
      if (!first) sb.append(", ");
      sb.append("truncated:");
      sb.append(this.truncated);
      first = false;
    }
    if (isSetEntities()) {
      if (!first) sb.append(", ");
      sb.append("entities:");
      if (this.entities == null) {
        sb.append("null");
      } else {
        sb.append(this.entities);
      }
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    if (isSetCoordinates()) {
      if (!first) sb.append(", ");
      sb.append("coordinates:");
      if (this.coordinates == null) {
        sb.append("null");
      } else {
        sb.append(this.coordinates);
      }
      first = false;
    }
    if (isSetPlace()) {
      if (!first) sb.append(", ");
      sb.append("place:");
      if (this.place == null) {
        sb.append("null");
      } else {
        sb.append(this.place);
      }
      first = false;
    }
    if (isSetFavorited()) {
      if (!first) sb.append(", ");
      sb.append("favorited:");
      sb.append(this.favorited);
      first = false;
    }
    if (isSetRetweeted()) {
      if (!first) sb.append(", ");
      sb.append("retweeted:");
      sb.append(this.retweeted);
      first = false;
    }
    if (isSetRetweetCount()) {
      if (!first) sb.append(", ");
      sb.append("retweetCount:");
      sb.append(this.retweetCount);
      first = false;
    }
    if (isSetInReplyToScreenName()) {
      if (!first) sb.append(", ");
      sb.append("inReplyToScreenName:");
      if (this.inReplyToScreenName == null) {
        sb.append("null");
      } else {
        sb.append(this.inReplyToScreenName);
      }
      first = false;
    }
    if (isSetInReplyToStatusId()) {
      if (!first) sb.append(", ");
      sb.append("inReplyToStatusId:");
      sb.append(this.inReplyToStatusId);
      first = false;
    }
    if (isSetInReplyToUserId()) {
      if (!first) sb.append(", ");
      sb.append("inReplyToUserId:");
      sb.append(this.inReplyToUserId);
      first = false;
    }
    if (isSetRetweetedScreenName()) {
      if (!first) sb.append(", ");
      sb.append("retweetedScreenName:");
      if (this.retweetedScreenName == null) {
        sb.append("null");
      } else {
        sb.append(this.retweetedScreenName);
      }
      first = false;
    }
    if (isSetRetweetedStatusId()) {
      if (!first) sb.append(", ");
      sb.append("retweetedStatusId:");
      sb.append(this.retweetedStatusId);
      first = false;
    }
    if (isSetRetweetedUserId()) {
      if (!first) sb.append(", ");
      sb.append("retweetedUserId:");
      sb.append(this.retweetedUserId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (user != null) {
      user.validate();
    }
    if (entities != null) {
      entities.validate();
    }
    if (coordinates != null) {
      coordinates.validate();
    }
    if (place != null) {
      place.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TweetInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TweetInfoStandardScheme getScheme() {
      return new TweetInfoStandardScheme();
    }
  }

  private static class TweetInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TweetInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TweetInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new TwitterUser();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRUNCATED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.truncated = iprot.readBool();
              struct.setTruncatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENTITIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.entities = new TwitterEntities();
              struct.entities.read(iprot);
              struct.setEntitiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COORDINATES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.coordinates = new TwitterCoordinates();
              struct.coordinates.read(iprot);
              struct.setCoordinatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.place = new TwitterPlace();
              struct.place.read(iprot);
              struct.setPlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FAVORITED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.favorited = iprot.readBool();
              struct.setFavoritedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RETWEETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.retweeted = iprot.readBool();
              struct.setRetweetedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RETWEET_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retweetCount = iprot.readI32();
              struct.setRetweetCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IN_REPLY_TO_SCREEN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.inReplyToScreenName = iprot.readString();
              struct.setInReplyToScreenNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IN_REPLY_TO_STATUS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inReplyToStatusId = iprot.readI64();
              struct.setInReplyToStatusIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IN_REPLY_TO_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inReplyToUserId = iprot.readI64();
              struct.setInReplyToUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // RETWEETED_SCREEN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retweetedScreenName = iprot.readString();
              struct.setRetweetedScreenNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RETWEETED_STATUS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.retweetedStatusId = iprot.readI64();
              struct.setRetweetedStatusIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // RETWEETED_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.retweetedUserId = iprot.readI64();
              struct.setRetweetedUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TweetInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        if (struct.isSetText()) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
      }
      if (struct.createdAt != null) {
        if (struct.isSetCreatedAt()) {
          oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
          oprot.writeString(struct.createdAt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTruncated()) {
        oprot.writeFieldBegin(TRUNCATED_FIELD_DESC);
        oprot.writeBool(struct.truncated);
        oprot.writeFieldEnd();
      }
      if (struct.entities != null) {
        if (struct.isSetEntities()) {
          oprot.writeFieldBegin(ENTITIES_FIELD_DESC);
          struct.entities.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coordinates != null) {
        if (struct.isSetCoordinates()) {
          oprot.writeFieldBegin(COORDINATES_FIELD_DESC);
          struct.coordinates.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.place != null) {
        if (struct.isSetPlace()) {
          oprot.writeFieldBegin(PLACE_FIELD_DESC);
          struct.place.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFavorited()) {
        oprot.writeFieldBegin(FAVORITED_FIELD_DESC);
        oprot.writeBool(struct.favorited);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRetweeted()) {
        oprot.writeFieldBegin(RETWEETED_FIELD_DESC);
        oprot.writeBool(struct.retweeted);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRetweetCount()) {
        oprot.writeFieldBegin(RETWEET_COUNT_FIELD_DESC);
        oprot.writeI32(struct.retweetCount);
        oprot.writeFieldEnd();
      }
      if (struct.inReplyToScreenName != null) {
        if (struct.isSetInReplyToScreenName()) {
          oprot.writeFieldBegin(IN_REPLY_TO_SCREEN_NAME_FIELD_DESC);
          oprot.writeString(struct.inReplyToScreenName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInReplyToStatusId()) {
        oprot.writeFieldBegin(IN_REPLY_TO_STATUS_ID_FIELD_DESC);
        oprot.writeI64(struct.inReplyToStatusId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInReplyToUserId()) {
        oprot.writeFieldBegin(IN_REPLY_TO_USER_ID_FIELD_DESC);
        oprot.writeI64(struct.inReplyToUserId);
        oprot.writeFieldEnd();
      }
      if (struct.retweetedScreenName != null) {
        if (struct.isSetRetweetedScreenName()) {
          oprot.writeFieldBegin(RETWEETED_SCREEN_NAME_FIELD_DESC);
          oprot.writeString(struct.retweetedScreenName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRetweetedStatusId()) {
        oprot.writeFieldBegin(RETWEETED_STATUS_ID_FIELD_DESC);
        oprot.writeI64(struct.retweetedStatusId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRetweetedUserId()) {
        oprot.writeFieldBegin(RETWEETED_USER_ID_FIELD_DESC);
        oprot.writeI64(struct.retweetedUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TweetInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TweetInfoTupleScheme getScheme() {
      return new TweetInfoTupleScheme();
    }
  }

  private static class TweetInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TweetInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TweetInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetText()) {
        optionals.set(1);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(2);
      }
      if (struct.isSetUser()) {
        optionals.set(3);
      }
      if (struct.isSetTruncated()) {
        optionals.set(4);
      }
      if (struct.isSetEntities()) {
        optionals.set(5);
      }
      if (struct.isSetSource()) {
        optionals.set(6);
      }
      if (struct.isSetCoordinates()) {
        optionals.set(7);
      }
      if (struct.isSetPlace()) {
        optionals.set(8);
      }
      if (struct.isSetFavorited()) {
        optionals.set(9);
      }
      if (struct.isSetRetweeted()) {
        optionals.set(10);
      }
      if (struct.isSetRetweetCount()) {
        optionals.set(11);
      }
      if (struct.isSetInReplyToScreenName()) {
        optionals.set(12);
      }
      if (struct.isSetInReplyToStatusId()) {
        optionals.set(13);
      }
      if (struct.isSetInReplyToUserId()) {
        optionals.set(14);
      }
      if (struct.isSetRetweetedScreenName()) {
        optionals.set(15);
      }
      if (struct.isSetRetweetedStatusId()) {
        optionals.set(16);
      }
      if (struct.isSetRetweetedUserId()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeString(struct.createdAt);
      }
      if (struct.isSetUser()) {
        struct.user.write(oprot);
      }
      if (struct.isSetTruncated()) {
        oprot.writeBool(struct.truncated);
      }
      if (struct.isSetEntities()) {
        struct.entities.write(oprot);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetCoordinates()) {
        struct.coordinates.write(oprot);
      }
      if (struct.isSetPlace()) {
        struct.place.write(oprot);
      }
      if (struct.isSetFavorited()) {
        oprot.writeBool(struct.favorited);
      }
      if (struct.isSetRetweeted()) {
        oprot.writeBool(struct.retweeted);
      }
      if (struct.isSetRetweetCount()) {
        oprot.writeI32(struct.retweetCount);
      }
      if (struct.isSetInReplyToScreenName()) {
        oprot.writeString(struct.inReplyToScreenName);
      }
      if (struct.isSetInReplyToStatusId()) {
        oprot.writeI64(struct.inReplyToStatusId);
      }
      if (struct.isSetInReplyToUserId()) {
        oprot.writeI64(struct.inReplyToUserId);
      }
      if (struct.isSetRetweetedScreenName()) {
        oprot.writeString(struct.retweetedScreenName);
      }
      if (struct.isSetRetweetedStatusId()) {
        oprot.writeI64(struct.retweetedStatusId);
      }
      if (struct.isSetRetweetedUserId()) {
        oprot.writeI64(struct.retweetedUserId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TweetInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createdAt = iprot.readString();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.user = new TwitterUser();
        struct.user.read(iprot);
        struct.setUserIsSet(true);
      }
      if (incoming.get(4)) {
        struct.truncated = iprot.readBool();
        struct.setTruncatedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.entities = new TwitterEntities();
        struct.entities.read(iprot);
        struct.setEntitiesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.coordinates = new TwitterCoordinates();
        struct.coordinates.read(iprot);
        struct.setCoordinatesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.place = new TwitterPlace();
        struct.place.read(iprot);
        struct.setPlaceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.favorited = iprot.readBool();
        struct.setFavoritedIsSet(true);
      }
      if (incoming.get(10)) {
        struct.retweeted = iprot.readBool();
        struct.setRetweetedIsSet(true);
      }
      if (incoming.get(11)) {
        struct.retweetCount = iprot.readI32();
        struct.setRetweetCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.inReplyToScreenName = iprot.readString();
        struct.setInReplyToScreenNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.inReplyToStatusId = iprot.readI64();
        struct.setInReplyToStatusIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.inReplyToUserId = iprot.readI64();
        struct.setInReplyToUserIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.retweetedScreenName = iprot.readString();
        struct.setRetweetedScreenNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.retweetedStatusId = iprot.readI64();
        struct.setRetweetedStatusIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.retweetedUserId = iprot.readI64();
        struct.setRetweetedUserIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

