/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A "concrete" argument, that may be used by SituationMentions or EntityMentions
 * to avoid conflicts where abstract Arguments were being used to support concrete Mentions.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-13")
public class MentionArgument implements org.apache.thrift.TBase<MentionArgument, MentionArgument._Fields>, java.io.Serializable, Cloneable, Comparable<MentionArgument> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MentionArgument");

  private static final org.apache.thrift.protocol.TField ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("role", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ENTITY_MENTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entityMentionId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SITUATION_MENTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("situationMentionId", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokens", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CONSTITUENT_FIELD_DESC = new org.apache.thrift.protocol.TField("constituent", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PROPERTY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("propertyList", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MentionArgumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MentionArgumentTupleSchemeFactory());
  }

  private String role; // optional
  private edu.jhu.hlt.concrete.UUID entityMentionId; // optional
  private edu.jhu.hlt.concrete.UUID situationMentionId; // optional
  private edu.jhu.hlt.concrete.TokenRefSequence tokens; // optional
  private edu.jhu.hlt.concrete.ConstituentRef constituent; // optional
  private double confidence; // optional
  private List<Property> propertyList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The relationship between this argument and the situation that
     * owns it. The roles that a situation's arguments can take
     * depend on the type of the situation (including subtype
     * information, such as event_type).
     */
    ROLE((short)1, "role"),
    /**
     * A pointer to the value of an EntityMention, if this is being used to support
     * an EntityMention.
     */
    ENTITY_MENTION_ID((short)2, "entityMentionId"),
    /**
     * A pointer to the value of this argument, if it is a SituationMention.
     */
    SITUATION_MENTION_ID((short)3, "situationMentionId"),
    /**
     * The location of this MentionArgument in the Communication.
     * If this MentionArgument can be identified in a document using an
     * EntityMention or SituationMention, then UUID references to those
     * types should be preferred and this field left as null.
     */
    TOKENS((short)4, "tokens"),
    /**
     * An alternative way to specify the same thing as tokens.
     */
    CONSTITUENT((short)7, "constituent"),
    /**
     * Confidence of this argument belonging to its SituationMention
     */
    CONFIDENCE((short)5, "confidence"),
    /**
     * For the BinarySRL task, there may be situations
     * where more than one property is attached to a single
     * participant. A list of these properties can be stored in this field.
     */
    PROPERTY_LIST((short)6, "propertyList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROLE
          return ROLE;
        case 2: // ENTITY_MENTION_ID
          return ENTITY_MENTION_ID;
        case 3: // SITUATION_MENTION_ID
          return SITUATION_MENTION_ID;
        case 4: // TOKENS
          return TOKENS;
        case 7: // CONSTITUENT
          return CONSTITUENT;
        case 5: // CONFIDENCE
          return CONFIDENCE;
        case 6: // PROPERTY_LIST
          return PROPERTY_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONFIDENCE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ROLE,_Fields.ENTITY_MENTION_ID,_Fields.SITUATION_MENTION_ID,_Fields.TOKENS,_Fields.CONSTITUENT,_Fields.CONFIDENCE,_Fields.PROPERTY_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROLE, new org.apache.thrift.meta_data.FieldMetaData("role", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTITY_MENTION_ID, new org.apache.thrift.meta_data.FieldMetaData("entityMentionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.SITUATION_MENTION_ID, new org.apache.thrift.meta_data.FieldMetaData("situationMentionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.TOKENS, new org.apache.thrift.meta_data.FieldMetaData("tokens", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.TokenRefSequence.class)));
    tmpMap.put(_Fields.CONSTITUENT, new org.apache.thrift.meta_data.FieldMetaData("constituent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.ConstituentRef.class)));
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROPERTY_LIST, new org.apache.thrift.meta_data.FieldMetaData("propertyList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Property.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MentionArgument.class, metaDataMap);
  }

  public MentionArgument() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MentionArgument(MentionArgument other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRole()) {
      this.role = other.role;
    }
    if (other.isSetEntityMentionId()) {
      this.entityMentionId = new edu.jhu.hlt.concrete.UUID(other.entityMentionId);
    }
    if (other.isSetSituationMentionId()) {
      this.situationMentionId = new edu.jhu.hlt.concrete.UUID(other.situationMentionId);
    }
    if (other.isSetTokens()) {
      this.tokens = new edu.jhu.hlt.concrete.TokenRefSequence(other.tokens);
    }
    if (other.isSetConstituent()) {
      this.constituent = new edu.jhu.hlt.concrete.ConstituentRef(other.constituent);
    }
    this.confidence = other.confidence;
    if (other.isSetPropertyList()) {
      List<Property> __this__propertyList = new ArrayList<Property>(other.propertyList.size());
      for (Property other_element : other.propertyList) {
        __this__propertyList.add(new Property(other_element));
      }
      this.propertyList = __this__propertyList;
    }
  }

  public MentionArgument deepCopy() {
    return new MentionArgument(this);
  }

  @Override
  public void clear() {
    this.role = null;
    this.entityMentionId = null;
    this.situationMentionId = null;
    this.tokens = null;
    this.constituent = null;
    setConfidenceIsSet(false);
    this.confidence = 0.0;
    this.propertyList = null;
  }

  /**
   * The relationship between this argument and the situation that
   * owns it. The roles that a situation's arguments can take
   * depend on the type of the situation (including subtype
   * information, such as event_type).
   */
  public String getRole() {
    return this.role;
  }

  /**
   * The relationship between this argument and the situation that
   * owns it. The roles that a situation's arguments can take
   * depend on the type of the situation (including subtype
   * information, such as event_type).
   */
  public MentionArgument setRole(String role) {
    this.role = role;
    return this;
  }

  public void unsetRole() {
    this.role = null;
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean value) {
    if (!value) {
      this.role = null;
    }
  }

  /**
   * A pointer to the value of an EntityMention, if this is being used to support
   * an EntityMention.
   */
  public edu.jhu.hlt.concrete.UUID getEntityMentionId() {
    return this.entityMentionId;
  }

  /**
   * A pointer to the value of an EntityMention, if this is being used to support
   * an EntityMention.
   */
  public MentionArgument setEntityMentionId(edu.jhu.hlt.concrete.UUID entityMentionId) {
    this.entityMentionId = entityMentionId;
    return this;
  }

  public void unsetEntityMentionId() {
    this.entityMentionId = null;
  }

  /** Returns true if field entityMentionId is set (has been assigned a value) and false otherwise */
  public boolean isSetEntityMentionId() {
    return this.entityMentionId != null;
  }

  public void setEntityMentionIdIsSet(boolean value) {
    if (!value) {
      this.entityMentionId = null;
    }
  }

  /**
   * A pointer to the value of this argument, if it is a SituationMention.
   */
  public edu.jhu.hlt.concrete.UUID getSituationMentionId() {
    return this.situationMentionId;
  }

  /**
   * A pointer to the value of this argument, if it is a SituationMention.
   */
  public MentionArgument setSituationMentionId(edu.jhu.hlt.concrete.UUID situationMentionId) {
    this.situationMentionId = situationMentionId;
    return this;
  }

  public void unsetSituationMentionId() {
    this.situationMentionId = null;
  }

  /** Returns true if field situationMentionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSituationMentionId() {
    return this.situationMentionId != null;
  }

  public void setSituationMentionIdIsSet(boolean value) {
    if (!value) {
      this.situationMentionId = null;
    }
  }

  /**
   * The location of this MentionArgument in the Communication.
   * If this MentionArgument can be identified in a document using an
   * EntityMention or SituationMention, then UUID references to those
   * types should be preferred and this field left as null.
   */
  public edu.jhu.hlt.concrete.TokenRefSequence getTokens() {
    return this.tokens;
  }

  /**
   * The location of this MentionArgument in the Communication.
   * If this MentionArgument can be identified in a document using an
   * EntityMention or SituationMention, then UUID references to those
   * types should be preferred and this field left as null.
   */
  public MentionArgument setTokens(edu.jhu.hlt.concrete.TokenRefSequence tokens) {
    this.tokens = tokens;
    return this;
  }

  public void unsetTokens() {
    this.tokens = null;
  }

  /** Returns true if field tokens is set (has been assigned a value) and false otherwise */
  public boolean isSetTokens() {
    return this.tokens != null;
  }

  public void setTokensIsSet(boolean value) {
    if (!value) {
      this.tokens = null;
    }
  }

  /**
   * An alternative way to specify the same thing as tokens.
   */
  public edu.jhu.hlt.concrete.ConstituentRef getConstituent() {
    return this.constituent;
  }

  /**
   * An alternative way to specify the same thing as tokens.
   */
  public MentionArgument setConstituent(edu.jhu.hlt.concrete.ConstituentRef constituent) {
    this.constituent = constituent;
    return this;
  }

  public void unsetConstituent() {
    this.constituent = null;
  }

  /** Returns true if field constituent is set (has been assigned a value) and false otherwise */
  public boolean isSetConstituent() {
    return this.constituent != null;
  }

  public void setConstituentIsSet(boolean value) {
    if (!value) {
      this.constituent = null;
    }
  }

  /**
   * Confidence of this argument belonging to its SituationMention
   */
  public double getConfidence() {
    return this.confidence;
  }

  /**
   * Confidence of this argument belonging to its SituationMention
   */
  public MentionArgument setConfidence(double confidence) {
    this.confidence = confidence;
    setConfidenceIsSet(true);
    return this;
  }

  public void unsetConfidence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  public void setConfidenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
  }

  public int getPropertyListSize() {
    return (this.propertyList == null) ? 0 : this.propertyList.size();
  }

  public java.util.Iterator<Property> getPropertyListIterator() {
    return (this.propertyList == null) ? null : this.propertyList.iterator();
  }

  public void addToPropertyList(Property elem) {
    if (this.propertyList == null) {
      this.propertyList = new ArrayList<Property>();
    }
    this.propertyList.add(elem);
  }

  /**
   * For the BinarySRL task, there may be situations
   * where more than one property is attached to a single
   * participant. A list of these properties can be stored in this field.
   */
  public List<Property> getPropertyList() {
    return this.propertyList;
  }

  /**
   * For the BinarySRL task, there may be situations
   * where more than one property is attached to a single
   * participant. A list of these properties can be stored in this field.
   */
  public MentionArgument setPropertyList(List<Property> propertyList) {
    this.propertyList = propertyList;
    return this;
  }

  public void unsetPropertyList() {
    this.propertyList = null;
  }

  /** Returns true if field propertyList is set (has been assigned a value) and false otherwise */
  public boolean isSetPropertyList() {
    return this.propertyList != null;
  }

  public void setPropertyListIsSet(boolean value) {
    if (!value) {
      this.propertyList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROLE:
      if (value == null) {
        unsetRole();
      } else {
        setRole((String)value);
      }
      break;

    case ENTITY_MENTION_ID:
      if (value == null) {
        unsetEntityMentionId();
      } else {
        setEntityMentionId((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case SITUATION_MENTION_ID:
      if (value == null) {
        unsetSituationMentionId();
      } else {
        setSituationMentionId((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case TOKENS:
      if (value == null) {
        unsetTokens();
      } else {
        setTokens((edu.jhu.hlt.concrete.TokenRefSequence)value);
      }
      break;

    case CONSTITUENT:
      if (value == null) {
        unsetConstituent();
      } else {
        setConstituent((edu.jhu.hlt.concrete.ConstituentRef)value);
      }
      break;

    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((Double)value);
      }
      break;

    case PROPERTY_LIST:
      if (value == null) {
        unsetPropertyList();
      } else {
        setPropertyList((List<Property>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROLE:
      return getRole();

    case ENTITY_MENTION_ID:
      return getEntityMentionId();

    case SITUATION_MENTION_ID:
      return getSituationMentionId();

    case TOKENS:
      return getTokens();

    case CONSTITUENT:
      return getConstituent();

    case CONFIDENCE:
      return getConfidence();

    case PROPERTY_LIST:
      return getPropertyList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROLE:
      return isSetRole();
    case ENTITY_MENTION_ID:
      return isSetEntityMentionId();
    case SITUATION_MENTION_ID:
      return isSetSituationMentionId();
    case TOKENS:
      return isSetTokens();
    case CONSTITUENT:
      return isSetConstituent();
    case CONFIDENCE:
      return isSetConfidence();
    case PROPERTY_LIST:
      return isSetPropertyList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MentionArgument)
      return this.equals((MentionArgument)that);
    return false;
  }

  public boolean equals(MentionArgument that) {
    if (that == null)
      return false;

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!this.role.equals(that.role))
        return false;
    }

    boolean this_present_entityMentionId = true && this.isSetEntityMentionId();
    boolean that_present_entityMentionId = true && that.isSetEntityMentionId();
    if (this_present_entityMentionId || that_present_entityMentionId) {
      if (!(this_present_entityMentionId && that_present_entityMentionId))
        return false;
      if (!this.entityMentionId.equals(that.entityMentionId))
        return false;
    }

    boolean this_present_situationMentionId = true && this.isSetSituationMentionId();
    boolean that_present_situationMentionId = true && that.isSetSituationMentionId();
    if (this_present_situationMentionId || that_present_situationMentionId) {
      if (!(this_present_situationMentionId && that_present_situationMentionId))
        return false;
      if (!this.situationMentionId.equals(that.situationMentionId))
        return false;
    }

    boolean this_present_tokens = true && this.isSetTokens();
    boolean that_present_tokens = true && that.isSetTokens();
    if (this_present_tokens || that_present_tokens) {
      if (!(this_present_tokens && that_present_tokens))
        return false;
      if (!this.tokens.equals(that.tokens))
        return false;
    }

    boolean this_present_constituent = true && this.isSetConstituent();
    boolean that_present_constituent = true && that.isSetConstituent();
    if (this_present_constituent || that_present_constituent) {
      if (!(this_present_constituent && that_present_constituent))
        return false;
      if (!this.constituent.equals(that.constituent))
        return false;
    }

    boolean this_present_confidence = true && this.isSetConfidence();
    boolean that_present_confidence = true && that.isSetConfidence();
    if (this_present_confidence || that_present_confidence) {
      if (!(this_present_confidence && that_present_confidence))
        return false;
      if (this.confidence != that.confidence)
        return false;
    }

    boolean this_present_propertyList = true && this.isSetPropertyList();
    boolean that_present_propertyList = true && that.isSetPropertyList();
    if (this_present_propertyList || that_present_propertyList) {
      if (!(this_present_propertyList && that_present_propertyList))
        return false;
      if (!this.propertyList.equals(that.propertyList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_role = true && (isSetRole());
    list.add(present_role);
    if (present_role)
      list.add(role);

    boolean present_entityMentionId = true && (isSetEntityMentionId());
    list.add(present_entityMentionId);
    if (present_entityMentionId)
      list.add(entityMentionId);

    boolean present_situationMentionId = true && (isSetSituationMentionId());
    list.add(present_situationMentionId);
    if (present_situationMentionId)
      list.add(situationMentionId);

    boolean present_tokens = true && (isSetTokens());
    list.add(present_tokens);
    if (present_tokens)
      list.add(tokens);

    boolean present_constituent = true && (isSetConstituent());
    list.add(present_constituent);
    if (present_constituent)
      list.add(constituent);

    boolean present_confidence = true && (isSetConfidence());
    list.add(present_confidence);
    if (present_confidence)
      list.add(confidence);

    boolean present_propertyList = true && (isSetPropertyList());
    list.add(present_propertyList);
    if (present_propertyList)
      list.add(propertyList);

    return list.hashCode();
  }

  @Override
  public int compareTo(MentionArgument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRole()).compareTo(other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntityMentionId()).compareTo(other.isSetEntityMentionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntityMentionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityMentionId, other.entityMentionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSituationMentionId()).compareTo(other.isSetSituationMentionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSituationMentionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.situationMentionId, other.situationMentionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokens()).compareTo(other.isSetTokens());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokens()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokens, other.tokens);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstituent()).compareTo(other.isSetConstituent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstituent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constituent, other.constituent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfidence()).compareTo(other.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, other.confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPropertyList()).compareTo(other.isSetPropertyList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropertyList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propertyList, other.propertyList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MentionArgument(");
    boolean first = true;

    if (isSetRole()) {
      sb.append("role:");
      if (this.role == null) {
        sb.append("null");
      } else {
        sb.append(this.role);
      }
      first = false;
    }
    if (isSetEntityMentionId()) {
      if (!first) sb.append(", ");
      sb.append("entityMentionId:");
      if (this.entityMentionId == null) {
        sb.append("null");
      } else {
        sb.append(this.entityMentionId);
      }
      first = false;
    }
    if (isSetSituationMentionId()) {
      if (!first) sb.append(", ");
      sb.append("situationMentionId:");
      if (this.situationMentionId == null) {
        sb.append("null");
      } else {
        sb.append(this.situationMentionId);
      }
      first = false;
    }
    if (isSetTokens()) {
      if (!first) sb.append(", ");
      sb.append("tokens:");
      if (this.tokens == null) {
        sb.append("null");
      } else {
        sb.append(this.tokens);
      }
      first = false;
    }
    if (isSetConstituent()) {
      if (!first) sb.append(", ");
      sb.append("constituent:");
      if (this.constituent == null) {
        sb.append("null");
      } else {
        sb.append(this.constituent);
      }
      first = false;
    }
    if (isSetConfidence()) {
      if (!first) sb.append(", ");
      sb.append("confidence:");
      sb.append(this.confidence);
      first = false;
    }
    if (isSetPropertyList()) {
      if (!first) sb.append(", ");
      sb.append("propertyList:");
      if (this.propertyList == null) {
        sb.append("null");
      } else {
        sb.append(this.propertyList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (entityMentionId != null) {
      entityMentionId.validate();
    }
    if (situationMentionId != null) {
      situationMentionId.validate();
    }
    if (tokens != null) {
      tokens.validate();
    }
    if (constituent != null) {
      constituent.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MentionArgumentStandardSchemeFactory implements SchemeFactory {
    public MentionArgumentStandardScheme getScheme() {
      return new MentionArgumentStandardScheme();
    }
  }

  private static class MentionArgumentStandardScheme extends StandardScheme<MentionArgument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MentionArgument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.role = iprot.readString();
              struct.setRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENTITY_MENTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.entityMentionId = new edu.jhu.hlt.concrete.UUID();
              struct.entityMentionId.read(iprot);
              struct.setEntityMentionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SITUATION_MENTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.situationMentionId = new edu.jhu.hlt.concrete.UUID();
              struct.situationMentionId.read(iprot);
              struct.setSituationMentionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOKENS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokens = new edu.jhu.hlt.concrete.TokenRefSequence();
              struct.tokens.read(iprot);
              struct.setTokensIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONSTITUENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.constituent = new edu.jhu.hlt.concrete.ConstituentRef();
              struct.constituent.read(iprot);
              struct.setConstituentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence = iprot.readDouble();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROPERTY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.propertyList = new ArrayList<Property>(_list56.size);
                Property _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = new Property();
                  _elem57.read(iprot);
                  struct.propertyList.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setPropertyListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MentionArgument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.role != null) {
        if (struct.isSetRole()) {
          oprot.writeFieldBegin(ROLE_FIELD_DESC);
          oprot.writeString(struct.role);
          oprot.writeFieldEnd();
        }
      }
      if (struct.entityMentionId != null) {
        if (struct.isSetEntityMentionId()) {
          oprot.writeFieldBegin(ENTITY_MENTION_ID_FIELD_DESC);
          struct.entityMentionId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.situationMentionId != null) {
        if (struct.isSetSituationMentionId()) {
          oprot.writeFieldBegin(SITUATION_MENTION_ID_FIELD_DESC);
          struct.situationMentionId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tokens != null) {
        if (struct.isSetTokens()) {
          oprot.writeFieldBegin(TOKENS_FIELD_DESC);
          struct.tokens.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConfidence()) {
        oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.confidence);
        oprot.writeFieldEnd();
      }
      if (struct.propertyList != null) {
        if (struct.isSetPropertyList()) {
          oprot.writeFieldBegin(PROPERTY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.propertyList.size()));
            for (Property _iter59 : struct.propertyList)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.constituent != null) {
        if (struct.isSetConstituent()) {
          oprot.writeFieldBegin(CONSTITUENT_FIELD_DESC);
          struct.constituent.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MentionArgumentTupleSchemeFactory implements SchemeFactory {
    public MentionArgumentTupleScheme getScheme() {
      return new MentionArgumentTupleScheme();
    }
  }

  private static class MentionArgumentTupleScheme extends TupleScheme<MentionArgument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MentionArgument struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRole()) {
        optionals.set(0);
      }
      if (struct.isSetEntityMentionId()) {
        optionals.set(1);
      }
      if (struct.isSetSituationMentionId()) {
        optionals.set(2);
      }
      if (struct.isSetTokens()) {
        optionals.set(3);
      }
      if (struct.isSetConstituent()) {
        optionals.set(4);
      }
      if (struct.isSetConfidence()) {
        optionals.set(5);
      }
      if (struct.isSetPropertyList()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetRole()) {
        oprot.writeString(struct.role);
      }
      if (struct.isSetEntityMentionId()) {
        struct.entityMentionId.write(oprot);
      }
      if (struct.isSetSituationMentionId()) {
        struct.situationMentionId.write(oprot);
      }
      if (struct.isSetTokens()) {
        struct.tokens.write(oprot);
      }
      if (struct.isSetConstituent()) {
        struct.constituent.write(oprot);
      }
      if (struct.isSetConfidence()) {
        oprot.writeDouble(struct.confidence);
      }
      if (struct.isSetPropertyList()) {
        {
          oprot.writeI32(struct.propertyList.size());
          for (Property _iter60 : struct.propertyList)
          {
            _iter60.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MentionArgument struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.role = iprot.readString();
        struct.setRoleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.entityMentionId = new edu.jhu.hlt.concrete.UUID();
        struct.entityMentionId.read(iprot);
        struct.setEntityMentionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.situationMentionId = new edu.jhu.hlt.concrete.UUID();
        struct.situationMentionId.read(iprot);
        struct.setSituationMentionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tokens = new edu.jhu.hlt.concrete.TokenRefSequence();
        struct.tokens.read(iprot);
        struct.setTokensIsSet(true);
      }
      if (incoming.get(4)) {
        struct.constituent = new edu.jhu.hlt.concrete.ConstituentRef();
        struct.constituent.read(iprot);
        struct.setConstituentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.confidence = iprot.readDouble();
        struct.setConfidenceIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.propertyList = new ArrayList<Property>(_list61.size);
          Property _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = new Property();
            _elem62.read(iprot);
            struct.propertyList.add(_elem62);
          }
        }
        struct.setPropertyListIsSet(true);
      }
    }
  }

}

