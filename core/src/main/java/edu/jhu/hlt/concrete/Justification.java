/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-13")
public class Justification implements org.apache.thrift.TBase<Justification, Justification._Fields>, java.io.Serializable, Cloneable, Comparable<Justification> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Justification");

  private static final org.apache.thrift.protocol.TField JUSTIFICATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("justificationType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MENTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mentionId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_REF_SEQ_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenRefSeqList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JustificationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JustificationTupleSchemeFactory());
  }

  private String justificationType; // optional
  private edu.jhu.hlt.concrete.UUID mentionId; // required
  private List<edu.jhu.hlt.concrete.TokenRefSequence> tokenRefSeqList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * An enumerated value used to describe the way in which the
     * justification's mention provides supporting evidence for the
     * situation.
     */
    JUSTIFICATION_TYPE((short)1, "justificationType"),
    /**
     * A pointer to the SituationMention itself.
     */
    MENTION_ID((short)2, "mentionId"),
    /**
     * An optional list of pointers to tokens that are (especially)
     * relevant to the way in which this mention provides
     * justification for the situation. It is left up to individual
     * analytics to decide what tokens (if any) they wish to include
     * in this field.
     */
    TOKEN_REF_SEQ_LIST((short)3, "tokenRefSeqList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JUSTIFICATION_TYPE
          return JUSTIFICATION_TYPE;
        case 2: // MENTION_ID
          return MENTION_ID;
        case 3: // TOKEN_REF_SEQ_LIST
          return TOKEN_REF_SEQ_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.JUSTIFICATION_TYPE,_Fields.TOKEN_REF_SEQ_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JUSTIFICATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("justificationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENTION_ID, new org.apache.thrift.meta_data.FieldMetaData("mentionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.TOKEN_REF_SEQ_LIST, new org.apache.thrift.meta_data.FieldMetaData("tokenRefSeqList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.TokenRefSequence.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Justification.class, metaDataMap);
  }

  public Justification() {
  }

  public Justification(
    edu.jhu.hlt.concrete.UUID mentionId)
  {
    this();
    this.mentionId = mentionId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Justification(Justification other) {
    if (other.isSetJustificationType()) {
      this.justificationType = other.justificationType;
    }
    if (other.isSetMentionId()) {
      this.mentionId = new edu.jhu.hlt.concrete.UUID(other.mentionId);
    }
    if (other.isSetTokenRefSeqList()) {
      List<edu.jhu.hlt.concrete.TokenRefSequence> __this__tokenRefSeqList = new ArrayList<edu.jhu.hlt.concrete.TokenRefSequence>(other.tokenRefSeqList.size());
      for (edu.jhu.hlt.concrete.TokenRefSequence other_element : other.tokenRefSeqList) {
        __this__tokenRefSeqList.add(new edu.jhu.hlt.concrete.TokenRefSequence(other_element));
      }
      this.tokenRefSeqList = __this__tokenRefSeqList;
    }
  }

  public Justification deepCopy() {
    return new Justification(this);
  }

  @Override
  public void clear() {
    this.justificationType = null;
    this.mentionId = null;
    this.tokenRefSeqList = null;
  }

  /**
   * An enumerated value used to describe the way in which the
   * justification's mention provides supporting evidence for the
   * situation.
   */
  public String getJustificationType() {
    return this.justificationType;
  }

  /**
   * An enumerated value used to describe the way in which the
   * justification's mention provides supporting evidence for the
   * situation.
   */
  public Justification setJustificationType(String justificationType) {
    this.justificationType = justificationType;
    return this;
  }

  public void unsetJustificationType() {
    this.justificationType = null;
  }

  /** Returns true if field justificationType is set (has been assigned a value) and false otherwise */
  public boolean isSetJustificationType() {
    return this.justificationType != null;
  }

  public void setJustificationTypeIsSet(boolean value) {
    if (!value) {
      this.justificationType = null;
    }
  }

  /**
   * A pointer to the SituationMention itself.
   */
  public edu.jhu.hlt.concrete.UUID getMentionId() {
    return this.mentionId;
  }

  /**
   * A pointer to the SituationMention itself.
   */
  public Justification setMentionId(edu.jhu.hlt.concrete.UUID mentionId) {
    this.mentionId = mentionId;
    return this;
  }

  public void unsetMentionId() {
    this.mentionId = null;
  }

  /** Returns true if field mentionId is set (has been assigned a value) and false otherwise */
  public boolean isSetMentionId() {
    return this.mentionId != null;
  }

  public void setMentionIdIsSet(boolean value) {
    if (!value) {
      this.mentionId = null;
    }
  }

  public int getTokenRefSeqListSize() {
    return (this.tokenRefSeqList == null) ? 0 : this.tokenRefSeqList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.TokenRefSequence> getTokenRefSeqListIterator() {
    return (this.tokenRefSeqList == null) ? null : this.tokenRefSeqList.iterator();
  }

  public void addToTokenRefSeqList(edu.jhu.hlt.concrete.TokenRefSequence elem) {
    if (this.tokenRefSeqList == null) {
      this.tokenRefSeqList = new ArrayList<edu.jhu.hlt.concrete.TokenRefSequence>();
    }
    this.tokenRefSeqList.add(elem);
  }

  /**
   * An optional list of pointers to tokens that are (especially)
   * relevant to the way in which this mention provides
   * justification for the situation. It is left up to individual
   * analytics to decide what tokens (if any) they wish to include
   * in this field.
   */
  public List<edu.jhu.hlt.concrete.TokenRefSequence> getTokenRefSeqList() {
    return this.tokenRefSeqList;
  }

  /**
   * An optional list of pointers to tokens that are (especially)
   * relevant to the way in which this mention provides
   * justification for the situation. It is left up to individual
   * analytics to decide what tokens (if any) they wish to include
   * in this field.
   */
  public Justification setTokenRefSeqList(List<edu.jhu.hlt.concrete.TokenRefSequence> tokenRefSeqList) {
    this.tokenRefSeqList = tokenRefSeqList;
    return this;
  }

  public void unsetTokenRefSeqList() {
    this.tokenRefSeqList = null;
  }

  /** Returns true if field tokenRefSeqList is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenRefSeqList() {
    return this.tokenRefSeqList != null;
  }

  public void setTokenRefSeqListIsSet(boolean value) {
    if (!value) {
      this.tokenRefSeqList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JUSTIFICATION_TYPE:
      if (value == null) {
        unsetJustificationType();
      } else {
        setJustificationType((String)value);
      }
      break;

    case MENTION_ID:
      if (value == null) {
        unsetMentionId();
      } else {
        setMentionId((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case TOKEN_REF_SEQ_LIST:
      if (value == null) {
        unsetTokenRefSeqList();
      } else {
        setTokenRefSeqList((List<edu.jhu.hlt.concrete.TokenRefSequence>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JUSTIFICATION_TYPE:
      return getJustificationType();

    case MENTION_ID:
      return getMentionId();

    case TOKEN_REF_SEQ_LIST:
      return getTokenRefSeqList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JUSTIFICATION_TYPE:
      return isSetJustificationType();
    case MENTION_ID:
      return isSetMentionId();
    case TOKEN_REF_SEQ_LIST:
      return isSetTokenRefSeqList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Justification)
      return this.equals((Justification)that);
    return false;
  }

  public boolean equals(Justification that) {
    if (that == null)
      return false;

    boolean this_present_justificationType = true && this.isSetJustificationType();
    boolean that_present_justificationType = true && that.isSetJustificationType();
    if (this_present_justificationType || that_present_justificationType) {
      if (!(this_present_justificationType && that_present_justificationType))
        return false;
      if (!this.justificationType.equals(that.justificationType))
        return false;
    }

    boolean this_present_mentionId = true && this.isSetMentionId();
    boolean that_present_mentionId = true && that.isSetMentionId();
    if (this_present_mentionId || that_present_mentionId) {
      if (!(this_present_mentionId && that_present_mentionId))
        return false;
      if (!this.mentionId.equals(that.mentionId))
        return false;
    }

    boolean this_present_tokenRefSeqList = true && this.isSetTokenRefSeqList();
    boolean that_present_tokenRefSeqList = true && that.isSetTokenRefSeqList();
    if (this_present_tokenRefSeqList || that_present_tokenRefSeqList) {
      if (!(this_present_tokenRefSeqList && that_present_tokenRefSeqList))
        return false;
      if (!this.tokenRefSeqList.equals(that.tokenRefSeqList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_justificationType = true && (isSetJustificationType());
    list.add(present_justificationType);
    if (present_justificationType)
      list.add(justificationType);

    boolean present_mentionId = true && (isSetMentionId());
    list.add(present_mentionId);
    if (present_mentionId)
      list.add(mentionId);

    boolean present_tokenRefSeqList = true && (isSetTokenRefSeqList());
    list.add(present_tokenRefSeqList);
    if (present_tokenRefSeqList)
      list.add(tokenRefSeqList);

    return list.hashCode();
  }

  @Override
  public int compareTo(Justification other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJustificationType()).compareTo(other.isSetJustificationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJustificationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.justificationType, other.justificationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMentionId()).compareTo(other.isSetMentionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMentionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mentionId, other.mentionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenRefSeqList()).compareTo(other.isSetTokenRefSeqList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenRefSeqList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenRefSeqList, other.tokenRefSeqList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Justification(");
    boolean first = true;

    if (isSetJustificationType()) {
      sb.append("justificationType:");
      if (this.justificationType == null) {
        sb.append("null");
      } else {
        sb.append(this.justificationType);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("mentionId:");
    if (this.mentionId == null) {
      sb.append("null");
    } else {
      sb.append(this.mentionId);
    }
    first = false;
    if (isSetTokenRefSeqList()) {
      if (!first) sb.append(", ");
      sb.append("tokenRefSeqList:");
      if (this.tokenRefSeqList == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenRefSeqList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (mentionId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mentionId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (mentionId != null) {
      mentionId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JustificationStandardSchemeFactory implements SchemeFactory {
    public JustificationStandardScheme getScheme() {
      return new JustificationStandardScheme();
    }
  }

  private static class JustificationStandardScheme extends StandardScheme<Justification> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Justification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JUSTIFICATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.justificationType = iprot.readString();
              struct.setJustificationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MENTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.mentionId = new edu.jhu.hlt.concrete.UUID();
              struct.mentionId.read(iprot);
              struct.setMentionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN_REF_SEQ_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.tokenRefSeqList = new ArrayList<edu.jhu.hlt.concrete.TokenRefSequence>(_list8.size);
                edu.jhu.hlt.concrete.TokenRefSequence _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new edu.jhu.hlt.concrete.TokenRefSequence();
                  _elem9.read(iprot);
                  struct.tokenRefSeqList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setTokenRefSeqListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Justification struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.justificationType != null) {
        if (struct.isSetJustificationType()) {
          oprot.writeFieldBegin(JUSTIFICATION_TYPE_FIELD_DESC);
          oprot.writeString(struct.justificationType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mentionId != null) {
        oprot.writeFieldBegin(MENTION_ID_FIELD_DESC);
        struct.mentionId.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tokenRefSeqList != null) {
        if (struct.isSetTokenRefSeqList()) {
          oprot.writeFieldBegin(TOKEN_REF_SEQ_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tokenRefSeqList.size()));
            for (edu.jhu.hlt.concrete.TokenRefSequence _iter11 : struct.tokenRefSeqList)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JustificationTupleSchemeFactory implements SchemeFactory {
    public JustificationTupleScheme getScheme() {
      return new JustificationTupleScheme();
    }
  }

  private static class JustificationTupleScheme extends TupleScheme<Justification> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Justification struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.mentionId.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetJustificationType()) {
        optionals.set(0);
      }
      if (struct.isSetTokenRefSeqList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetJustificationType()) {
        oprot.writeString(struct.justificationType);
      }
      if (struct.isSetTokenRefSeqList()) {
        {
          oprot.writeI32(struct.tokenRefSeqList.size());
          for (edu.jhu.hlt.concrete.TokenRefSequence _iter12 : struct.tokenRefSeqList)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Justification struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.mentionId = new edu.jhu.hlt.concrete.UUID();
      struct.mentionId.read(iprot);
      struct.setMentionIdIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.justificationType = iprot.readString();
        struct.setJustificationTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tokenRefSeqList = new ArrayList<edu.jhu.hlt.concrete.TokenRefSequence>(_list13.size);
          edu.jhu.hlt.concrete.TokenRefSequence _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new edu.jhu.hlt.concrete.TokenRefSequence();
            _elem14.read(iprot);
            struct.tokenRefSeqList.add(_elem14);
          }
        }
        struct.setTokenRefSeqListIsSet(true);
      }
    }
  }

}

