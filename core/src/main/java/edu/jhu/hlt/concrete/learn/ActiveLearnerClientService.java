/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete.learn;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ActiveLearnerClientService {

  /**
   * The active learner client implements a method to accept new sorts of the annotation units
   */
  public interface Iface extends edu.jhu.hlt.concrete.services.Service.Iface {

    /**
     * Submit a new sort of communications to the broker
     * 
     * @param sessionId
     * @param unitIds
     */
    public void submitSort(edu.jhu.hlt.concrete.UUID sessionId, java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> unitIds) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends edu.jhu.hlt.concrete.services.Service .AsyncIface {

    public void submitSort(edu.jhu.hlt.concrete.UUID sessionId, java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> unitIds, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends edu.jhu.hlt.concrete.services.Service.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void submitSort(edu.jhu.hlt.concrete.UUID sessionId, java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> unitIds) throws org.apache.thrift.TException
    {
      send_submitSort(sessionId, unitIds);
      recv_submitSort();
    }

    public void send_submitSort(edu.jhu.hlt.concrete.UUID sessionId, java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> unitIds) throws org.apache.thrift.TException
    {
      submitSort_args args = new submitSort_args();
      args.setSessionId(sessionId);
      args.setUnitIds(unitIds);
      sendBase("submitSort", args);
    }

    public void recv_submitSort() throws org.apache.thrift.TException
    {
      submitSort_result result = new submitSort_result();
      receiveBase(result, "submitSort");
      return;
    }

  }
  public static class AsyncClient extends edu.jhu.hlt.concrete.services.Service.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void submitSort(edu.jhu.hlt.concrete.UUID sessionId, java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> unitIds, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitSort_call method_call = new submitSort_call(sessionId, unitIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitSort_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private edu.jhu.hlt.concrete.UUID sessionId;
      private java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> unitIds;
      public submitSort_call(edu.jhu.hlt.concrete.UUID sessionId, java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> unitIds, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.unitIds = unitIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitSort", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitSort_args args = new submitSort_args();
        args.setSessionId(sessionId);
        args.setUnitIds(unitIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends edu.jhu.hlt.concrete.services.Service.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("submitSort", new submitSort());
      return processMap;
    }

    public static class submitSort<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitSort_args> {
      public submitSort() {
        super("submitSort");
      }

      public submitSort_args getEmptyArgsInstance() {
        return new submitSort_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitSort_result getResult(I iface, submitSort_args args) throws org.apache.thrift.TException {
        submitSort_result result = new submitSort_result();
        iface.submitSort(args.sessionId, args.unitIds);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends edu.jhu.hlt.concrete.services.Service.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("submitSort", new submitSort());
      return processMap;
    }

    public static class submitSort<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitSort_args, Void> {
      public submitSort() {
        super("submitSort");
      }

      public submitSort_args getEmptyArgsInstance() {
        return new submitSort_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            submitSort_result result = new submitSort_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            submitSort_result result = new submitSort_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitSort_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.submitSort(args.sessionId, args.unitIds,resultHandler);
      }
    }

  }

  public static class submitSort_args implements org.apache.thrift.TBase<submitSort_args, submitSort_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitSort_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitSort_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNIT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("unitIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new submitSort_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new submitSort_argsTupleSchemeFactory();

    private edu.jhu.hlt.concrete.UUID sessionId; // required
    private java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> unitIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      UNIT_IDS((short)2, "unitIds");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // UNIT_IDS
            return UNIT_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
      tmpMap.put(_Fields.UNIT_IDS, new org.apache.thrift.meta_data.FieldMetaData("unitIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitSort_args.class, metaDataMap);
    }

    public submitSort_args() {
    }

    public submitSort_args(
      edu.jhu.hlt.concrete.UUID sessionId,
      java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> unitIds)
    {
      this();
      this.sessionId = sessionId;
      this.unitIds = unitIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitSort_args(submitSort_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = new edu.jhu.hlt.concrete.UUID(other.sessionId);
      }
      if (other.isSetUnitIds()) {
        java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> __this__unitIds = new java.util.ArrayList<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>(other.unitIds.size());
        for (edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier other_element : other.unitIds) {
          __this__unitIds.add(new edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier(other_element));
        }
        this.unitIds = __this__unitIds;
      }
    }

    public submitSort_args deepCopy() {
      return new submitSort_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.unitIds = null;
    }

    public edu.jhu.hlt.concrete.UUID getSessionId() {
      return this.sessionId;
    }

    public submitSort_args setSessionId(edu.jhu.hlt.concrete.UUID sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public int getUnitIdsSize() {
      return (this.unitIds == null) ? 0 : this.unitIds.size();
    }

    public java.util.Iterator<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> getUnitIdsIterator() {
      return (this.unitIds == null) ? null : this.unitIds.iterator();
    }

    public void addToUnitIds(edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier elem) {
      if (this.unitIds == null) {
        this.unitIds = new java.util.ArrayList<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>();
      }
      this.unitIds.add(elem);
    }

    public java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> getUnitIds() {
      return this.unitIds;
    }

    public submitSort_args setUnitIds(java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> unitIds) {
      this.unitIds = unitIds;
      return this;
    }

    public void unsetUnitIds() {
      this.unitIds = null;
    }

    /** Returns true if field unitIds is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitIds() {
      return this.unitIds != null;
    }

    public void setUnitIdsIsSet(boolean value) {
      if (!value) {
        this.unitIds = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((edu.jhu.hlt.concrete.UUID)value);
        }
        break;

      case UNIT_IDS:
        if (value == null) {
          unsetUnitIds();
        } else {
          setUnitIds((java.util.List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case UNIT_IDS:
        return getUnitIds();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case UNIT_IDS:
        return isSetUnitIds();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof submitSort_args)
        return this.equals((submitSort_args)that);
      return false;
    }

    public boolean equals(submitSort_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_unitIds = true && this.isSetUnitIds();
      boolean that_present_unitIds = true && that.isSetUnitIds();
      if (this_present_unitIds || that_present_unitIds) {
        if (!(this_present_unitIds && that_present_unitIds))
          return false;
        if (!this.unitIds.equals(that.unitIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
      if (isSetSessionId())
        hashCode = hashCode * 8191 + sessionId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnitIds()) ? 131071 : 524287);
      if (isSetUnitIds())
        hashCode = hashCode * 8191 + unitIds.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(submitSort_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnitIds()).compareTo(other.isSetUnitIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitIds, other.unitIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("submitSort_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unitIds:");
      if (this.unitIds == null) {
        sb.append("null");
      } else {
        sb.append(this.unitIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sessionId != null) {
        sessionId.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitSort_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitSort_argsStandardScheme getScheme() {
        return new submitSort_argsStandardScheme();
      }
    }

    private static class submitSort_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<submitSort_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitSort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sessionId = new edu.jhu.hlt.concrete.UUID();
                struct.sessionId.read(iprot);
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.unitIds = new java.util.ArrayList<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>(_list16.size);
                  edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier();
                    _elem17.read(iprot);
                    struct.unitIds.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setUnitIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitSort_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          struct.sessionId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unitIds != null) {
          oprot.writeFieldBegin(UNIT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.unitIds.size()));
            for (edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier _iter19 : struct.unitIds)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitSort_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitSort_argsTupleScheme getScheme() {
        return new submitSort_argsTupleScheme();
      }
    }

    private static class submitSort_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<submitSort_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitSort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetUnitIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionId()) {
          struct.sessionId.write(oprot);
        }
        if (struct.isSetUnitIds()) {
          {
            oprot.writeI32(struct.unitIds.size());
            for (edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier _iter20 : struct.unitIds)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitSort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionId = new edu.jhu.hlt.concrete.UUID();
          struct.sessionId.read(iprot);
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.unitIds = new java.util.ArrayList<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>(_list21.size);
            edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier();
              _elem22.read(iprot);
              struct.unitIds.add(_elem22);
            }
          }
          struct.setUnitIdsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class submitSort_result implements org.apache.thrift.TBase<submitSort_result, submitSort_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitSort_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitSort_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new submitSort_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new submitSort_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitSort_result.class, metaDataMap);
    }

    public submitSort_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitSort_result(submitSort_result other) {
    }

    public submitSort_result deepCopy() {
      return new submitSort_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof submitSort_result)
        return this.equals((submitSort_result)that);
      return false;
    }

    public boolean equals(submitSort_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(submitSort_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("submitSort_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitSort_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitSort_resultStandardScheme getScheme() {
        return new submitSort_resultStandardScheme();
      }
    }

    private static class submitSort_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<submitSort_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitSort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitSort_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitSort_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public submitSort_resultTupleScheme getScheme() {
        return new submitSort_resultTupleScheme();
      }
    }

    private static class submitSort_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<submitSort_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitSort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitSort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
