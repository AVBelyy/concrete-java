/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Analytic-specific information about an attribute or edge. Digests
 * are used to combine information from multiple sources to generate a
 * unified value. The digests generated by an analytic will only ever
 * be used by that same analytic, so analytics can feel free to encode
 * information in whatever way is convenient.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-04")
public class Digest implements org.apache.thrift.TBase<Digest, Digest._Fields>, java.io.Serializable, Cloneable, Comparable<Digest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Digest");

  private static final org.apache.thrift.protocol.TField BYTES_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("bytesValue", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INT64_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("int64Value", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleValue", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValue", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INT64_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("int64List", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("stringList", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DigestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DigestTupleSchemeFactory());
  }

  private ByteBuffer bytesValue; // optional
  private long int64Value; // optional
  private double doubleValue; // optional
  private String stringValue; // optional
  private List<Long> int64List; // optional
  private List<Double> doubleList; // optional
  private List<String> stringList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The following fields define various ways you can store the
     * digest data (for convenience). If none of these meets your
     * needs, then serialize the digest to a byte sequence and store it
     * in bytesValue.
     */
    BYTES_VALUE((short)1, "bytesValue"),
    INT64_VALUE((short)2, "int64Value"),
    DOUBLE_VALUE((short)3, "doubleValue"),
    STRING_VALUE((short)4, "stringValue"),
    INT64_LIST((short)5, "int64List"),
    DOUBLE_LIST((short)6, "doubleList"),
    STRING_LIST((short)7, "stringList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BYTES_VALUE
          return BYTES_VALUE;
        case 2: // INT64_VALUE
          return INT64_VALUE;
        case 3: // DOUBLE_VALUE
          return DOUBLE_VALUE;
        case 4: // STRING_VALUE
          return STRING_VALUE;
        case 5: // INT64_LIST
          return INT64_LIST;
        case 6: // DOUBLE_LIST
          return DOUBLE_LIST;
        case 7: // STRING_LIST
          return STRING_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INT64VALUE_ISSET_ID = 0;
  private static final int __DOUBLEVALUE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BYTES_VALUE,_Fields.INT64_VALUE,_Fields.DOUBLE_VALUE,_Fields.STRING_VALUE,_Fields.INT64_LIST,_Fields.DOUBLE_LIST,_Fields.STRING_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BYTES_VALUE, new org.apache.thrift.meta_data.FieldMetaData("bytesValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.INT64_VALUE, new org.apache.thrift.meta_data.FieldMetaData("int64Value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("doubleValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("stringValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INT64_LIST, new org.apache.thrift.meta_data.FieldMetaData("int64List", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_LIST, new org.apache.thrift.meta_data.FieldMetaData("doubleList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STRING_LIST, new org.apache.thrift.meta_data.FieldMetaData("stringList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Digest.class, metaDataMap);
  }

  public Digest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Digest(Digest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBytesValue()) {
      this.bytesValue = org.apache.thrift.TBaseHelper.copyBinary(other.bytesValue);
    }
    this.int64Value = other.int64Value;
    this.doubleValue = other.doubleValue;
    if (other.isSetStringValue()) {
      this.stringValue = other.stringValue;
    }
    if (other.isSetInt64List()) {
      List<Long> __this__int64List = new ArrayList<Long>(other.int64List);
      this.int64List = __this__int64List;
    }
    if (other.isSetDoubleList()) {
      List<Double> __this__doubleList = new ArrayList<Double>(other.doubleList);
      this.doubleList = __this__doubleList;
    }
    if (other.isSetStringList()) {
      List<String> __this__stringList = new ArrayList<String>(other.stringList);
      this.stringList = __this__stringList;
    }
  }

  public Digest deepCopy() {
    return new Digest(this);
  }

  @Override
  public void clear() {
    this.bytesValue = null;
    setInt64ValueIsSet(false);
    this.int64Value = 0;
    setDoubleValueIsSet(false);
    this.doubleValue = 0.0;
    this.stringValue = null;
    this.int64List = null;
    this.doubleList = null;
    this.stringList = null;
  }

  /**
   * The following fields define various ways you can store the
   * digest data (for convenience). If none of these meets your
   * needs, then serialize the digest to a byte sequence and store it
   * in bytesValue.
   */
  public byte[] getBytesValue() {
    setBytesValue(org.apache.thrift.TBaseHelper.rightSize(bytesValue));
    return bytesValue == null ? null : bytesValue.array();
  }

  public ByteBuffer bufferForBytesValue() {
    return org.apache.thrift.TBaseHelper.copyBinary(bytesValue);
  }

  /**
   * The following fields define various ways you can store the
   * digest data (for convenience). If none of these meets your
   * needs, then serialize the digest to a byte sequence and store it
   * in bytesValue.
   */
  public Digest setBytesValue(byte[] bytesValue) {
    this.bytesValue = bytesValue == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(bytesValue, bytesValue.length));
    return this;
  }

  public Digest setBytesValue(ByteBuffer bytesValue) {
    this.bytesValue = org.apache.thrift.TBaseHelper.copyBinary(bytesValue);
    return this;
  }

  public void unsetBytesValue() {
    this.bytesValue = null;
  }

  /** Returns true if field bytesValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBytesValue() {
    return this.bytesValue != null;
  }

  public void setBytesValueIsSet(boolean value) {
    if (!value) {
      this.bytesValue = null;
    }
  }

  public long getInt64Value() {
    return this.int64Value;
  }

  public Digest setInt64Value(long int64Value) {
    this.int64Value = int64Value;
    setInt64ValueIsSet(true);
    return this;
  }

  public void unsetInt64Value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT64VALUE_ISSET_ID);
  }

  /** Returns true if field int64Value is set (has been assigned a value) and false otherwise */
  public boolean isSetInt64Value() {
    return EncodingUtils.testBit(__isset_bitfield, __INT64VALUE_ISSET_ID);
  }

  public void setInt64ValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT64VALUE_ISSET_ID, value);
  }

  public double getDoubleValue() {
    return this.doubleValue;
  }

  public Digest setDoubleValue(double doubleValue) {
    this.doubleValue = doubleValue;
    setDoubleValueIsSet(true);
    return this;
  }

  public void unsetDoubleValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  /** Returns true if field doubleValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleValue() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID);
  }

  public void setDoubleValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLEVALUE_ISSET_ID, value);
  }

  public String getStringValue() {
    return this.stringValue;
  }

  public Digest setStringValue(String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  public void unsetStringValue() {
    this.stringValue = null;
  }

  /** Returns true if field stringValue is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValue() {
    return this.stringValue != null;
  }

  public void setStringValueIsSet(boolean value) {
    if (!value) {
      this.stringValue = null;
    }
  }

  public int getInt64ListSize() {
    return (this.int64List == null) ? 0 : this.int64List.size();
  }

  public java.util.Iterator<Long> getInt64ListIterator() {
    return (this.int64List == null) ? null : this.int64List.iterator();
  }

  public void addToInt64List(long elem) {
    if (this.int64List == null) {
      this.int64List = new ArrayList<Long>();
    }
    this.int64List.add(elem);
  }

  public List<Long> getInt64List() {
    return this.int64List;
  }

  public Digest setInt64List(List<Long> int64List) {
    this.int64List = int64List;
    return this;
  }

  public void unsetInt64List() {
    this.int64List = null;
  }

  /** Returns true if field int64List is set (has been assigned a value) and false otherwise */
  public boolean isSetInt64List() {
    return this.int64List != null;
  }

  public void setInt64ListIsSet(boolean value) {
    if (!value) {
      this.int64List = null;
    }
  }

  public int getDoubleListSize() {
    return (this.doubleList == null) ? 0 : this.doubleList.size();
  }

  public java.util.Iterator<Double> getDoubleListIterator() {
    return (this.doubleList == null) ? null : this.doubleList.iterator();
  }

  public void addToDoubleList(double elem) {
    if (this.doubleList == null) {
      this.doubleList = new ArrayList<Double>();
    }
    this.doubleList.add(elem);
  }

  public List<Double> getDoubleList() {
    return this.doubleList;
  }

  public Digest setDoubleList(List<Double> doubleList) {
    this.doubleList = doubleList;
    return this;
  }

  public void unsetDoubleList() {
    this.doubleList = null;
  }

  /** Returns true if field doubleList is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleList() {
    return this.doubleList != null;
  }

  public void setDoubleListIsSet(boolean value) {
    if (!value) {
      this.doubleList = null;
    }
  }

  public int getStringListSize() {
    return (this.stringList == null) ? 0 : this.stringList.size();
  }

  public java.util.Iterator<String> getStringListIterator() {
    return (this.stringList == null) ? null : this.stringList.iterator();
  }

  public void addToStringList(String elem) {
    if (this.stringList == null) {
      this.stringList = new ArrayList<String>();
    }
    this.stringList.add(elem);
  }

  public List<String> getStringList() {
    return this.stringList;
  }

  public Digest setStringList(List<String> stringList) {
    this.stringList = stringList;
    return this;
  }

  public void unsetStringList() {
    this.stringList = null;
  }

  /** Returns true if field stringList is set (has been assigned a value) and false otherwise */
  public boolean isSetStringList() {
    return this.stringList != null;
  }

  public void setStringListIsSet(boolean value) {
    if (!value) {
      this.stringList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BYTES_VALUE:
      if (value == null) {
        unsetBytesValue();
      } else {
        setBytesValue((ByteBuffer)value);
      }
      break;

    case INT64_VALUE:
      if (value == null) {
        unsetInt64Value();
      } else {
        setInt64Value((Long)value);
      }
      break;

    case DOUBLE_VALUE:
      if (value == null) {
        unsetDoubleValue();
      } else {
        setDoubleValue((Double)value);
      }
      break;

    case STRING_VALUE:
      if (value == null) {
        unsetStringValue();
      } else {
        setStringValue((String)value);
      }
      break;

    case INT64_LIST:
      if (value == null) {
        unsetInt64List();
      } else {
        setInt64List((List<Long>)value);
      }
      break;

    case DOUBLE_LIST:
      if (value == null) {
        unsetDoubleList();
      } else {
        setDoubleList((List<Double>)value);
      }
      break;

    case STRING_LIST:
      if (value == null) {
        unsetStringList();
      } else {
        setStringList((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BYTES_VALUE:
      return getBytesValue();

    case INT64_VALUE:
      return getInt64Value();

    case DOUBLE_VALUE:
      return getDoubleValue();

    case STRING_VALUE:
      return getStringValue();

    case INT64_LIST:
      return getInt64List();

    case DOUBLE_LIST:
      return getDoubleList();

    case STRING_LIST:
      return getStringList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BYTES_VALUE:
      return isSetBytesValue();
    case INT64_VALUE:
      return isSetInt64Value();
    case DOUBLE_VALUE:
      return isSetDoubleValue();
    case STRING_VALUE:
      return isSetStringValue();
    case INT64_LIST:
      return isSetInt64List();
    case DOUBLE_LIST:
      return isSetDoubleList();
    case STRING_LIST:
      return isSetStringList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Digest)
      return this.equals((Digest)that);
    return false;
  }

  public boolean equals(Digest that) {
    if (that == null)
      return false;

    boolean this_present_bytesValue = true && this.isSetBytesValue();
    boolean that_present_bytesValue = true && that.isSetBytesValue();
    if (this_present_bytesValue || that_present_bytesValue) {
      if (!(this_present_bytesValue && that_present_bytesValue))
        return false;
      if (!this.bytesValue.equals(that.bytesValue))
        return false;
    }

    boolean this_present_int64Value = true && this.isSetInt64Value();
    boolean that_present_int64Value = true && that.isSetInt64Value();
    if (this_present_int64Value || that_present_int64Value) {
      if (!(this_present_int64Value && that_present_int64Value))
        return false;
      if (this.int64Value != that.int64Value)
        return false;
    }

    boolean this_present_doubleValue = true && this.isSetDoubleValue();
    boolean that_present_doubleValue = true && that.isSetDoubleValue();
    if (this_present_doubleValue || that_present_doubleValue) {
      if (!(this_present_doubleValue && that_present_doubleValue))
        return false;
      if (this.doubleValue != that.doubleValue)
        return false;
    }

    boolean this_present_stringValue = true && this.isSetStringValue();
    boolean that_present_stringValue = true && that.isSetStringValue();
    if (this_present_stringValue || that_present_stringValue) {
      if (!(this_present_stringValue && that_present_stringValue))
        return false;
      if (!this.stringValue.equals(that.stringValue))
        return false;
    }

    boolean this_present_int64List = true && this.isSetInt64List();
    boolean that_present_int64List = true && that.isSetInt64List();
    if (this_present_int64List || that_present_int64List) {
      if (!(this_present_int64List && that_present_int64List))
        return false;
      if (!this.int64List.equals(that.int64List))
        return false;
    }

    boolean this_present_doubleList = true && this.isSetDoubleList();
    boolean that_present_doubleList = true && that.isSetDoubleList();
    if (this_present_doubleList || that_present_doubleList) {
      if (!(this_present_doubleList && that_present_doubleList))
        return false;
      if (!this.doubleList.equals(that.doubleList))
        return false;
    }

    boolean this_present_stringList = true && this.isSetStringList();
    boolean that_present_stringList = true && that.isSetStringList();
    if (this_present_stringList || that_present_stringList) {
      if (!(this_present_stringList && that_present_stringList))
        return false;
      if (!this.stringList.equals(that.stringList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bytesValue = true && (isSetBytesValue());
    list.add(present_bytesValue);
    if (present_bytesValue)
      list.add(bytesValue);

    boolean present_int64Value = true && (isSetInt64Value());
    list.add(present_int64Value);
    if (present_int64Value)
      list.add(int64Value);

    boolean present_doubleValue = true && (isSetDoubleValue());
    list.add(present_doubleValue);
    if (present_doubleValue)
      list.add(doubleValue);

    boolean present_stringValue = true && (isSetStringValue());
    list.add(present_stringValue);
    if (present_stringValue)
      list.add(stringValue);

    boolean present_int64List = true && (isSetInt64List());
    list.add(present_int64List);
    if (present_int64List)
      list.add(int64List);

    boolean present_doubleList = true && (isSetDoubleList());
    list.add(present_doubleList);
    if (present_doubleList)
      list.add(doubleList);

    boolean present_stringList = true && (isSetStringList());
    list.add(present_stringList);
    if (present_stringList)
      list.add(stringList);

    return list.hashCode();
  }

  @Override
  public int compareTo(Digest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBytesValue()).compareTo(other.isSetBytesValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBytesValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytesValue, other.bytesValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt64Value()).compareTo(other.isSetInt64Value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt64Value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int64Value, other.int64Value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleValue()).compareTo(other.isSetDoubleValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleValue, other.doubleValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringValue()).compareTo(other.isSetStringValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValue, other.stringValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt64List()).compareTo(other.isSetInt64List());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt64List()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int64List, other.int64List);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleList()).compareTo(other.isSetDoubleList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleList, other.doubleList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringList()).compareTo(other.isSetStringList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringList, other.stringList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Digest(");
    boolean first = true;

    if (isSetBytesValue()) {
      sb.append("bytesValue:");
      if (this.bytesValue == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bytesValue, sb);
      }
      first = false;
    }
    if (isSetInt64Value()) {
      if (!first) sb.append(", ");
      sb.append("int64Value:");
      sb.append(this.int64Value);
      first = false;
    }
    if (isSetDoubleValue()) {
      if (!first) sb.append(", ");
      sb.append("doubleValue:");
      sb.append(this.doubleValue);
      first = false;
    }
    if (isSetStringValue()) {
      if (!first) sb.append(", ");
      sb.append("stringValue:");
      if (this.stringValue == null) {
        sb.append("null");
      } else {
        sb.append(this.stringValue);
      }
      first = false;
    }
    if (isSetInt64List()) {
      if (!first) sb.append(", ");
      sb.append("int64List:");
      if (this.int64List == null) {
        sb.append("null");
      } else {
        sb.append(this.int64List);
      }
      first = false;
    }
    if (isSetDoubleList()) {
      if (!first) sb.append(", ");
      sb.append("doubleList:");
      if (this.doubleList == null) {
        sb.append("null");
      } else {
        sb.append(this.doubleList);
      }
      first = false;
    }
    if (isSetStringList()) {
      if (!first) sb.append(", ");
      sb.append("stringList:");
      if (this.stringList == null) {
        sb.append("null");
      } else {
        sb.append(this.stringList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DigestStandardSchemeFactory implements SchemeFactory {
    public DigestStandardScheme getScheme() {
      return new DigestStandardScheme();
    }
  }

  private static class DigestStandardScheme extends StandardScheme<Digest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Digest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BYTES_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bytesValue = iprot.readBinary();
              struct.setBytesValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INT64_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.int64Value = iprot.readI64();
              struct.setInt64ValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DOUBLE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleValue = iprot.readDouble();
              struct.setDoubleValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STRING_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringValue = iprot.readString();
              struct.setStringValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INT64_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                struct.int64List = new ArrayList<Long>(_list120.size);
                long _elem121;
                for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                {
                  _elem121 = iprot.readI64();
                  struct.int64List.add(_elem121);
                }
                iprot.readListEnd();
              }
              struct.setInt64ListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list123 = iprot.readListBegin();
                struct.doubleList = new ArrayList<Double>(_list123.size);
                double _elem124;
                for (int _i125 = 0; _i125 < _list123.size; ++_i125)
                {
                  _elem124 = iprot.readDouble();
                  struct.doubleList.add(_elem124);
                }
                iprot.readListEnd();
              }
              struct.setDoubleListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRING_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                struct.stringList = new ArrayList<String>(_list126.size);
                String _elem127;
                for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                {
                  _elem127 = iprot.readString();
                  struct.stringList.add(_elem127);
                }
                iprot.readListEnd();
              }
              struct.setStringListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Digest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bytesValue != null) {
        if (struct.isSetBytesValue()) {
          oprot.writeFieldBegin(BYTES_VALUE_FIELD_DESC);
          oprot.writeBinary(struct.bytesValue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInt64Value()) {
        oprot.writeFieldBegin(INT64_VALUE_FIELD_DESC);
        oprot.writeI64(struct.int64Value);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDoubleValue()) {
        oprot.writeFieldBegin(DOUBLE_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.doubleValue);
        oprot.writeFieldEnd();
      }
      if (struct.stringValue != null) {
        if (struct.isSetStringValue()) {
          oprot.writeFieldBegin(STRING_VALUE_FIELD_DESC);
          oprot.writeString(struct.stringValue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.int64List != null) {
        if (struct.isSetInt64List()) {
          oprot.writeFieldBegin(INT64_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.int64List.size()));
            for (long _iter129 : struct.int64List)
            {
              oprot.writeI64(_iter129);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.doubleList != null) {
        if (struct.isSetDoubleList()) {
          oprot.writeFieldBegin(DOUBLE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.doubleList.size()));
            for (double _iter130 : struct.doubleList)
            {
              oprot.writeDouble(_iter130);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stringList != null) {
        if (struct.isSetStringList()) {
          oprot.writeFieldBegin(STRING_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stringList.size()));
            for (String _iter131 : struct.stringList)
            {
              oprot.writeString(_iter131);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DigestTupleSchemeFactory implements SchemeFactory {
    public DigestTupleScheme getScheme() {
      return new DigestTupleScheme();
    }
  }

  private static class DigestTupleScheme extends TupleScheme<Digest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Digest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBytesValue()) {
        optionals.set(0);
      }
      if (struct.isSetInt64Value()) {
        optionals.set(1);
      }
      if (struct.isSetDoubleValue()) {
        optionals.set(2);
      }
      if (struct.isSetStringValue()) {
        optionals.set(3);
      }
      if (struct.isSetInt64List()) {
        optionals.set(4);
      }
      if (struct.isSetDoubleList()) {
        optionals.set(5);
      }
      if (struct.isSetStringList()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBytesValue()) {
        oprot.writeBinary(struct.bytesValue);
      }
      if (struct.isSetInt64Value()) {
        oprot.writeI64(struct.int64Value);
      }
      if (struct.isSetDoubleValue()) {
        oprot.writeDouble(struct.doubleValue);
      }
      if (struct.isSetStringValue()) {
        oprot.writeString(struct.stringValue);
      }
      if (struct.isSetInt64List()) {
        {
          oprot.writeI32(struct.int64List.size());
          for (long _iter132 : struct.int64List)
          {
            oprot.writeI64(_iter132);
          }
        }
      }
      if (struct.isSetDoubleList()) {
        {
          oprot.writeI32(struct.doubleList.size());
          for (double _iter133 : struct.doubleList)
          {
            oprot.writeDouble(_iter133);
          }
        }
      }
      if (struct.isSetStringList()) {
        {
          oprot.writeI32(struct.stringList.size());
          for (String _iter134 : struct.stringList)
          {
            oprot.writeString(_iter134);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Digest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.bytesValue = iprot.readBinary();
        struct.setBytesValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.int64Value = iprot.readI64();
        struct.setInt64ValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.doubleValue = iprot.readDouble();
        struct.setDoubleValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stringValue = iprot.readString();
        struct.setStringValueIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.int64List = new ArrayList<Long>(_list135.size);
          long _elem136;
          for (int _i137 = 0; _i137 < _list135.size; ++_i137)
          {
            _elem136 = iprot.readI64();
            struct.int64List.add(_elem136);
          }
        }
        struct.setInt64ListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list138 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.doubleList = new ArrayList<Double>(_list138.size);
          double _elem139;
          for (int _i140 = 0; _i140 < _list138.size; ++_i140)
          {
            _elem139 = iprot.readDouble();
            struct.doubleList.add(_elem139);
          }
        }
        struct.setDoubleListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stringList = new ArrayList<String>(_list141.size);
          String _elem142;
          for (int _i143 = 0; _i143 < _list141.size; ++_i143)
          {
            _elem142 = iprot.readString();
            struct.stringList.add(_elem142);
          }
        }
        struct.setStringListIsSet(true);
      }
    }
  }

}

