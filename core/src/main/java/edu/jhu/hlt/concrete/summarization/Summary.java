/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete.summarization;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A shortened version of some text, possibly with some concepts
 * annotated as justifications for why particular pieces of the
 * summary were kept.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class Summary implements org.apache.thrift.TBase<Summary, Summary._Fields>, java.io.Serializable, Cloneable, Comparable<Summary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Summary");

  private static final org.apache.thrift.protocol.TField SUMMARY_COMMUNICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("summaryCommunication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONCEPTS_FIELD_DESC = new org.apache.thrift.protocol.TField("concepts", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SummaryTupleSchemeFactory());
  }

  private edu.jhu.hlt.concrete.Communication summaryCommunication; // optional
  private List<SummaryConcept> concepts; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Contains the text of the generated summary.
     */
    SUMMARY_COMMUNICATION((short)1, "summaryCommunication"),
    /**
     * Concepts mentioned in the summary which are believed to be
     * interesting and/or worth highlighting.
     */
    CONCEPTS((short)2, "concepts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUMMARY_COMMUNICATION
          return SUMMARY_COMMUNICATION;
        case 2: // CONCEPTS
          return CONCEPTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SUMMARY_COMMUNICATION,_Fields.CONCEPTS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUMMARY_COMMUNICATION, new org.apache.thrift.meta_data.FieldMetaData("summaryCommunication", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.Communication.class)));
    tmpMap.put(_Fields.CONCEPTS, new org.apache.thrift.meta_data.FieldMetaData("concepts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SummaryConcept.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Summary.class, metaDataMap);
  }

  public Summary() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Summary(Summary other) {
    if (other.isSetSummaryCommunication()) {
      this.summaryCommunication = new edu.jhu.hlt.concrete.Communication(other.summaryCommunication);
    }
    if (other.isSetConcepts()) {
      List<SummaryConcept> __this__concepts = new ArrayList<SummaryConcept>(other.concepts.size());
      for (SummaryConcept other_element : other.concepts) {
        __this__concepts.add(new SummaryConcept(other_element));
      }
      this.concepts = __this__concepts;
    }
  }

  public Summary deepCopy() {
    return new Summary(this);
  }

  @Override
  public void clear() {
    this.summaryCommunication = null;
    this.concepts = null;
  }

  /**
   * Contains the text of the generated summary.
   */
  public edu.jhu.hlt.concrete.Communication getSummaryCommunication() {
    return this.summaryCommunication;
  }

  /**
   * Contains the text of the generated summary.
   */
  public Summary setSummaryCommunication(edu.jhu.hlt.concrete.Communication summaryCommunication) {
    this.summaryCommunication = summaryCommunication;
    return this;
  }

  public void unsetSummaryCommunication() {
    this.summaryCommunication = null;
  }

  /** Returns true if field summaryCommunication is set (has been assigned a value) and false otherwise */
  public boolean isSetSummaryCommunication() {
    return this.summaryCommunication != null;
  }

  public void setSummaryCommunicationIsSet(boolean value) {
    if (!value) {
      this.summaryCommunication = null;
    }
  }

  public int getConceptsSize() {
    return (this.concepts == null) ? 0 : this.concepts.size();
  }

  public java.util.Iterator<SummaryConcept> getConceptsIterator() {
    return (this.concepts == null) ? null : this.concepts.iterator();
  }

  public void addToConcepts(SummaryConcept elem) {
    if (this.concepts == null) {
      this.concepts = new ArrayList<SummaryConcept>();
    }
    this.concepts.add(elem);
  }

  /**
   * Concepts mentioned in the summary which are believed to be
   * interesting and/or worth highlighting.
   */
  public List<SummaryConcept> getConcepts() {
    return this.concepts;
  }

  /**
   * Concepts mentioned in the summary which are believed to be
   * interesting and/or worth highlighting.
   */
  public Summary setConcepts(List<SummaryConcept> concepts) {
    this.concepts = concepts;
    return this;
  }

  public void unsetConcepts() {
    this.concepts = null;
  }

  /** Returns true if field concepts is set (has been assigned a value) and false otherwise */
  public boolean isSetConcepts() {
    return this.concepts != null;
  }

  public void setConceptsIsSet(boolean value) {
    if (!value) {
      this.concepts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUMMARY_COMMUNICATION:
      if (value == null) {
        unsetSummaryCommunication();
      } else {
        setSummaryCommunication((edu.jhu.hlt.concrete.Communication)value);
      }
      break;

    case CONCEPTS:
      if (value == null) {
        unsetConcepts();
      } else {
        setConcepts((List<SummaryConcept>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUMMARY_COMMUNICATION:
      return getSummaryCommunication();

    case CONCEPTS:
      return getConcepts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUMMARY_COMMUNICATION:
      return isSetSummaryCommunication();
    case CONCEPTS:
      return isSetConcepts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Summary)
      return this.equals((Summary)that);
    return false;
  }

  public boolean equals(Summary that) {
    if (that == null)
      return false;

    boolean this_present_summaryCommunication = true && this.isSetSummaryCommunication();
    boolean that_present_summaryCommunication = true && that.isSetSummaryCommunication();
    if (this_present_summaryCommunication || that_present_summaryCommunication) {
      if (!(this_present_summaryCommunication && that_present_summaryCommunication))
        return false;
      if (!this.summaryCommunication.equals(that.summaryCommunication))
        return false;
    }

    boolean this_present_concepts = true && this.isSetConcepts();
    boolean that_present_concepts = true && that.isSetConcepts();
    if (this_present_concepts || that_present_concepts) {
      if (!(this_present_concepts && that_present_concepts))
        return false;
      if (!this.concepts.equals(that.concepts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_summaryCommunication = true && (isSetSummaryCommunication());
    list.add(present_summaryCommunication);
    if (present_summaryCommunication)
      list.add(summaryCommunication);

    boolean present_concepts = true && (isSetConcepts());
    list.add(present_concepts);
    if (present_concepts)
      list.add(concepts);

    return list.hashCode();
  }

  @Override
  public int compareTo(Summary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSummaryCommunication()).compareTo(other.isSetSummaryCommunication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummaryCommunication()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summaryCommunication, other.summaryCommunication);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConcepts()).compareTo(other.isSetConcepts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConcepts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.concepts, other.concepts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Summary(");
    boolean first = true;

    if (isSetSummaryCommunication()) {
      sb.append("summaryCommunication:");
      if (this.summaryCommunication == null) {
        sb.append("null");
      } else {
        sb.append(this.summaryCommunication);
      }
      first = false;
    }
    if (isSetConcepts()) {
      if (!first) sb.append(", ");
      sb.append("concepts:");
      if (this.concepts == null) {
        sb.append("null");
      } else {
        sb.append(this.concepts);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (summaryCommunication != null) {
      summaryCommunication.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SummaryStandardSchemeFactory implements SchemeFactory {
    public SummaryStandardScheme getScheme() {
      return new SummaryStandardScheme();
    }
  }

  private static class SummaryStandardScheme extends StandardScheme<Summary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Summary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUMMARY_COMMUNICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.summaryCommunication = new edu.jhu.hlt.concrete.Communication();
              struct.summaryCommunication.read(iprot);
              struct.setSummaryCommunicationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONCEPTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.concepts = new ArrayList<SummaryConcept>(_list16.size);
                SummaryConcept _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new SummaryConcept();
                  _elem17.read(iprot);
                  struct.concepts.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setConceptsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Summary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.summaryCommunication != null) {
        if (struct.isSetSummaryCommunication()) {
          oprot.writeFieldBegin(SUMMARY_COMMUNICATION_FIELD_DESC);
          struct.summaryCommunication.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.concepts != null) {
        if (struct.isSetConcepts()) {
          oprot.writeFieldBegin(CONCEPTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.concepts.size()));
            for (SummaryConcept _iter19 : struct.concepts)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SummaryTupleSchemeFactory implements SchemeFactory {
    public SummaryTupleScheme getScheme() {
      return new SummaryTupleScheme();
    }
  }

  private static class SummaryTupleScheme extends TupleScheme<Summary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Summary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSummaryCommunication()) {
        optionals.set(0);
      }
      if (struct.isSetConcepts()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSummaryCommunication()) {
        struct.summaryCommunication.write(oprot);
      }
      if (struct.isSetConcepts()) {
        {
          oprot.writeI32(struct.concepts.size());
          for (SummaryConcept _iter20 : struct.concepts)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Summary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.summaryCommunication = new edu.jhu.hlt.concrete.Communication();
        struct.summaryCommunication.read(iprot);
        struct.setSummaryCommunicationIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.concepts = new ArrayList<SummaryConcept>(_list21.size);
          SummaryConcept _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new SummaryConcept();
            _elem22.read(iprot);
            struct.concepts.add(_elem22);
          }
        }
        struct.setConceptsIsSet(true);
      }
    }
  }

}

