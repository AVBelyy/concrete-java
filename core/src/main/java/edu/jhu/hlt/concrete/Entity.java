/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A single referent (or "entity") that is referred to at least once
 * in a given communication, along with pointers to all of the
 * references to that referent. The referent's type (e.g., is it a
 * person, or a location, or an organization, etc) is also recorded.
 * 
 * Because each Entity contains pointers to all references to a
 * referent with a given communication, an Entity can be
 * thought of as a coreference set.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class Entity implements org.apache.thrift.TBase<Entity, Entity._Fields>, java.io.Serializable, Cloneable, Comparable<Entity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Entity");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MENTION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mentionIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField RAW_MENTION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("rawMentionList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CANONICAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("canonicalName", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EntityTupleSchemeFactory();

  private edu.jhu.hlt.concrete.UUID uuid; // required
  private java.lang.String id; // optional
  private java.util.List<edu.jhu.hlt.concrete.UUID> mentionIdList; // required
  private java.util.List<edu.jhu.hlt.concrete.TokenRefSequence> rawMentionList; // optional
  private java.lang.String type; // optional
  private double confidence; // optional
  private java.lang.String canonicalName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Unique identifier for this entity.
     */
    UUID((short)1, "uuid"),
    /**
     * A corpus-specific and stable id such as a Freebase mid
     * or a DBpedia id.
     */
    ID((short)6, "id"),
    /**
     * An list of pointers to all of the mentions of this Entity's
     * referent.  (type=EntityMention)
     */
    MENTION_ID_LIST((short)2, "mentionIdList"),
    /**
     * An list of pointers to all of the sentences which contain a
     * mention of this Entity.
     */
    RAW_MENTION_LIST((short)7, "rawMentionList"),
    /**
     * The basic type of this entity's referent.
     */
    TYPE((short)3, "type"),
    /**
     * Confidence score for this individual entity.  You can also set a
     * confidence score for an entire EntitySet using the EntitySet's
     * metadata.
     */
    CONFIDENCE((short)4, "confidence"),
    /**
     * A string containing a representative, canonical, or "best" name
     * for this entity's referent.  This string may match one of the
     * mentions' text strings, but it is not required to.
     */
    CANONICAL_NAME((short)5, "canonicalName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 6: // ID
          return ID;
        case 2: // MENTION_ID_LIST
          return MENTION_ID_LIST;
        case 7: // RAW_MENTION_LIST
          return RAW_MENTION_LIST;
        case 3: // TYPE
          return TYPE;
        case 4: // CONFIDENCE
          return CONFIDENCE;
        case 5: // CANONICAL_NAME
          return CANONICAL_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONFIDENCE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.RAW_MENTION_LIST,_Fields.TYPE,_Fields.CONFIDENCE,_Fields.CANONICAL_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENTION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("mentionIdList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.RAW_MENTION_LIST, new org.apache.thrift.meta_data.FieldMetaData("rawMentionList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.TokenRefSequence.class))));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CANONICAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("canonicalName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Entity.class, metaDataMap);
  }

  public Entity() {
  }

  public Entity(
    edu.jhu.hlt.concrete.UUID uuid,
    java.util.List<edu.jhu.hlt.concrete.UUID> mentionIdList)
  {
    this();
    this.uuid = uuid;
    this.mentionIdList = mentionIdList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Entity(Entity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuid()) {
      this.uuid = new edu.jhu.hlt.concrete.UUID(other.uuid);
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetMentionIdList()) {
      java.util.List<edu.jhu.hlt.concrete.UUID> __this__mentionIdList = new java.util.ArrayList<edu.jhu.hlt.concrete.UUID>(other.mentionIdList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.mentionIdList) {
        __this__mentionIdList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.mentionIdList = __this__mentionIdList;
    }
    if (other.isSetRawMentionList()) {
      java.util.List<edu.jhu.hlt.concrete.TokenRefSequence> __this__rawMentionList = new java.util.ArrayList<edu.jhu.hlt.concrete.TokenRefSequence>(other.rawMentionList.size());
      for (edu.jhu.hlt.concrete.TokenRefSequence other_element : other.rawMentionList) {
        __this__rawMentionList.add(new edu.jhu.hlt.concrete.TokenRefSequence(other_element));
      }
      this.rawMentionList = __this__rawMentionList;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.confidence = other.confidence;
    if (other.isSetCanonicalName()) {
      this.canonicalName = other.canonicalName;
    }
  }

  public Entity deepCopy() {
    return new Entity(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.id = null;
    this.mentionIdList = null;
    this.rawMentionList = null;
    this.type = null;
    setConfidenceIsSet(false);
    this.confidence = 0.0;
    this.canonicalName = null;
  }

  /**
   * Unique identifier for this entity.
   */
  public edu.jhu.hlt.concrete.UUID getUuid() {
    return this.uuid;
  }

  /**
   * Unique identifier for this entity.
   */
  public Entity setUuid(edu.jhu.hlt.concrete.UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  /**
   * A corpus-specific and stable id such as a Freebase mid
   * or a DBpedia id.
   */
  public java.lang.String getId() {
    return this.id;
  }

  /**
   * A corpus-specific and stable id such as a Freebase mid
   * or a DBpedia id.
   */
  public Entity setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getMentionIdListSize() {
    return (this.mentionIdList == null) ? 0 : this.mentionIdList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getMentionIdListIterator() {
    return (this.mentionIdList == null) ? null : this.mentionIdList.iterator();
  }

  public void addToMentionIdList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.mentionIdList == null) {
      this.mentionIdList = new java.util.ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.mentionIdList.add(elem);
  }

  /**
   * An list of pointers to all of the mentions of this Entity's
   * referent.  (type=EntityMention)
   */
  public java.util.List<edu.jhu.hlt.concrete.UUID> getMentionIdList() {
    return this.mentionIdList;
  }

  /**
   * An list of pointers to all of the mentions of this Entity's
   * referent.  (type=EntityMention)
   */
  public Entity setMentionIdList(java.util.List<edu.jhu.hlt.concrete.UUID> mentionIdList) {
    this.mentionIdList = mentionIdList;
    return this;
  }

  public void unsetMentionIdList() {
    this.mentionIdList = null;
  }

  /** Returns true if field mentionIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetMentionIdList() {
    return this.mentionIdList != null;
  }

  public void setMentionIdListIsSet(boolean value) {
    if (!value) {
      this.mentionIdList = null;
    }
  }

  public int getRawMentionListSize() {
    return (this.rawMentionList == null) ? 0 : this.rawMentionList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.TokenRefSequence> getRawMentionListIterator() {
    return (this.rawMentionList == null) ? null : this.rawMentionList.iterator();
  }

  public void addToRawMentionList(edu.jhu.hlt.concrete.TokenRefSequence elem) {
    if (this.rawMentionList == null) {
      this.rawMentionList = new java.util.ArrayList<edu.jhu.hlt.concrete.TokenRefSequence>();
    }
    this.rawMentionList.add(elem);
  }

  /**
   * An list of pointers to all of the sentences which contain a
   * mention of this Entity.
   */
  public java.util.List<edu.jhu.hlt.concrete.TokenRefSequence> getRawMentionList() {
    return this.rawMentionList;
  }

  /**
   * An list of pointers to all of the sentences which contain a
   * mention of this Entity.
   */
  public Entity setRawMentionList(java.util.List<edu.jhu.hlt.concrete.TokenRefSequence> rawMentionList) {
    this.rawMentionList = rawMentionList;
    return this;
  }

  public void unsetRawMentionList() {
    this.rawMentionList = null;
  }

  /** Returns true if field rawMentionList is set (has been assigned a value) and false otherwise */
  public boolean isSetRawMentionList() {
    return this.rawMentionList != null;
  }

  public void setRawMentionListIsSet(boolean value) {
    if (!value) {
      this.rawMentionList = null;
    }
  }

  /**
   * The basic type of this entity's referent.
   */
  public java.lang.String getType() {
    return this.type;
  }

  /**
   * The basic type of this entity's referent.
   */
  public Entity setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * Confidence score for this individual entity.  You can also set a
   * confidence score for an entire EntitySet using the EntitySet's
   * metadata.
   */
  public double getConfidence() {
    return this.confidence;
  }

  /**
   * Confidence score for this individual entity.  You can also set a
   * confidence score for an entire EntitySet using the EntitySet's
   * metadata.
   */
  public Entity setConfidence(double confidence) {
    this.confidence = confidence;
    setConfidenceIsSet(true);
    return this;
  }

  public void unsetConfidence() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  public void setConfidenceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
  }

  /**
   * A string containing a representative, canonical, or "best" name
   * for this entity's referent.  This string may match one of the
   * mentions' text strings, but it is not required to.
   */
  public java.lang.String getCanonicalName() {
    return this.canonicalName;
  }

  /**
   * A string containing a representative, canonical, or "best" name
   * for this entity's referent.  This string may match one of the
   * mentions' text strings, but it is not required to.
   */
  public Entity setCanonicalName(java.lang.String canonicalName) {
    this.canonicalName = canonicalName;
    return this;
  }

  public void unsetCanonicalName() {
    this.canonicalName = null;
  }

  /** Returns true if field canonicalName is set (has been assigned a value) and false otherwise */
  public boolean isSetCanonicalName() {
    return this.canonicalName != null;
  }

  public void setCanonicalNameIsSet(boolean value) {
    if (!value) {
      this.canonicalName = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case MENTION_ID_LIST:
      if (value == null) {
        unsetMentionIdList();
      } else {
        setMentionIdList((java.util.List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case RAW_MENTION_LIST:
      if (value == null) {
        unsetRawMentionList();
      } else {
        setRawMentionList((java.util.List<edu.jhu.hlt.concrete.TokenRefSequence>)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((java.lang.Double)value);
      }
      break;

    case CANONICAL_NAME:
      if (value == null) {
        unsetCanonicalName();
      } else {
        setCanonicalName((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case ID:
      return getId();

    case MENTION_ID_LIST:
      return getMentionIdList();

    case RAW_MENTION_LIST:
      return getRawMentionList();

    case TYPE:
      return getType();

    case CONFIDENCE:
      return getConfidence();

    case CANONICAL_NAME:
      return getCanonicalName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case ID:
      return isSetId();
    case MENTION_ID_LIST:
      return isSetMentionIdList();
    case RAW_MENTION_LIST:
      return isSetRawMentionList();
    case TYPE:
      return isSetType();
    case CONFIDENCE:
      return isSetConfidence();
    case CANONICAL_NAME:
      return isSetCanonicalName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Entity)
      return this.equals((Entity)that);
    return false;
  }

  public boolean equals(Entity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_mentionIdList = true && this.isSetMentionIdList();
    boolean that_present_mentionIdList = true && that.isSetMentionIdList();
    if (this_present_mentionIdList || that_present_mentionIdList) {
      if (!(this_present_mentionIdList && that_present_mentionIdList))
        return false;
      if (!this.mentionIdList.equals(that.mentionIdList))
        return false;
    }

    boolean this_present_rawMentionList = true && this.isSetRawMentionList();
    boolean that_present_rawMentionList = true && that.isSetRawMentionList();
    if (this_present_rawMentionList || that_present_rawMentionList) {
      if (!(this_present_rawMentionList && that_present_rawMentionList))
        return false;
      if (!this.rawMentionList.equals(that.rawMentionList))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_confidence = true && this.isSetConfidence();
    boolean that_present_confidence = true && that.isSetConfidence();
    if (this_present_confidence || that_present_confidence) {
      if (!(this_present_confidence && that_present_confidence))
        return false;
      if (this.confidence != that.confidence)
        return false;
    }

    boolean this_present_canonicalName = true && this.isSetCanonicalName();
    boolean that_present_canonicalName = true && that.isSetCanonicalName();
    if (this_present_canonicalName || that_present_canonicalName) {
      if (!(this_present_canonicalName && that_present_canonicalName))
        return false;
      if (!this.canonicalName.equals(that.canonicalName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetMentionIdList()) ? 131071 : 524287);
    if (isSetMentionIdList())
      hashCode = hashCode * 8191 + mentionIdList.hashCode();

    hashCode = hashCode * 8191 + ((isSetRawMentionList()) ? 131071 : 524287);
    if (isSetRawMentionList())
      hashCode = hashCode * 8191 + rawMentionList.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfidence()) ? 131071 : 524287);
    if (isSetConfidence())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(confidence);

    hashCode = hashCode * 8191 + ((isSetCanonicalName()) ? 131071 : 524287);
    if (isSetCanonicalName())
      hashCode = hashCode * 8191 + canonicalName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Entity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMentionIdList()).compareTo(other.isSetMentionIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMentionIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mentionIdList, other.mentionIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRawMentionList()).compareTo(other.isSetRawMentionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRawMentionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rawMentionList, other.rawMentionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfidence()).compareTo(other.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, other.confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCanonicalName()).compareTo(other.isSetCanonicalName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanonicalName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canonicalName, other.canonicalName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Entity(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("mentionIdList:");
    if (this.mentionIdList == null) {
      sb.append("null");
    } else {
      sb.append(this.mentionIdList);
    }
    first = false;
    if (isSetRawMentionList()) {
      if (!first) sb.append(", ");
      sb.append("rawMentionList:");
      if (this.rawMentionList == null) {
        sb.append("null");
      } else {
        sb.append(this.rawMentionList);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetConfidence()) {
      if (!first) sb.append(", ");
      sb.append("confidence:");
      sb.append(this.confidence);
      first = false;
    }
    if (isSetCanonicalName()) {
      if (!first) sb.append(", ");
      sb.append("canonicalName:");
      if (this.canonicalName == null) {
        sb.append("null");
      } else {
        sb.append(this.canonicalName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (mentionIdList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mentionIdList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uuid != null) {
      uuid.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EntityStandardScheme getScheme() {
      return new EntityStandardScheme();
    }
  }

  private static class EntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<Entity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Entity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uuid = new edu.jhu.hlt.concrete.UUID();
              struct.uuid.read(iprot);
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MENTION_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.mentionIdList = new java.util.ArrayList<edu.jhu.hlt.concrete.UUID>(_list0.size);
                edu.jhu.hlt.concrete.UUID _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new edu.jhu.hlt.concrete.UUID();
                  _elem1.read(iprot);
                  struct.mentionIdList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setMentionIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RAW_MENTION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.rawMentionList = new java.util.ArrayList<edu.jhu.hlt.concrete.TokenRefSequence>(_list3.size);
                edu.jhu.hlt.concrete.TokenRefSequence _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new edu.jhu.hlt.concrete.TokenRefSequence();
                  _elem4.read(iprot);
                  struct.rawMentionList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setRawMentionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence = iprot.readDouble();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CANONICAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.canonicalName = iprot.readString();
              struct.setCanonicalNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Entity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        struct.uuid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mentionIdList != null) {
        oprot.writeFieldBegin(MENTION_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mentionIdList.size()));
          for (edu.jhu.hlt.concrete.UUID _iter6 : struct.mentionIdList)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConfidence()) {
        oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.confidence);
        oprot.writeFieldEnd();
      }
      if (struct.canonicalName != null) {
        if (struct.isSetCanonicalName()) {
          oprot.writeFieldBegin(CANONICAL_NAME_FIELD_DESC);
          oprot.writeString(struct.canonicalName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rawMentionList != null) {
        if (struct.isSetRawMentionList()) {
          oprot.writeFieldBegin(RAW_MENTION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rawMentionList.size()));
            for (edu.jhu.hlt.concrete.TokenRefSequence _iter7 : struct.rawMentionList)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EntityTupleScheme getScheme() {
      return new EntityTupleScheme();
    }
  }

  private static class EntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<Entity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Entity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.uuid.write(oprot);
      {
        oprot.writeI32(struct.mentionIdList.size());
        for (edu.jhu.hlt.concrete.UUID _iter8 : struct.mentionIdList)
        {
          _iter8.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetRawMentionList()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetConfidence()) {
        optionals.set(3);
      }
      if (struct.isSetCanonicalName()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetRawMentionList()) {
        {
          oprot.writeI32(struct.rawMentionList.size());
          for (edu.jhu.hlt.concrete.TokenRefSequence _iter9 : struct.rawMentionList)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetConfidence()) {
        oprot.writeDouble(struct.confidence);
      }
      if (struct.isSetCanonicalName()) {
        oprot.writeString(struct.canonicalName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Entity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.uuid = new edu.jhu.hlt.concrete.UUID();
      struct.uuid.read(iprot);
      struct.setUuidIsSet(true);
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.mentionIdList = new java.util.ArrayList<edu.jhu.hlt.concrete.UUID>(_list10.size);
        edu.jhu.hlt.concrete.UUID _elem11;
        for (int _i12 = 0; _i12 < _list10.size; ++_i12)
        {
          _elem11 = new edu.jhu.hlt.concrete.UUID();
          _elem11.read(iprot);
          struct.mentionIdList.add(_elem11);
        }
      }
      struct.setMentionIdListIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.rawMentionList = new java.util.ArrayList<edu.jhu.hlt.concrete.TokenRefSequence>(_list13.size);
          edu.jhu.hlt.concrete.TokenRefSequence _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new edu.jhu.hlt.concrete.TokenRefSequence();
            _elem14.read(iprot);
            struct.rawMentionList.add(_elem14);
          }
        }
        struct.setRawMentionListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.confidence = iprot.readDouble();
        struct.setConfidenceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.canonicalName = iprot.readString();
        struct.setCanonicalNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

