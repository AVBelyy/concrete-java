/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete.summarization;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A request to summarize which specifies the length of the desired
 * summary and the text data to be summarized.
 * Either set sourceCommunication or sourceType and sourceIds.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class SummarizationRequest implements org.apache.thrift.TBase<SummarizationRequest, SummarizationRequest._Fields>, java.io.Serializable, Cloneable, Comparable<SummarizationRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SummarizationRequest");

  private static final org.apache.thrift.protocol.TField QUERY_TERMS_FIELD_DESC = new org.apache.thrift.protocol.TField("queryTerms", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField MAXIMUM_TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("maximumTokens", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MAXIMUM_CHARACTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("maximumCharacters", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SOURCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceIds", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SOURCE_COMMUNICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceCommunication", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SummarizationRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SummarizationRequestTupleSchemeFactory();

  private java.util.List<java.lang.String> queryTerms; // optional
  private int maximumTokens; // optional
  private int maximumCharacters; // optional
  private SummarySourceType sourceType; // optional
  private java.util.List<edu.jhu.hlt.concrete.UUID> sourceIds; // optional
  private edu.jhu.hlt.concrete.Communication sourceCommunication; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Terms or features pertinent to the query.
     * Can be empty, meaning summarize all source material with
     * no a priori beliefs about what is important to summarize.
     */
    QUERY_TERMS((short)1, "queryTerms"),
    /**
     * Limit on how long the returned summary can be in tokens.
     */
    MAXIMUM_TOKENS((short)2, "maximumTokens"),
    /**
     * Limit on how long the returned summary can be in characters.
     */
    MAXIMUM_CHARACTERS((short)3, "maximumCharacters"),
    /**
     * How to interpret the ids in sourceIds.
     * May be null is sourceIds is null, otherwise must be populated.
     * 
     * @see SummarySourceType
     */
    SOURCE_TYPE((short)4, "sourceType"),
    /**
     * A list of concrete object ids which serve as the material
     * to summarize.
     */
    SOURCE_IDS((short)5, "sourceIds"),
    /**
     * Alternative to sourceIds+sourceType: provide a Communication
     * of text to summarize.
     */
    SOURCE_COMMUNICATION((short)6, "sourceCommunication");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_TERMS
          return QUERY_TERMS;
        case 2: // MAXIMUM_TOKENS
          return MAXIMUM_TOKENS;
        case 3: // MAXIMUM_CHARACTERS
          return MAXIMUM_CHARACTERS;
        case 4: // SOURCE_TYPE
          return SOURCE_TYPE;
        case 5: // SOURCE_IDS
          return SOURCE_IDS;
        case 6: // SOURCE_COMMUNICATION
          return SOURCE_COMMUNICATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXIMUMTOKENS_ISSET_ID = 0;
  private static final int __MAXIMUMCHARACTERS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUERY_TERMS,_Fields.MAXIMUM_TOKENS,_Fields.MAXIMUM_CHARACTERS,_Fields.SOURCE_TYPE,_Fields.SOURCE_IDS,_Fields.SOURCE_COMMUNICATION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_TERMS, new org.apache.thrift.meta_data.FieldMetaData("queryTerms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAXIMUM_TOKENS, new org.apache.thrift.meta_data.FieldMetaData("maximumTokens", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAXIMUM_CHARACTERS, new org.apache.thrift.meta_data.FieldMetaData("maximumCharacters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sourceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SummarySourceType.class)));
    tmpMap.put(_Fields.SOURCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("sourceIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.SOURCE_COMMUNICATION, new org.apache.thrift.meta_data.FieldMetaData("sourceCommunication", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.Communication.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SummarizationRequest.class, metaDataMap);
  }

  public SummarizationRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SummarizationRequest(SummarizationRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQueryTerms()) {
      java.util.List<java.lang.String> __this__queryTerms = new java.util.ArrayList<java.lang.String>(other.queryTerms);
      this.queryTerms = __this__queryTerms;
    }
    this.maximumTokens = other.maximumTokens;
    this.maximumCharacters = other.maximumCharacters;
    if (other.isSetSourceType()) {
      this.sourceType = other.sourceType;
    }
    if (other.isSetSourceIds()) {
      java.util.List<edu.jhu.hlt.concrete.UUID> __this__sourceIds = new java.util.ArrayList<edu.jhu.hlt.concrete.UUID>(other.sourceIds.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.sourceIds) {
        __this__sourceIds.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.sourceIds = __this__sourceIds;
    }
    if (other.isSetSourceCommunication()) {
      this.sourceCommunication = new edu.jhu.hlt.concrete.Communication(other.sourceCommunication);
    }
  }

  public SummarizationRequest deepCopy() {
    return new SummarizationRequest(this);
  }

  @Override
  public void clear() {
    this.queryTerms = null;
    setMaximumTokensIsSet(false);
    this.maximumTokens = 0;
    setMaximumCharactersIsSet(false);
    this.maximumCharacters = 0;
    this.sourceType = null;
    this.sourceIds = null;
    this.sourceCommunication = null;
  }

  public int getQueryTermsSize() {
    return (this.queryTerms == null) ? 0 : this.queryTerms.size();
  }

  public java.util.Iterator<java.lang.String> getQueryTermsIterator() {
    return (this.queryTerms == null) ? null : this.queryTerms.iterator();
  }

  public void addToQueryTerms(java.lang.String elem) {
    if (this.queryTerms == null) {
      this.queryTerms = new java.util.ArrayList<java.lang.String>();
    }
    this.queryTerms.add(elem);
  }

  /**
   * Terms or features pertinent to the query.
   * Can be empty, meaning summarize all source material with
   * no a priori beliefs about what is important to summarize.
   */
  public java.util.List<java.lang.String> getQueryTerms() {
    return this.queryTerms;
  }

  /**
   * Terms or features pertinent to the query.
   * Can be empty, meaning summarize all source material with
   * no a priori beliefs about what is important to summarize.
   */
  public SummarizationRequest setQueryTerms(java.util.List<java.lang.String> queryTerms) {
    this.queryTerms = queryTerms;
    return this;
  }

  public void unsetQueryTerms() {
    this.queryTerms = null;
  }

  /** Returns true if field queryTerms is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryTerms() {
    return this.queryTerms != null;
  }

  public void setQueryTermsIsSet(boolean value) {
    if (!value) {
      this.queryTerms = null;
    }
  }

  /**
   * Limit on how long the returned summary can be in tokens.
   */
  public int getMaximumTokens() {
    return this.maximumTokens;
  }

  /**
   * Limit on how long the returned summary can be in tokens.
   */
  public SummarizationRequest setMaximumTokens(int maximumTokens) {
    this.maximumTokens = maximumTokens;
    setMaximumTokensIsSet(true);
    return this;
  }

  public void unsetMaximumTokens() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXIMUMTOKENS_ISSET_ID);
  }

  /** Returns true if field maximumTokens is set (has been assigned a value) and false otherwise */
  public boolean isSetMaximumTokens() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXIMUMTOKENS_ISSET_ID);
  }

  public void setMaximumTokensIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXIMUMTOKENS_ISSET_ID, value);
  }

  /**
   * Limit on how long the returned summary can be in characters.
   */
  public int getMaximumCharacters() {
    return this.maximumCharacters;
  }

  /**
   * Limit on how long the returned summary can be in characters.
   */
  public SummarizationRequest setMaximumCharacters(int maximumCharacters) {
    this.maximumCharacters = maximumCharacters;
    setMaximumCharactersIsSet(true);
    return this;
  }

  public void unsetMaximumCharacters() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXIMUMCHARACTERS_ISSET_ID);
  }

  /** Returns true if field maximumCharacters is set (has been assigned a value) and false otherwise */
  public boolean isSetMaximumCharacters() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXIMUMCHARACTERS_ISSET_ID);
  }

  public void setMaximumCharactersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXIMUMCHARACTERS_ISSET_ID, value);
  }

  /**
   * How to interpret the ids in sourceIds.
   * May be null is sourceIds is null, otherwise must be populated.
   * 
   * @see SummarySourceType
   */
  public SummarySourceType getSourceType() {
    return this.sourceType;
  }

  /**
   * How to interpret the ids in sourceIds.
   * May be null is sourceIds is null, otherwise must be populated.
   * 
   * @see SummarySourceType
   */
  public SummarizationRequest setSourceType(SummarySourceType sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  public void unsetSourceType() {
    this.sourceType = null;
  }

  /** Returns true if field sourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceType() {
    return this.sourceType != null;
  }

  public void setSourceTypeIsSet(boolean value) {
    if (!value) {
      this.sourceType = null;
    }
  }

  public int getSourceIdsSize() {
    return (this.sourceIds == null) ? 0 : this.sourceIds.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getSourceIdsIterator() {
    return (this.sourceIds == null) ? null : this.sourceIds.iterator();
  }

  public void addToSourceIds(edu.jhu.hlt.concrete.UUID elem) {
    if (this.sourceIds == null) {
      this.sourceIds = new java.util.ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.sourceIds.add(elem);
  }

  /**
   * A list of concrete object ids which serve as the material
   * to summarize.
   */
  public java.util.List<edu.jhu.hlt.concrete.UUID> getSourceIds() {
    return this.sourceIds;
  }

  /**
   * A list of concrete object ids which serve as the material
   * to summarize.
   */
  public SummarizationRequest setSourceIds(java.util.List<edu.jhu.hlt.concrete.UUID> sourceIds) {
    this.sourceIds = sourceIds;
    return this;
  }

  public void unsetSourceIds() {
    this.sourceIds = null;
  }

  /** Returns true if field sourceIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceIds() {
    return this.sourceIds != null;
  }

  public void setSourceIdsIsSet(boolean value) {
    if (!value) {
      this.sourceIds = null;
    }
  }

  /**
   * Alternative to sourceIds+sourceType: provide a Communication
   * of text to summarize.
   */
  public edu.jhu.hlt.concrete.Communication getSourceCommunication() {
    return this.sourceCommunication;
  }

  /**
   * Alternative to sourceIds+sourceType: provide a Communication
   * of text to summarize.
   */
  public SummarizationRequest setSourceCommunication(edu.jhu.hlt.concrete.Communication sourceCommunication) {
    this.sourceCommunication = sourceCommunication;
    return this;
  }

  public void unsetSourceCommunication() {
    this.sourceCommunication = null;
  }

  /** Returns true if field sourceCommunication is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceCommunication() {
    return this.sourceCommunication != null;
  }

  public void setSourceCommunicationIsSet(boolean value) {
    if (!value) {
      this.sourceCommunication = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case QUERY_TERMS:
      if (value == null) {
        unsetQueryTerms();
      } else {
        setQueryTerms((java.util.List<java.lang.String>)value);
      }
      break;

    case MAXIMUM_TOKENS:
      if (value == null) {
        unsetMaximumTokens();
      } else {
        setMaximumTokens((java.lang.Integer)value);
      }
      break;

    case MAXIMUM_CHARACTERS:
      if (value == null) {
        unsetMaximumCharacters();
      } else {
        setMaximumCharacters((java.lang.Integer)value);
      }
      break;

    case SOURCE_TYPE:
      if (value == null) {
        unsetSourceType();
      } else {
        setSourceType((SummarySourceType)value);
      }
      break;

    case SOURCE_IDS:
      if (value == null) {
        unsetSourceIds();
      } else {
        setSourceIds((java.util.List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case SOURCE_COMMUNICATION:
      if (value == null) {
        unsetSourceCommunication();
      } else {
        setSourceCommunication((edu.jhu.hlt.concrete.Communication)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_TERMS:
      return getQueryTerms();

    case MAXIMUM_TOKENS:
      return getMaximumTokens();

    case MAXIMUM_CHARACTERS:
      return getMaximumCharacters();

    case SOURCE_TYPE:
      return getSourceType();

    case SOURCE_IDS:
      return getSourceIds();

    case SOURCE_COMMUNICATION:
      return getSourceCommunication();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case QUERY_TERMS:
      return isSetQueryTerms();
    case MAXIMUM_TOKENS:
      return isSetMaximumTokens();
    case MAXIMUM_CHARACTERS:
      return isSetMaximumCharacters();
    case SOURCE_TYPE:
      return isSetSourceType();
    case SOURCE_IDS:
      return isSetSourceIds();
    case SOURCE_COMMUNICATION:
      return isSetSourceCommunication();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SummarizationRequest)
      return this.equals((SummarizationRequest)that);
    return false;
  }

  public boolean equals(SummarizationRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_queryTerms = true && this.isSetQueryTerms();
    boolean that_present_queryTerms = true && that.isSetQueryTerms();
    if (this_present_queryTerms || that_present_queryTerms) {
      if (!(this_present_queryTerms && that_present_queryTerms))
        return false;
      if (!this.queryTerms.equals(that.queryTerms))
        return false;
    }

    boolean this_present_maximumTokens = true && this.isSetMaximumTokens();
    boolean that_present_maximumTokens = true && that.isSetMaximumTokens();
    if (this_present_maximumTokens || that_present_maximumTokens) {
      if (!(this_present_maximumTokens && that_present_maximumTokens))
        return false;
      if (this.maximumTokens != that.maximumTokens)
        return false;
    }

    boolean this_present_maximumCharacters = true && this.isSetMaximumCharacters();
    boolean that_present_maximumCharacters = true && that.isSetMaximumCharacters();
    if (this_present_maximumCharacters || that_present_maximumCharacters) {
      if (!(this_present_maximumCharacters && that_present_maximumCharacters))
        return false;
      if (this.maximumCharacters != that.maximumCharacters)
        return false;
    }

    boolean this_present_sourceType = true && this.isSetSourceType();
    boolean that_present_sourceType = true && that.isSetSourceType();
    if (this_present_sourceType || that_present_sourceType) {
      if (!(this_present_sourceType && that_present_sourceType))
        return false;
      if (!this.sourceType.equals(that.sourceType))
        return false;
    }

    boolean this_present_sourceIds = true && this.isSetSourceIds();
    boolean that_present_sourceIds = true && that.isSetSourceIds();
    if (this_present_sourceIds || that_present_sourceIds) {
      if (!(this_present_sourceIds && that_present_sourceIds))
        return false;
      if (!this.sourceIds.equals(that.sourceIds))
        return false;
    }

    boolean this_present_sourceCommunication = true && this.isSetSourceCommunication();
    boolean that_present_sourceCommunication = true && that.isSetSourceCommunication();
    if (this_present_sourceCommunication || that_present_sourceCommunication) {
      if (!(this_present_sourceCommunication && that_present_sourceCommunication))
        return false;
      if (!this.sourceCommunication.equals(that.sourceCommunication))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetQueryTerms()) ? 131071 : 524287);
    if (isSetQueryTerms())
      hashCode = hashCode * 8191 + queryTerms.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaximumTokens()) ? 131071 : 524287);
    if (isSetMaximumTokens())
      hashCode = hashCode * 8191 + maximumTokens;

    hashCode = hashCode * 8191 + ((isSetMaximumCharacters()) ? 131071 : 524287);
    if (isSetMaximumCharacters())
      hashCode = hashCode * 8191 + maximumCharacters;

    hashCode = hashCode * 8191 + ((isSetSourceType()) ? 131071 : 524287);
    if (isSetSourceType())
      hashCode = hashCode * 8191 + sourceType.getValue();

    hashCode = hashCode * 8191 + ((isSetSourceIds()) ? 131071 : 524287);
    if (isSetSourceIds())
      hashCode = hashCode * 8191 + sourceIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetSourceCommunication()) ? 131071 : 524287);
    if (isSetSourceCommunication())
      hashCode = hashCode * 8191 + sourceCommunication.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SummarizationRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetQueryTerms()).compareTo(other.isSetQueryTerms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryTerms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryTerms, other.queryTerms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaximumTokens()).compareTo(other.isSetMaximumTokens());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaximumTokens()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maximumTokens, other.maximumTokens);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaximumCharacters()).compareTo(other.isSetMaximumCharacters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaximumCharacters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maximumCharacters, other.maximumCharacters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSourceType()).compareTo(other.isSetSourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceType, other.sourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSourceIds()).compareTo(other.isSetSourceIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceIds, other.sourceIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSourceCommunication()).compareTo(other.isSetSourceCommunication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceCommunication()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceCommunication, other.sourceCommunication);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SummarizationRequest(");
    boolean first = true;

    if (isSetQueryTerms()) {
      sb.append("queryTerms:");
      if (this.queryTerms == null) {
        sb.append("null");
      } else {
        sb.append(this.queryTerms);
      }
      first = false;
    }
    if (isSetMaximumTokens()) {
      if (!first) sb.append(", ");
      sb.append("maximumTokens:");
      sb.append(this.maximumTokens);
      first = false;
    }
    if (isSetMaximumCharacters()) {
      if (!first) sb.append(", ");
      sb.append("maximumCharacters:");
      sb.append(this.maximumCharacters);
      first = false;
    }
    if (isSetSourceType()) {
      if (!first) sb.append(", ");
      sb.append("sourceType:");
      if (this.sourceType == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceType);
      }
      first = false;
    }
    if (isSetSourceIds()) {
      if (!first) sb.append(", ");
      sb.append("sourceIds:");
      if (this.sourceIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceIds);
      }
      first = false;
    }
    if (isSetSourceCommunication()) {
      if (!first) sb.append(", ");
      sb.append("sourceCommunication:");
      if (this.sourceCommunication == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceCommunication);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sourceCommunication != null) {
      sourceCommunication.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SummarizationRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SummarizationRequestStandardScheme getScheme() {
      return new SummarizationRequestStandardScheme();
    }
  }

  private static class SummarizationRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<SummarizationRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SummarizationRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_TERMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.queryTerms = new java.util.ArrayList<java.lang.String>(_list0.size);
                java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.queryTerms.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setQueryTermsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAXIMUM_TOKENS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maximumTokens = iprot.readI32();
              struct.setMaximumTokensIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAXIMUM_CHARACTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maximumCharacters = iprot.readI32();
              struct.setMaximumCharactersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourceType = edu.jhu.hlt.concrete.summarization.SummarySourceType.findByValue(iprot.readI32());
              struct.setSourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SOURCE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.sourceIds = new java.util.ArrayList<edu.jhu.hlt.concrete.UUID>(_list3.size);
                edu.jhu.hlt.concrete.UUID _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new edu.jhu.hlt.concrete.UUID();
                  _elem4.read(iprot);
                  struct.sourceIds.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setSourceIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SOURCE_COMMUNICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sourceCommunication = new edu.jhu.hlt.concrete.Communication();
              struct.sourceCommunication.read(iprot);
              struct.setSourceCommunicationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SummarizationRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.queryTerms != null) {
        if (struct.isSetQueryTerms()) {
          oprot.writeFieldBegin(QUERY_TERMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.queryTerms.size()));
            for (java.lang.String _iter6 : struct.queryTerms)
            {
              oprot.writeString(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaximumTokens()) {
        oprot.writeFieldBegin(MAXIMUM_TOKENS_FIELD_DESC);
        oprot.writeI32(struct.maximumTokens);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaximumCharacters()) {
        oprot.writeFieldBegin(MAXIMUM_CHARACTERS_FIELD_DESC);
        oprot.writeI32(struct.maximumCharacters);
        oprot.writeFieldEnd();
      }
      if (struct.sourceType != null) {
        if (struct.isSetSourceType()) {
          oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sourceType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceIds != null) {
        if (struct.isSetSourceIds()) {
          oprot.writeFieldBegin(SOURCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sourceIds.size()));
            for (edu.jhu.hlt.concrete.UUID _iter7 : struct.sourceIds)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceCommunication != null) {
        if (struct.isSetSourceCommunication()) {
          oprot.writeFieldBegin(SOURCE_COMMUNICATION_FIELD_DESC);
          struct.sourceCommunication.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SummarizationRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SummarizationRequestTupleScheme getScheme() {
      return new SummarizationRequestTupleScheme();
    }
  }

  private static class SummarizationRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<SummarizationRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SummarizationRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetQueryTerms()) {
        optionals.set(0);
      }
      if (struct.isSetMaximumTokens()) {
        optionals.set(1);
      }
      if (struct.isSetMaximumCharacters()) {
        optionals.set(2);
      }
      if (struct.isSetSourceType()) {
        optionals.set(3);
      }
      if (struct.isSetSourceIds()) {
        optionals.set(4);
      }
      if (struct.isSetSourceCommunication()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetQueryTerms()) {
        {
          oprot.writeI32(struct.queryTerms.size());
          for (java.lang.String _iter8 : struct.queryTerms)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetMaximumTokens()) {
        oprot.writeI32(struct.maximumTokens);
      }
      if (struct.isSetMaximumCharacters()) {
        oprot.writeI32(struct.maximumCharacters);
      }
      if (struct.isSetSourceType()) {
        oprot.writeI32(struct.sourceType.getValue());
      }
      if (struct.isSetSourceIds()) {
        {
          oprot.writeI32(struct.sourceIds.size());
          for (edu.jhu.hlt.concrete.UUID _iter9 : struct.sourceIds)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetSourceCommunication()) {
        struct.sourceCommunication.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SummarizationRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.queryTerms = new java.util.ArrayList<java.lang.String>(_list10.size);
          java.lang.String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.queryTerms.add(_elem11);
          }
        }
        struct.setQueryTermsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maximumTokens = iprot.readI32();
        struct.setMaximumTokensIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maximumCharacters = iprot.readI32();
        struct.setMaximumCharactersIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sourceType = edu.jhu.hlt.concrete.summarization.SummarySourceType.findByValue(iprot.readI32());
        struct.setSourceTypeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sourceIds = new java.util.ArrayList<edu.jhu.hlt.concrete.UUID>(_list13.size);
          edu.jhu.hlt.concrete.UUID _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new edu.jhu.hlt.concrete.UUID();
            _elem14.read(iprot);
            struct.sourceIds.add(_elem14);
          }
        }
        struct.setSourceIdsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sourceCommunication = new edu.jhu.hlt.concrete.Communication();
        struct.sourceCommunication.read(iprot);
        struct.setSourceCommunicationIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

