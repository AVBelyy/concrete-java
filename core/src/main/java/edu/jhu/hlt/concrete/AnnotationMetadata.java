/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Metadata associated with an annotation or a set of annotations,
 * that identifies where those annotations came from.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class AnnotationMetadata implements org.apache.thrift.TBase<AnnotationMetadata, AnnotationMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<AnnotationMetadata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AnnotationMetadata");

  private static final org.apache.thrift.protocol.TField TOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("tool", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DIGEST_FIELD_DESC = new org.apache.thrift.protocol.TField("digest", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DEPENDENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("dependencies", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField K_BEST_FIELD_DESC = new org.apache.thrift.protocol.TField("kBest", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AnnotationMetadataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AnnotationMetadataTupleSchemeFactory());
  }

  private String tool; // required
  private long timestamp; // required
  private Digest digest; // optional
  private TheoryDependencies dependencies; // optional
  private int kBest; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The name of the tool that generated this annotation.
     */
    TOOL((short)1, "tool"),
    /**
     * The time at which this annotation was generated (in unix time
     * UTC -- i.e., seconds since January 1, 1970).
     */
    TIMESTAMP((short)2, "timestamp"),
    /**
     * A Digest, carrying over any information the annotation metadata
     * wishes to carry over.
     */
    DIGEST((short)4, "digest"),
    /**
     * The theories that supported this annotation.
     * 
     * An empty field indicates that the theory has no
     * dependencies (e.g., an ingester).
     */
    DEPENDENCIES((short)5, "dependencies"),
    /**
     * An integer that represents a ranking for systems
     * that output k-best lists.
     * 
     * For systems that do not output k-best lists,
     * the default value (1) should suffice.
     */
    K_BEST((short)6, "kBest");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOOL
          return TOOL;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 4: // DIGEST
          return DIGEST;
        case 5: // DEPENDENCIES
          return DEPENDENCIES;
        case 6: // K_BEST
          return K_BEST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __KBEST_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DIGEST,_Fields.DEPENDENCIES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOOL, new org.apache.thrift.meta_data.FieldMetaData("tool", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DIGEST, new org.apache.thrift.meta_data.FieldMetaData("digest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Digest.class)));
    tmpMap.put(_Fields.DEPENDENCIES, new org.apache.thrift.meta_data.FieldMetaData("dependencies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TheoryDependencies.class)));
    tmpMap.put(_Fields.K_BEST, new org.apache.thrift.meta_data.FieldMetaData("kBest", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AnnotationMetadata.class, metaDataMap);
  }

  public AnnotationMetadata() {
    this.kBest = 1;

  }

  public AnnotationMetadata(
    String tool,
    long timestamp,
    int kBest)
  {
    this();
    this.tool = tool;
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.kBest = kBest;
    setKBestIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AnnotationMetadata(AnnotationMetadata other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTool()) {
      this.tool = other.tool;
    }
    this.timestamp = other.timestamp;
    if (other.isSetDigest()) {
      this.digest = new Digest(other.digest);
    }
    if (other.isSetDependencies()) {
      this.dependencies = new TheoryDependencies(other.dependencies);
    }
    this.kBest = other.kBest;
  }

  public AnnotationMetadata deepCopy() {
    return new AnnotationMetadata(this);
  }

  @Override
  public void clear() {
    this.tool = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.digest = null;
    this.dependencies = null;
    this.kBest = 1;

  }

  /**
   * The name of the tool that generated this annotation.
   */
  public String getTool() {
    return this.tool;
  }

  /**
   * The name of the tool that generated this annotation.
   */
  public AnnotationMetadata setTool(String tool) {
    this.tool = tool;
    return this;
  }

  public void unsetTool() {
    this.tool = null;
  }

  /** Returns true if field tool is set (has been assigned a value) and false otherwise */
  public boolean isSetTool() {
    return this.tool != null;
  }

  public void setToolIsSet(boolean value) {
    if (!value) {
      this.tool = null;
    }
  }

  /**
   * The time at which this annotation was generated (in unix time
   * UTC -- i.e., seconds since January 1, 1970).
   */
  public long getTimestamp() {
    return this.timestamp;
  }

  /**
   * The time at which this annotation was generated (in unix time
   * UTC -- i.e., seconds since January 1, 1970).
   */
  public AnnotationMetadata setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  /**
   * A Digest, carrying over any information the annotation metadata
   * wishes to carry over.
   */
  public Digest getDigest() {
    return this.digest;
  }

  /**
   * A Digest, carrying over any information the annotation metadata
   * wishes to carry over.
   */
  public AnnotationMetadata setDigest(Digest digest) {
    this.digest = digest;
    return this;
  }

  public void unsetDigest() {
    this.digest = null;
  }

  /** Returns true if field digest is set (has been assigned a value) and false otherwise */
  public boolean isSetDigest() {
    return this.digest != null;
  }

  public void setDigestIsSet(boolean value) {
    if (!value) {
      this.digest = null;
    }
  }

  /**
   * The theories that supported this annotation.
   * 
   * An empty field indicates that the theory has no
   * dependencies (e.g., an ingester).
   */
  public TheoryDependencies getDependencies() {
    return this.dependencies;
  }

  /**
   * The theories that supported this annotation.
   * 
   * An empty field indicates that the theory has no
   * dependencies (e.g., an ingester).
   */
  public AnnotationMetadata setDependencies(TheoryDependencies dependencies) {
    this.dependencies = dependencies;
    return this;
  }

  public void unsetDependencies() {
    this.dependencies = null;
  }

  /** Returns true if field dependencies is set (has been assigned a value) and false otherwise */
  public boolean isSetDependencies() {
    return this.dependencies != null;
  }

  public void setDependenciesIsSet(boolean value) {
    if (!value) {
      this.dependencies = null;
    }
  }

  /**
   * An integer that represents a ranking for systems
   * that output k-best lists.
   * 
   * For systems that do not output k-best lists,
   * the default value (1) should suffice.
   */
  public int getKBest() {
    return this.kBest;
  }

  /**
   * An integer that represents a ranking for systems
   * that output k-best lists.
   * 
   * For systems that do not output k-best lists,
   * the default value (1) should suffice.
   */
  public AnnotationMetadata setKBest(int kBest) {
    this.kBest = kBest;
    setKBestIsSet(true);
    return this;
  }

  public void unsetKBest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __KBEST_ISSET_ID);
  }

  /** Returns true if field kBest is set (has been assigned a value) and false otherwise */
  public boolean isSetKBest() {
    return EncodingUtils.testBit(__isset_bitfield, __KBEST_ISSET_ID);
  }

  public void setKBestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __KBEST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOOL:
      if (value == null) {
        unsetTool();
      } else {
        setTool((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case DIGEST:
      if (value == null) {
        unsetDigest();
      } else {
        setDigest((Digest)value);
      }
      break;

    case DEPENDENCIES:
      if (value == null) {
        unsetDependencies();
      } else {
        setDependencies((TheoryDependencies)value);
      }
      break;

    case K_BEST:
      if (value == null) {
        unsetKBest();
      } else {
        setKBest((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOOL:
      return getTool();

    case TIMESTAMP:
      return getTimestamp();

    case DIGEST:
      return getDigest();

    case DEPENDENCIES:
      return getDependencies();

    case K_BEST:
      return getKBest();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOOL:
      return isSetTool();
    case TIMESTAMP:
      return isSetTimestamp();
    case DIGEST:
      return isSetDigest();
    case DEPENDENCIES:
      return isSetDependencies();
    case K_BEST:
      return isSetKBest();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AnnotationMetadata)
      return this.equals((AnnotationMetadata)that);
    return false;
  }

  public boolean equals(AnnotationMetadata that) {
    if (that == null)
      return false;

    boolean this_present_tool = true && this.isSetTool();
    boolean that_present_tool = true && that.isSetTool();
    if (this_present_tool || that_present_tool) {
      if (!(this_present_tool && that_present_tool))
        return false;
      if (!this.tool.equals(that.tool))
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_digest = true && this.isSetDigest();
    boolean that_present_digest = true && that.isSetDigest();
    if (this_present_digest || that_present_digest) {
      if (!(this_present_digest && that_present_digest))
        return false;
      if (!this.digest.equals(that.digest))
        return false;
    }

    boolean this_present_dependencies = true && this.isSetDependencies();
    boolean that_present_dependencies = true && that.isSetDependencies();
    if (this_present_dependencies || that_present_dependencies) {
      if (!(this_present_dependencies && that_present_dependencies))
        return false;
      if (!this.dependencies.equals(that.dependencies))
        return false;
    }

    boolean this_present_kBest = true;
    boolean that_present_kBest = true;
    if (this_present_kBest || that_present_kBest) {
      if (!(this_present_kBest && that_present_kBest))
        return false;
      if (this.kBest != that.kBest)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tool = true && (isSetTool());
    list.add(present_tool);
    if (present_tool)
      list.add(tool);

    boolean present_timestamp = true;
    list.add(present_timestamp);
    if (present_timestamp)
      list.add(timestamp);

    boolean present_digest = true && (isSetDigest());
    list.add(present_digest);
    if (present_digest)
      list.add(digest);

    boolean present_dependencies = true && (isSetDependencies());
    list.add(present_dependencies);
    if (present_dependencies)
      list.add(dependencies);

    boolean present_kBest = true;
    list.add(present_kBest);
    if (present_kBest)
      list.add(kBest);

    return list.hashCode();
  }

  @Override
  public int compareTo(AnnotationMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTool()).compareTo(other.isSetTool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tool, other.tool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDigest()).compareTo(other.isSetDigest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDigest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.digest, other.digest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDependencies()).compareTo(other.isSetDependencies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependencies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependencies, other.dependencies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKBest()).compareTo(other.isSetKBest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKBest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kBest, other.kBest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AnnotationMetadata(");
    boolean first = true;

    sb.append("tool:");
    if (this.tool == null) {
      sb.append("null");
    } else {
      sb.append(this.tool);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (isSetDigest()) {
      if (!first) sb.append(", ");
      sb.append("digest:");
      if (this.digest == null) {
        sb.append("null");
      } else {
        sb.append(this.digest);
      }
      first = false;
    }
    if (isSetDependencies()) {
      if (!first) sb.append(", ");
      sb.append("dependencies:");
      if (this.dependencies == null) {
        sb.append("null");
      } else {
        sb.append(this.dependencies);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("kBest:");
    sb.append(this.kBest);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tool == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tool' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'kBest' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (digest != null) {
      digest.validate();
    }
    if (dependencies != null) {
      dependencies.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AnnotationMetadataStandardSchemeFactory implements SchemeFactory {
    public AnnotationMetadataStandardScheme getScheme() {
      return new AnnotationMetadataStandardScheme();
    }
  }

  private static class AnnotationMetadataStandardScheme extends StandardScheme<AnnotationMetadata> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AnnotationMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tool = iprot.readString();
              struct.setToolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DIGEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.digest = new Digest();
              struct.digest.read(iprot);
              struct.setDigestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPENDENCIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dependencies = new TheoryDependencies();
              struct.dependencies.read(iprot);
              struct.setDependenciesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // K_BEST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.kBest = iprot.readI32();
              struct.setKBestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetKBest()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'kBest' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AnnotationMetadata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tool != null) {
        oprot.writeFieldBegin(TOOL_FIELD_DESC);
        oprot.writeString(struct.tool);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.digest != null) {
        if (struct.isSetDigest()) {
          oprot.writeFieldBegin(DIGEST_FIELD_DESC);
          struct.digest.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dependencies != null) {
        if (struct.isSetDependencies()) {
          oprot.writeFieldBegin(DEPENDENCIES_FIELD_DESC);
          struct.dependencies.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(K_BEST_FIELD_DESC);
      oprot.writeI32(struct.kBest);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AnnotationMetadataTupleSchemeFactory implements SchemeFactory {
    public AnnotationMetadataTupleScheme getScheme() {
      return new AnnotationMetadataTupleScheme();
    }
  }

  private static class AnnotationMetadataTupleScheme extends TupleScheme<AnnotationMetadata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AnnotationMetadata struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.tool);
      oprot.writeI64(struct.timestamp);
      oprot.writeI32(struct.kBest);
      BitSet optionals = new BitSet();
      if (struct.isSetDigest()) {
        optionals.set(0);
      }
      if (struct.isSetDependencies()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDigest()) {
        struct.digest.write(oprot);
      }
      if (struct.isSetDependencies()) {
        struct.dependencies.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AnnotationMetadata struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tool = iprot.readString();
      struct.setToolIsSet(true);
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      struct.kBest = iprot.readI32();
      struct.setKBestIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.digest = new Digest();
        struct.digest.read(iprot);
        struct.setDigestIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dependencies = new TheoryDependencies();
        struct.dependencies.read(iprot);
        struct.setDependenciesIsSet(true);
      }
    }
  }

}

