/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete.services.results;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-04")
public class ResultsServerService {

  public interface Iface extends edu.jhu.hlt.concrete.services.Service.Iface {

    /**
     * Register the specified search result for annotation.
     * 
     * If a name has not been assigned to the search query, one will be generated.
     * This service also requires that the user_id field be populated in the SearchQuery.
     * 
     * @param result
     * @param taskType
     */
    public void registerSearchResult(edu.jhu.hlt.concrete.search.SearchResult result, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

    /**
     * Get a list of search results for a particular annotation task
     * Set the limit to 0 to get all relevant search results
     * 
     * @param taskType
     * @param limit
     */
    public List<edu.jhu.hlt.concrete.search.SearchResult> getSearchResults(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, int limit) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

    /**
     * Get a list of search results for a particular annotation task filtered by a user id
     * Set the limit to 0 to get all relevant search results
     * 
     * @param taskType
     * @param userId
     * @param limit
     */
    public List<edu.jhu.hlt.concrete.search.SearchResult> getSearchResultsByUser(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, String userId, int limit) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

    /**
     * Get the most recent search results for a user
     * 
     * @param userId
     */
    public edu.jhu.hlt.concrete.search.SearchResult getLatestSearchResult(String userId) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

    /**
     * Get a search result object
     * 
     * @param searchResultId
     */
    public edu.jhu.hlt.concrete.search.SearchResult getSearchResult(edu.jhu.hlt.concrete.UUID searchResultId) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

    /**
     * Start an annotation session
     * Returns a session id used in future session calls
     * 
     * @param searchResultId
     * @param taskType
     */
    public edu.jhu.hlt.concrete.UUID startSession(edu.jhu.hlt.concrete.UUID searchResultId, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

    /**
     * Stops an annotation session
     * 
     * @param sessionId
     */
    public void stopSession(edu.jhu.hlt.concrete.UUID sessionId) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

    /**
     * Get next chunk of data to annotate
     * The client should use the Retriever service to access the data
     * 
     * @param sessionId
     */
    public List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> getNextChunk(edu.jhu.hlt.concrete.UUID sessionId) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

    /**
     * Submit an annotation for a session
     * 
     * @param sessionId
     * @param unitId
     * @param communication
     */
    public void submitAnnotation(edu.jhu.hlt.concrete.UUID sessionId, edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier unitId, edu.jhu.hlt.concrete.Communication communication) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends edu.jhu.hlt.concrete.services.Service .AsyncIface {

    public void registerSearchResult(edu.jhu.hlt.concrete.search.SearchResult result, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSearchResults(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSearchResultsByUser(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, String userId, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLatestSearchResult(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getSearchResult(edu.jhu.hlt.concrete.UUID searchResultId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void startSession(edu.jhu.hlt.concrete.UUID searchResultId, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void stopSession(edu.jhu.hlt.concrete.UUID sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNextChunk(edu.jhu.hlt.concrete.UUID sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void submitAnnotation(edu.jhu.hlt.concrete.UUID sessionId, edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier unitId, edu.jhu.hlt.concrete.Communication communication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends edu.jhu.hlt.concrete.services.Service.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void registerSearchResult(edu.jhu.hlt.concrete.search.SearchResult result, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_registerSearchResult(result, taskType);
      recv_registerSearchResult();
    }

    public void send_registerSearchResult(edu.jhu.hlt.concrete.search.SearchResult result, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType) throws org.apache.thrift.TException
    {
      registerSearchResult_args args = new registerSearchResult_args();
      args.setResult(result);
      args.setTaskType(taskType);
      sendBase("registerSearchResult", args);
    }

    public void recv_registerSearchResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      registerSearchResult_result result = new registerSearchResult_result();
      receiveBase(result, "registerSearchResult");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public List<edu.jhu.hlt.concrete.search.SearchResult> getSearchResults(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, int limit) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_getSearchResults(taskType, limit);
      return recv_getSearchResults();
    }

    public void send_getSearchResults(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, int limit) throws org.apache.thrift.TException
    {
      getSearchResults_args args = new getSearchResults_args();
      args.setTaskType(taskType);
      args.setLimit(limit);
      sendBase("getSearchResults", args);
    }

    public List<edu.jhu.hlt.concrete.search.SearchResult> recv_getSearchResults() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      getSearchResults_result result = new getSearchResults_result();
      receiveBase(result, "getSearchResults");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchResults failed: unknown result");
    }

    public List<edu.jhu.hlt.concrete.search.SearchResult> getSearchResultsByUser(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, String userId, int limit) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_getSearchResultsByUser(taskType, userId, limit);
      return recv_getSearchResultsByUser();
    }

    public void send_getSearchResultsByUser(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, String userId, int limit) throws org.apache.thrift.TException
    {
      getSearchResultsByUser_args args = new getSearchResultsByUser_args();
      args.setTaskType(taskType);
      args.setUserId(userId);
      args.setLimit(limit);
      sendBase("getSearchResultsByUser", args);
    }

    public List<edu.jhu.hlt.concrete.search.SearchResult> recv_getSearchResultsByUser() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      getSearchResultsByUser_result result = new getSearchResultsByUser_result();
      receiveBase(result, "getSearchResultsByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchResultsByUser failed: unknown result");
    }

    public edu.jhu.hlt.concrete.search.SearchResult getLatestSearchResult(String userId) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_getLatestSearchResult(userId);
      return recv_getLatestSearchResult();
    }

    public void send_getLatestSearchResult(String userId) throws org.apache.thrift.TException
    {
      getLatestSearchResult_args args = new getLatestSearchResult_args();
      args.setUserId(userId);
      sendBase("getLatestSearchResult", args);
    }

    public edu.jhu.hlt.concrete.search.SearchResult recv_getLatestSearchResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      getLatestSearchResult_result result = new getLatestSearchResult_result();
      receiveBase(result, "getLatestSearchResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLatestSearchResult failed: unknown result");
    }

    public edu.jhu.hlt.concrete.search.SearchResult getSearchResult(edu.jhu.hlt.concrete.UUID searchResultId) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_getSearchResult(searchResultId);
      return recv_getSearchResult();
    }

    public void send_getSearchResult(edu.jhu.hlt.concrete.UUID searchResultId) throws org.apache.thrift.TException
    {
      getSearchResult_args args = new getSearchResult_args();
      args.setSearchResultId(searchResultId);
      sendBase("getSearchResult", args);
    }

    public edu.jhu.hlt.concrete.search.SearchResult recv_getSearchResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      getSearchResult_result result = new getSearchResult_result();
      receiveBase(result, "getSearchResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSearchResult failed: unknown result");
    }

    public edu.jhu.hlt.concrete.UUID startSession(edu.jhu.hlt.concrete.UUID searchResultId, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_startSession(searchResultId, taskType);
      return recv_startSession();
    }

    public void send_startSession(edu.jhu.hlt.concrete.UUID searchResultId, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType) throws org.apache.thrift.TException
    {
      startSession_args args = new startSession_args();
      args.setSearchResultId(searchResultId);
      args.setTaskType(taskType);
      sendBase("startSession", args);
    }

    public edu.jhu.hlt.concrete.UUID recv_startSession() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      startSession_result result = new startSession_result();
      receiveBase(result, "startSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startSession failed: unknown result");
    }

    public void stopSession(edu.jhu.hlt.concrete.UUID sessionId) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_stopSession(sessionId);
      recv_stopSession();
    }

    public void send_stopSession(edu.jhu.hlt.concrete.UUID sessionId) throws org.apache.thrift.TException
    {
      stopSession_args args = new stopSession_args();
      args.setSessionId(sessionId);
      sendBase("stopSession", args);
    }

    public void recv_stopSession() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      stopSession_result result = new stopSession_result();
      receiveBase(result, "stopSession");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> getNextChunk(edu.jhu.hlt.concrete.UUID sessionId) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_getNextChunk(sessionId);
      return recv_getNextChunk();
    }

    public void send_getNextChunk(edu.jhu.hlt.concrete.UUID sessionId) throws org.apache.thrift.TException
    {
      getNextChunk_args args = new getNextChunk_args();
      args.setSessionId(sessionId);
      sendBase("getNextChunk", args);
    }

    public List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> recv_getNextChunk() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      getNextChunk_result result = new getNextChunk_result();
      receiveBase(result, "getNextChunk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNextChunk failed: unknown result");
    }

    public void submitAnnotation(edu.jhu.hlt.concrete.UUID sessionId, edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier unitId, edu.jhu.hlt.concrete.Communication communication) throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      send_submitAnnotation(sessionId, unitId, communication);
      recv_submitAnnotation();
    }

    public void send_submitAnnotation(edu.jhu.hlt.concrete.UUID sessionId, edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier unitId, edu.jhu.hlt.concrete.Communication communication) throws org.apache.thrift.TException
    {
      submitAnnotation_args args = new submitAnnotation_args();
      args.setSessionId(sessionId);
      args.setUnitId(unitId);
      args.setCommunication(communication);
      sendBase("submitAnnotation", args);
    }

    public void recv_submitAnnotation() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException
    {
      submitAnnotation_result result = new submitAnnotation_result();
      receiveBase(result, "submitAnnotation");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

  }
  public static class AsyncClient extends edu.jhu.hlt.concrete.services.Service.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerSearchResult(edu.jhu.hlt.concrete.search.SearchResult result, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerSearchResult_call method_call = new registerSearchResult_call(result, taskType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerSearchResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private edu.jhu.hlt.concrete.search.SearchResult result;
      private edu.jhu.hlt.concrete.services.AnnotationTaskType taskType;
      public registerSearchResult_call(edu.jhu.hlt.concrete.search.SearchResult result, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.result = result;
        this.taskType = taskType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerSearchResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerSearchResult_args args = new registerSearchResult_args();
        args.setResult(result);
        args.setTaskType(taskType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_registerSearchResult();
      }
    }

    public void getSearchResults(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSearchResults_call method_call = new getSearchResults_call(taskType, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchResults_call extends org.apache.thrift.async.TAsyncMethodCall {
      private edu.jhu.hlt.concrete.services.AnnotationTaskType taskType;
      private int limit;
      public getSearchResults_call(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskType = taskType;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchResults", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchResults_args args = new getSearchResults_args();
        args.setTaskType(taskType);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<edu.jhu.hlt.concrete.search.SearchResult> getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchResults();
      }
    }

    public void getSearchResultsByUser(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, String userId, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSearchResultsByUser_call method_call = new getSearchResultsByUser_call(taskType, userId, limit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchResultsByUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private edu.jhu.hlt.concrete.services.AnnotationTaskType taskType;
      private String userId;
      private int limit;
      public getSearchResultsByUser_call(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, String userId, int limit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskType = taskType;
        this.userId = userId;
        this.limit = limit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchResultsByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchResultsByUser_args args = new getSearchResultsByUser_args();
        args.setTaskType(taskType);
        args.setUserId(userId);
        args.setLimit(limit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<edu.jhu.hlt.concrete.search.SearchResult> getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchResultsByUser();
      }
    }

    public void getLatestSearchResult(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLatestSearchResult_call method_call = new getLatestSearchResult_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLatestSearchResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      public getLatestSearchResult_call(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestSearchResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLatestSearchResult_args args = new getLatestSearchResult_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public edu.jhu.hlt.concrete.search.SearchResult getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLatestSearchResult();
      }
    }

    public void getSearchResult(edu.jhu.hlt.concrete.UUID searchResultId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSearchResult_call method_call = new getSearchResult_call(searchResultId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSearchResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private edu.jhu.hlt.concrete.UUID searchResultId;
      public getSearchResult_call(edu.jhu.hlt.concrete.UUID searchResultId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchResultId = searchResultId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSearchResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSearchResult_args args = new getSearchResult_args();
        args.setSearchResultId(searchResultId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public edu.jhu.hlt.concrete.search.SearchResult getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSearchResult();
      }
    }

    public void startSession(edu.jhu.hlt.concrete.UUID searchResultId, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startSession_call method_call = new startSession_call(searchResultId, taskType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private edu.jhu.hlt.concrete.UUID searchResultId;
      private edu.jhu.hlt.concrete.services.AnnotationTaskType taskType;
      public startSession_call(edu.jhu.hlt.concrete.UUID searchResultId, edu.jhu.hlt.concrete.services.AnnotationTaskType taskType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.searchResultId = searchResultId;
        this.taskType = taskType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startSession_args args = new startSession_args();
        args.setSearchResultId(searchResultId);
        args.setTaskType(taskType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public edu.jhu.hlt.concrete.UUID getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startSession();
      }
    }

    public void stopSession(edu.jhu.hlt.concrete.UUID sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopSession_call method_call = new stopSession_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private edu.jhu.hlt.concrete.UUID sessionId;
      public stopSession_call(edu.jhu.hlt.concrete.UUID sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopSession_args args = new stopSession_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_stopSession();
      }
    }

    public void getNextChunk(edu.jhu.hlt.concrete.UUID sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNextChunk_call method_call = new getNextChunk_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNextChunk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private edu.jhu.hlt.concrete.UUID sessionId;
      public getNextChunk_call(edu.jhu.hlt.concrete.UUID sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNextChunk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNextChunk_args args = new getNextChunk_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNextChunk();
      }
    }

    public void submitAnnotation(edu.jhu.hlt.concrete.UUID sessionId, edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier unitId, edu.jhu.hlt.concrete.Communication communication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitAnnotation_call method_call = new submitAnnotation_call(sessionId, unitId, communication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitAnnotation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private edu.jhu.hlt.concrete.UUID sessionId;
      private edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier unitId;
      private edu.jhu.hlt.concrete.Communication communication;
      public submitAnnotation_call(edu.jhu.hlt.concrete.UUID sessionId, edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier unitId, edu.jhu.hlt.concrete.Communication communication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.unitId = unitId;
        this.communication = communication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitAnnotation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitAnnotation_args args = new submitAnnotation_args();
        args.setSessionId(sessionId);
        args.setUnitId(unitId);
        args.setCommunication(communication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws edu.jhu.hlt.concrete.services.ServicesException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_submitAnnotation();
      }
    }

  }

  public static class Processor<I extends Iface> extends edu.jhu.hlt.concrete.services.Service.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerSearchResult", new registerSearchResult());
      processMap.put("getSearchResults", new getSearchResults());
      processMap.put("getSearchResultsByUser", new getSearchResultsByUser());
      processMap.put("getLatestSearchResult", new getLatestSearchResult());
      processMap.put("getSearchResult", new getSearchResult());
      processMap.put("startSession", new startSession());
      processMap.put("stopSession", new stopSession());
      processMap.put("getNextChunk", new getNextChunk());
      processMap.put("submitAnnotation", new submitAnnotation());
      return processMap;
    }

    public static class registerSearchResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerSearchResult_args> {
      public registerSearchResult() {
        super("registerSearchResult");
      }

      public registerSearchResult_args getEmptyArgsInstance() {
        return new registerSearchResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerSearchResult_result getResult(I iface, registerSearchResult_args args) throws org.apache.thrift.TException {
        registerSearchResult_result result = new registerSearchResult_result();
        try {
          iface.registerSearchResult(args.result, args.taskType);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getSearchResults<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchResults_args> {
      public getSearchResults() {
        super("getSearchResults");
      }

      public getSearchResults_args getEmptyArgsInstance() {
        return new getSearchResults_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchResults_result getResult(I iface, getSearchResults_args args) throws org.apache.thrift.TException {
        getSearchResults_result result = new getSearchResults_result();
        try {
          result.success = iface.getSearchResults(args.taskType, args.limit);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getSearchResultsByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchResultsByUser_args> {
      public getSearchResultsByUser() {
        super("getSearchResultsByUser");
      }

      public getSearchResultsByUser_args getEmptyArgsInstance() {
        return new getSearchResultsByUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchResultsByUser_result getResult(I iface, getSearchResultsByUser_args args) throws org.apache.thrift.TException {
        getSearchResultsByUser_result result = new getSearchResultsByUser_result();
        try {
          result.success = iface.getSearchResultsByUser(args.taskType, args.userId, args.limit);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getLatestSearchResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLatestSearchResult_args> {
      public getLatestSearchResult() {
        super("getLatestSearchResult");
      }

      public getLatestSearchResult_args getEmptyArgsInstance() {
        return new getLatestSearchResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLatestSearchResult_result getResult(I iface, getLatestSearchResult_args args) throws org.apache.thrift.TException {
        getLatestSearchResult_result result = new getLatestSearchResult_result();
        try {
          result.success = iface.getLatestSearchResult(args.userId);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getSearchResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSearchResult_args> {
      public getSearchResult() {
        super("getSearchResult");
      }

      public getSearchResult_args getEmptyArgsInstance() {
        return new getSearchResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSearchResult_result getResult(I iface, getSearchResult_args args) throws org.apache.thrift.TException {
        getSearchResult_result result = new getSearchResult_result();
        try {
          result.success = iface.getSearchResult(args.searchResultId);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class startSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startSession_args> {
      public startSession() {
        super("startSession");
      }

      public startSession_args getEmptyArgsInstance() {
        return new startSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startSession_result getResult(I iface, startSession_args args) throws org.apache.thrift.TException {
        startSession_result result = new startSession_result();
        try {
          result.success = iface.startSession(args.searchResultId, args.taskType);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class stopSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopSession_args> {
      public stopSession() {
        super("stopSession");
      }

      public stopSession_args getEmptyArgsInstance() {
        return new stopSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stopSession_result getResult(I iface, stopSession_args args) throws org.apache.thrift.TException {
        stopSession_result result = new stopSession_result();
        try {
          iface.stopSession(args.sessionId);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getNextChunk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNextChunk_args> {
      public getNextChunk() {
        super("getNextChunk");
      }

      public getNextChunk_args getEmptyArgsInstance() {
        return new getNextChunk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNextChunk_result getResult(I iface, getNextChunk_args args) throws org.apache.thrift.TException {
        getNextChunk_result result = new getNextChunk_result();
        try {
          result.success = iface.getNextChunk(args.sessionId);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class submitAnnotation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitAnnotation_args> {
      public submitAnnotation() {
        super("submitAnnotation");
      }

      public submitAnnotation_args getEmptyArgsInstance() {
        return new submitAnnotation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public submitAnnotation_result getResult(I iface, submitAnnotation_args args) throws org.apache.thrift.TException {
        submitAnnotation_result result = new submitAnnotation_result();
        try {
          iface.submitAnnotation(args.sessionId, args.unitId, args.communication);
        } catch (edu.jhu.hlt.concrete.services.ServicesException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends edu.jhu.hlt.concrete.services.Service.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("registerSearchResult", new registerSearchResult());
      processMap.put("getSearchResults", new getSearchResults());
      processMap.put("getSearchResultsByUser", new getSearchResultsByUser());
      processMap.put("getLatestSearchResult", new getLatestSearchResult());
      processMap.put("getSearchResult", new getSearchResult());
      processMap.put("startSession", new startSession());
      processMap.put("stopSession", new stopSession());
      processMap.put("getNextChunk", new getNextChunk());
      processMap.put("submitAnnotation", new submitAnnotation());
      return processMap;
    }

    public static class registerSearchResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerSearchResult_args, Void> {
      public registerSearchResult() {
        super("registerSearchResult");
      }

      public registerSearchResult_args getEmptyArgsInstance() {
        return new registerSearchResult_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            registerSearchResult_result result = new registerSearchResult_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerSearchResult_result result = new registerSearchResult_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
                        result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerSearchResult_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.registerSearchResult(args.result, args.taskType,resultHandler);
      }
    }

    public static class getSearchResults<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchResults_args, List<edu.jhu.hlt.concrete.search.SearchResult>> {
      public getSearchResults() {
        super("getSearchResults");
      }

      public getSearchResults_args getEmptyArgsInstance() {
        return new getSearchResults_args();
      }

      public AsyncMethodCallback<List<edu.jhu.hlt.concrete.search.SearchResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<edu.jhu.hlt.concrete.search.SearchResult>>() { 
          public void onComplete(List<edu.jhu.hlt.concrete.search.SearchResult> o) {
            getSearchResults_result result = new getSearchResults_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchResults_result result = new getSearchResults_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
                        result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchResults_args args, org.apache.thrift.async.AsyncMethodCallback<List<edu.jhu.hlt.concrete.search.SearchResult>> resultHandler) throws TException {
        iface.getSearchResults(args.taskType, args.limit,resultHandler);
      }
    }

    public static class getSearchResultsByUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchResultsByUser_args, List<edu.jhu.hlt.concrete.search.SearchResult>> {
      public getSearchResultsByUser() {
        super("getSearchResultsByUser");
      }

      public getSearchResultsByUser_args getEmptyArgsInstance() {
        return new getSearchResultsByUser_args();
      }

      public AsyncMethodCallback<List<edu.jhu.hlt.concrete.search.SearchResult>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<edu.jhu.hlt.concrete.search.SearchResult>>() { 
          public void onComplete(List<edu.jhu.hlt.concrete.search.SearchResult> o) {
            getSearchResultsByUser_result result = new getSearchResultsByUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchResultsByUser_result result = new getSearchResultsByUser_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
                        result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchResultsByUser_args args, org.apache.thrift.async.AsyncMethodCallback<List<edu.jhu.hlt.concrete.search.SearchResult>> resultHandler) throws TException {
        iface.getSearchResultsByUser(args.taskType, args.userId, args.limit,resultHandler);
      }
    }

    public static class getLatestSearchResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLatestSearchResult_args, edu.jhu.hlt.concrete.search.SearchResult> {
      public getLatestSearchResult() {
        super("getLatestSearchResult");
      }

      public getLatestSearchResult_args getEmptyArgsInstance() {
        return new getLatestSearchResult_args();
      }

      public AsyncMethodCallback<edu.jhu.hlt.concrete.search.SearchResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<edu.jhu.hlt.concrete.search.SearchResult>() { 
          public void onComplete(edu.jhu.hlt.concrete.search.SearchResult o) {
            getLatestSearchResult_result result = new getLatestSearchResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLatestSearchResult_result result = new getLatestSearchResult_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
                        result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLatestSearchResult_args args, org.apache.thrift.async.AsyncMethodCallback<edu.jhu.hlt.concrete.search.SearchResult> resultHandler) throws TException {
        iface.getLatestSearchResult(args.userId,resultHandler);
      }
    }

    public static class getSearchResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSearchResult_args, edu.jhu.hlt.concrete.search.SearchResult> {
      public getSearchResult() {
        super("getSearchResult");
      }

      public getSearchResult_args getEmptyArgsInstance() {
        return new getSearchResult_args();
      }

      public AsyncMethodCallback<edu.jhu.hlt.concrete.search.SearchResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<edu.jhu.hlt.concrete.search.SearchResult>() { 
          public void onComplete(edu.jhu.hlt.concrete.search.SearchResult o) {
            getSearchResult_result result = new getSearchResult_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getSearchResult_result result = new getSearchResult_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
                        result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSearchResult_args args, org.apache.thrift.async.AsyncMethodCallback<edu.jhu.hlt.concrete.search.SearchResult> resultHandler) throws TException {
        iface.getSearchResult(args.searchResultId,resultHandler);
      }
    }

    public static class startSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startSession_args, edu.jhu.hlt.concrete.UUID> {
      public startSession() {
        super("startSession");
      }

      public startSession_args getEmptyArgsInstance() {
        return new startSession_args();
      }

      public AsyncMethodCallback<edu.jhu.hlt.concrete.UUID> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<edu.jhu.hlt.concrete.UUID>() { 
          public void onComplete(edu.jhu.hlt.concrete.UUID o) {
            startSession_result result = new startSession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            startSession_result result = new startSession_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
                        result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startSession_args args, org.apache.thrift.async.AsyncMethodCallback<edu.jhu.hlt.concrete.UUID> resultHandler) throws TException {
        iface.startSession(args.searchResultId, args.taskType,resultHandler);
      }
    }

    public static class stopSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stopSession_args, Void> {
      public stopSession() {
        super("stopSession");
      }

      public stopSession_args getEmptyArgsInstance() {
        return new stopSession_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            stopSession_result result = new stopSession_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            stopSession_result result = new stopSession_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
                        result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stopSession_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.stopSession(args.sessionId,resultHandler);
      }
    }

    public static class getNextChunk<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNextChunk_args, List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>> {
      public getNextChunk() {
        super("getNextChunk");
      }

      public getNextChunk_args getEmptyArgsInstance() {
        return new getNextChunk_args();
      }

      public AsyncMethodCallback<List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>>() { 
          public void onComplete(List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> o) {
            getNextChunk_result result = new getNextChunk_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNextChunk_result result = new getNextChunk_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
                        result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNextChunk_args args, org.apache.thrift.async.AsyncMethodCallback<List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>> resultHandler) throws TException {
        iface.getNextChunk(args.sessionId,resultHandler);
      }
    }

    public static class submitAnnotation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, submitAnnotation_args, Void> {
      public submitAnnotation() {
        super("submitAnnotation");
      }

      public submitAnnotation_args getEmptyArgsInstance() {
        return new submitAnnotation_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            submitAnnotation_result result = new submitAnnotation_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            submitAnnotation_result result = new submitAnnotation_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ServicesException) {
                        result.ex = (edu.jhu.hlt.concrete.services.ServicesException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, submitAnnotation_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.submitAnnotation(args.sessionId, args.unitId, args.communication,resultHandler);
      }
    }

  }

  public static class registerSearchResult_args implements org.apache.thrift.TBase<registerSearchResult_args, registerSearchResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerSearchResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerSearchResult_args");

    private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerSearchResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerSearchResult_argsTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.search.SearchResult result; // required
    private edu.jhu.hlt.concrete.services.AnnotationTaskType taskType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESULT((short)1, "result"),
      /**
       * 
       * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
       */
      TASK_TYPE((short)2, "taskType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESULT
            return RESULT;
          case 2: // TASK_TYPE
            return TASK_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.search.SearchResult.class)));
      tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, edu.jhu.hlt.concrete.services.AnnotationTaskType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerSearchResult_args.class, metaDataMap);
    }

    public registerSearchResult_args() {
    }

    public registerSearchResult_args(
      edu.jhu.hlt.concrete.search.SearchResult result,
      edu.jhu.hlt.concrete.services.AnnotationTaskType taskType)
    {
      this();
      this.result = result;
      this.taskType = taskType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerSearchResult_args(registerSearchResult_args other) {
      if (other.isSetResult()) {
        this.result = new edu.jhu.hlt.concrete.search.SearchResult(other.result);
      }
      if (other.isSetTaskType()) {
        this.taskType = other.taskType;
      }
    }

    public registerSearchResult_args deepCopy() {
      return new registerSearchResult_args(this);
    }

    @Override
    public void clear() {
      this.result = null;
      this.taskType = null;
    }

    public edu.jhu.hlt.concrete.search.SearchResult getResult() {
      return this.result;
    }

    public registerSearchResult_args setResult(edu.jhu.hlt.concrete.search.SearchResult result) {
      this.result = result;
      return this;
    }

    public void unsetResult() {
      this.result = null;
    }

    /** Returns true if field result is set (has been assigned a value) and false otherwise */
    public boolean isSetResult() {
      return this.result != null;
    }

    public void setResultIsSet(boolean value) {
      if (!value) {
        this.result = null;
      }
    }

    /**
     * 
     * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
     */
    public edu.jhu.hlt.concrete.services.AnnotationTaskType getTaskType() {
      return this.taskType;
    }

    /**
     * 
     * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
     */
    public registerSearchResult_args setTaskType(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType) {
      this.taskType = taskType;
      return this;
    }

    public void unsetTaskType() {
      this.taskType = null;
    }

    /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskType() {
      return this.taskType != null;
    }

    public void setTaskTypeIsSet(boolean value) {
      if (!value) {
        this.taskType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESULT:
        if (value == null) {
          unsetResult();
        } else {
          setResult((edu.jhu.hlt.concrete.search.SearchResult)value);
        }
        break;

      case TASK_TYPE:
        if (value == null) {
          unsetTaskType();
        } else {
          setTaskType((edu.jhu.hlt.concrete.services.AnnotationTaskType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESULT:
        return getResult();

      case TASK_TYPE:
        return getTaskType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESULT:
        return isSetResult();
      case TASK_TYPE:
        return isSetTaskType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerSearchResult_args)
        return this.equals((registerSearchResult_args)that);
      return false;
    }

    public boolean equals(registerSearchResult_args that) {
      if (that == null)
        return false;

      boolean this_present_result = true && this.isSetResult();
      boolean that_present_result = true && that.isSetResult();
      if (this_present_result || that_present_result) {
        if (!(this_present_result && that_present_result))
          return false;
        if (!this.result.equals(that.result))
          return false;
      }

      boolean this_present_taskType = true && this.isSetTaskType();
      boolean that_present_taskType = true && that.isSetTaskType();
      if (this_present_taskType || that_present_taskType) {
        if (!(this_present_taskType && that_present_taskType))
          return false;
        if (!this.taskType.equals(that.taskType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_result = true && (isSetResult());
      list.add(present_result);
      if (present_result)
        list.add(result);

      boolean present_taskType = true && (isSetTaskType());
      list.add(present_taskType);
      if (present_taskType)
        list.add(taskType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(registerSearchResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskType()).compareTo(other.isSetTaskType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerSearchResult_args(");
      boolean first = true;

      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskType:");
      if (this.taskType == null) {
        sb.append("null");
      } else {
        sb.append(this.taskType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (result != null) {
        result.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerSearchResult_argsStandardSchemeFactory implements SchemeFactory {
      public registerSearchResult_argsStandardScheme getScheme() {
        return new registerSearchResult_argsStandardScheme();
      }
    }

    private static class registerSearchResult_argsStandardScheme extends StandardScheme<registerSearchResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerSearchResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.result = new edu.jhu.hlt.concrete.search.SearchResult();
                struct.result.read(iprot);
                struct.setResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskType = edu.jhu.hlt.concrete.services.AnnotationTaskType.findByValue(iprot.readI32());
                struct.setTaskTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerSearchResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.result != null) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          struct.result.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.taskType != null) {
          oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
          oprot.writeI32(struct.taskType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerSearchResult_argsTupleSchemeFactory implements SchemeFactory {
      public registerSearchResult_argsTupleScheme getScheme() {
        return new registerSearchResult_argsTupleScheme();
      }
    }

    private static class registerSearchResult_argsTupleScheme extends TupleScheme<registerSearchResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerSearchResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResult()) {
          optionals.set(0);
        }
        if (struct.isSetTaskType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetResult()) {
          struct.result.write(oprot);
        }
        if (struct.isSetTaskType()) {
          oprot.writeI32(struct.taskType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerSearchResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.result = new edu.jhu.hlt.concrete.search.SearchResult();
          struct.result.read(iprot);
          struct.setResultIsSet(true);
        }
        if (incoming.get(1)) {
          struct.taskType = edu.jhu.hlt.concrete.services.AnnotationTaskType.findByValue(iprot.readI32());
          struct.setTaskTypeIsSet(true);
        }
      }
    }

  }

  public static class registerSearchResult_result implements org.apache.thrift.TBase<registerSearchResult_result, registerSearchResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerSearchResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerSearchResult_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerSearchResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerSearchResult_resultTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerSearchResult_result.class, metaDataMap);
    }

    public registerSearchResult_result() {
    }

    public registerSearchResult_result(
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerSearchResult_result(registerSearchResult_result other) {
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public registerSearchResult_result deepCopy() {
      return new registerSearchResult_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public registerSearchResult_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerSearchResult_result)
        return this.equals((registerSearchResult_result)that);
      return false;
    }

    public boolean equals(registerSearchResult_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(registerSearchResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerSearchResult_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerSearchResult_resultStandardSchemeFactory implements SchemeFactory {
      public registerSearchResult_resultStandardScheme getScheme() {
        return new registerSearchResult_resultStandardScheme();
      }
    }

    private static class registerSearchResult_resultStandardScheme extends StandardScheme<registerSearchResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerSearchResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerSearchResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerSearchResult_resultTupleSchemeFactory implements SchemeFactory {
      public registerSearchResult_resultTupleScheme getScheme() {
        return new registerSearchResult_resultTupleScheme();
      }
    }

    private static class registerSearchResult_resultTupleScheme extends TupleScheme<registerSearchResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerSearchResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerSearchResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getSearchResults_args implements org.apache.thrift.TBase<getSearchResults_args, getSearchResults_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchResults_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchResults_args");

    private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchResults_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchResults_argsTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.services.AnnotationTaskType taskType; // required
    private int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
       */
      TASK_TYPE((short)1, "taskType"),
      LIMIT((short)2, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_TYPE
            return TASK_TYPE;
          case 2: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LIMIT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, edu.jhu.hlt.concrete.services.AnnotationTaskType.class)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchResults_args.class, metaDataMap);
    }

    public getSearchResults_args() {
    }

    public getSearchResults_args(
      edu.jhu.hlt.concrete.services.AnnotationTaskType taskType,
      int limit)
    {
      this();
      this.taskType = taskType;
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchResults_args(getSearchResults_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTaskType()) {
        this.taskType = other.taskType;
      }
      this.limit = other.limit;
    }

    public getSearchResults_args deepCopy() {
      return new getSearchResults_args(this);
    }

    @Override
    public void clear() {
      this.taskType = null;
      setLimitIsSet(false);
      this.limit = 0;
    }

    /**
     * 
     * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
     */
    public edu.jhu.hlt.concrete.services.AnnotationTaskType getTaskType() {
      return this.taskType;
    }

    /**
     * 
     * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
     */
    public getSearchResults_args setTaskType(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType) {
      this.taskType = taskType;
      return this;
    }

    public void unsetTaskType() {
      this.taskType = null;
    }

    /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskType() {
      return this.taskType != null;
    }

    public void setTaskTypeIsSet(boolean value) {
      if (!value) {
        this.taskType = null;
      }
    }

    public int getLimit() {
      return this.limit;
    }

    public getSearchResults_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_TYPE:
        if (value == null) {
          unsetTaskType();
        } else {
          setTaskType((edu.jhu.hlt.concrete.services.AnnotationTaskType)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_TYPE:
        return getTaskType();

      case LIMIT:
        return getLimit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_TYPE:
        return isSetTaskType();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchResults_args)
        return this.equals((getSearchResults_args)that);
      return false;
    }

    public boolean equals(getSearchResults_args that) {
      if (that == null)
        return false;

      boolean this_present_taskType = true && this.isSetTaskType();
      boolean that_present_taskType = true && that.isSetTaskType();
      if (this_present_taskType || that_present_taskType) {
        if (!(this_present_taskType && that_present_taskType))
          return false;
        if (!this.taskType.equals(that.taskType))
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskType = true && (isSetTaskType());
      list.add(present_taskType);
      if (present_taskType)
        list.add(taskType.getValue());

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchResults_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskType()).compareTo(other.isSetTaskType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchResults_args(");
      boolean first = true;

      sb.append("taskType:");
      if (this.taskType == null) {
        sb.append("null");
      } else {
        sb.append(this.taskType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchResults_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchResults_argsStandardScheme getScheme() {
        return new getSearchResults_argsStandardScheme();
      }
    }

    private static class getSearchResults_argsStandardScheme extends StandardScheme<getSearchResults_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchResults_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskType = edu.jhu.hlt.concrete.services.AnnotationTaskType.findByValue(iprot.readI32());
                struct.setTaskTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchResults_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskType != null) {
          oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
          oprot.writeI32(struct.taskType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchResults_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchResults_argsTupleScheme getScheme() {
        return new getSearchResults_argsTupleScheme();
      }
    }

    private static class getSearchResults_argsTupleScheme extends TupleScheme<getSearchResults_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchResults_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskType()) {
          optionals.set(0);
        }
        if (struct.isSetLimit()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTaskType()) {
          oprot.writeI32(struct.taskType.getValue());
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchResults_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.taskType = edu.jhu.hlt.concrete.services.AnnotationTaskType.findByValue(iprot.readI32());
          struct.setTaskTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class getSearchResults_result implements org.apache.thrift.TBase<getSearchResults_result, getSearchResults_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchResults_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchResults_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchResults_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchResults_resultTupleSchemeFactory());
    }

    private List<edu.jhu.hlt.concrete.search.SearchResult> success; // required
    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.search.SearchResult.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchResults_result.class, metaDataMap);
    }

    public getSearchResults_result() {
    }

    public getSearchResults_result(
      List<edu.jhu.hlt.concrete.search.SearchResult> success,
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchResults_result(getSearchResults_result other) {
      if (other.isSetSuccess()) {
        List<edu.jhu.hlt.concrete.search.SearchResult> __this__success = new ArrayList<edu.jhu.hlt.concrete.search.SearchResult>(other.success.size());
        for (edu.jhu.hlt.concrete.search.SearchResult other_element : other.success) {
          __this__success.add(new edu.jhu.hlt.concrete.search.SearchResult(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public getSearchResults_result deepCopy() {
      return new getSearchResults_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<edu.jhu.hlt.concrete.search.SearchResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(edu.jhu.hlt.concrete.search.SearchResult elem) {
      if (this.success == null) {
        this.success = new ArrayList<edu.jhu.hlt.concrete.search.SearchResult>();
      }
      this.success.add(elem);
    }

    public List<edu.jhu.hlt.concrete.search.SearchResult> getSuccess() {
      return this.success;
    }

    public getSearchResults_result setSuccess(List<edu.jhu.hlt.concrete.search.SearchResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public getSearchResults_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<edu.jhu.hlt.concrete.search.SearchResult>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchResults_result)
        return this.equals((getSearchResults_result)that);
      return false;
    }

    public boolean equals(getSearchResults_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchResults_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchResults_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchResults_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchResults_resultStandardScheme getScheme() {
        return new getSearchResults_resultStandardScheme();
      }
    }

    private static class getSearchResults_resultStandardScheme extends StandardScheme<getSearchResults_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchResults_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<edu.jhu.hlt.concrete.search.SearchResult>(_list0.size);
                  edu.jhu.hlt.concrete.search.SearchResult _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new edu.jhu.hlt.concrete.search.SearchResult();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchResults_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (edu.jhu.hlt.concrete.search.SearchResult _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchResults_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchResults_resultTupleScheme getScheme() {
        return new getSearchResults_resultTupleScheme();
      }
    }

    private static class getSearchResults_resultTupleScheme extends TupleScheme<getSearchResults_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchResults_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (edu.jhu.hlt.concrete.search.SearchResult _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchResults_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<edu.jhu.hlt.concrete.search.SearchResult>(_list5.size);
            edu.jhu.hlt.concrete.search.SearchResult _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new edu.jhu.hlt.concrete.search.SearchResult();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getSearchResultsByUser_args implements org.apache.thrift.TBase<getSearchResultsByUser_args, getSearchResultsByUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchResultsByUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchResultsByUser_args");

    private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchResultsByUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchResultsByUser_argsTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.services.AnnotationTaskType taskType; // required
    private String userId; // required
    private int limit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
       */
      TASK_TYPE((short)1, "taskType"),
      USER_ID((short)2, "userId"),
      LIMIT((short)3, "limit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_TYPE
            return TASK_TYPE;
          case 2: // USER_ID
            return USER_ID;
          case 3: // LIMIT
            return LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LIMIT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, edu.jhu.hlt.concrete.services.AnnotationTaskType.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchResultsByUser_args.class, metaDataMap);
    }

    public getSearchResultsByUser_args() {
    }

    public getSearchResultsByUser_args(
      edu.jhu.hlt.concrete.services.AnnotationTaskType taskType,
      String userId,
      int limit)
    {
      this();
      this.taskType = taskType;
      this.userId = userId;
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchResultsByUser_args(getSearchResultsByUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTaskType()) {
        this.taskType = other.taskType;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      this.limit = other.limit;
    }

    public getSearchResultsByUser_args deepCopy() {
      return new getSearchResultsByUser_args(this);
    }

    @Override
    public void clear() {
      this.taskType = null;
      this.userId = null;
      setLimitIsSet(false);
      this.limit = 0;
    }

    /**
     * 
     * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
     */
    public edu.jhu.hlt.concrete.services.AnnotationTaskType getTaskType() {
      return this.taskType;
    }

    /**
     * 
     * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
     */
    public getSearchResultsByUser_args setTaskType(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType) {
      this.taskType = taskType;
      return this;
    }

    public void unsetTaskType() {
      this.taskType = null;
    }

    /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskType() {
      return this.taskType != null;
    }

    public void setTaskTypeIsSet(boolean value) {
      if (!value) {
        this.taskType = null;
      }
    }

    public String getUserId() {
      return this.userId;
    }

    public getSearchResultsByUser_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getLimit() {
      return this.limit;
    }

    public getSearchResultsByUser_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_TYPE:
        if (value == null) {
          unsetTaskType();
        } else {
          setTaskType((edu.jhu.hlt.concrete.services.AnnotationTaskType)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_TYPE:
        return getTaskType();

      case USER_ID:
        return getUserId();

      case LIMIT:
        return getLimit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_TYPE:
        return isSetTaskType();
      case USER_ID:
        return isSetUserId();
      case LIMIT:
        return isSetLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchResultsByUser_args)
        return this.equals((getSearchResultsByUser_args)that);
      return false;
    }

    public boolean equals(getSearchResultsByUser_args that) {
      if (that == null)
        return false;

      boolean this_present_taskType = true && this.isSetTaskType();
      boolean that_present_taskType = true && that.isSetTaskType();
      if (this_present_taskType || that_present_taskType) {
        if (!(this_present_taskType && that_present_taskType))
          return false;
        if (!this.taskType.equals(that.taskType))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskType = true && (isSetTaskType());
      list.add(present_taskType);
      if (present_taskType)
        list.add(taskType.getValue());

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_limit = true;
      list.add(present_limit);
      if (present_limit)
        list.add(limit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchResultsByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskType()).compareTo(other.isSetTaskType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchResultsByUser_args(");
      boolean first = true;

      sb.append("taskType:");
      if (this.taskType == null) {
        sb.append("null");
      } else {
        sb.append(this.taskType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchResultsByUser_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchResultsByUser_argsStandardScheme getScheme() {
        return new getSearchResultsByUser_argsStandardScheme();
      }
    }

    private static class getSearchResultsByUser_argsStandardScheme extends StandardScheme<getSearchResultsByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchResultsByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskType = edu.jhu.hlt.concrete.services.AnnotationTaskType.findByValue(iprot.readI32());
                struct.setTaskTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchResultsByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskType != null) {
          oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
          oprot.writeI32(struct.taskType.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchResultsByUser_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchResultsByUser_argsTupleScheme getScheme() {
        return new getSearchResultsByUser_argsTupleScheme();
      }
    }

    private static class getSearchResultsByUser_argsTupleScheme extends TupleScheme<getSearchResultsByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchResultsByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskType()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetLimit()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTaskType()) {
          oprot.writeI32(struct.taskType.getValue());
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchResultsByUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.taskType = edu.jhu.hlt.concrete.services.AnnotationTaskType.findByValue(iprot.readI32());
          struct.setTaskTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
      }
    }

  }

  public static class getSearchResultsByUser_result implements org.apache.thrift.TBase<getSearchResultsByUser_result, getSearchResultsByUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchResultsByUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchResultsByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchResultsByUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchResultsByUser_resultTupleSchemeFactory());
    }

    private List<edu.jhu.hlt.concrete.search.SearchResult> success; // required
    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.search.SearchResult.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchResultsByUser_result.class, metaDataMap);
    }

    public getSearchResultsByUser_result() {
    }

    public getSearchResultsByUser_result(
      List<edu.jhu.hlt.concrete.search.SearchResult> success,
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchResultsByUser_result(getSearchResultsByUser_result other) {
      if (other.isSetSuccess()) {
        List<edu.jhu.hlt.concrete.search.SearchResult> __this__success = new ArrayList<edu.jhu.hlt.concrete.search.SearchResult>(other.success.size());
        for (edu.jhu.hlt.concrete.search.SearchResult other_element : other.success) {
          __this__success.add(new edu.jhu.hlt.concrete.search.SearchResult(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public getSearchResultsByUser_result deepCopy() {
      return new getSearchResultsByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<edu.jhu.hlt.concrete.search.SearchResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(edu.jhu.hlt.concrete.search.SearchResult elem) {
      if (this.success == null) {
        this.success = new ArrayList<edu.jhu.hlt.concrete.search.SearchResult>();
      }
      this.success.add(elem);
    }

    public List<edu.jhu.hlt.concrete.search.SearchResult> getSuccess() {
      return this.success;
    }

    public getSearchResultsByUser_result setSuccess(List<edu.jhu.hlt.concrete.search.SearchResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public getSearchResultsByUser_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<edu.jhu.hlt.concrete.search.SearchResult>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchResultsByUser_result)
        return this.equals((getSearchResultsByUser_result)that);
      return false;
    }

    public boolean equals(getSearchResultsByUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchResultsByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchResultsByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchResultsByUser_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchResultsByUser_resultStandardScheme getScheme() {
        return new getSearchResultsByUser_resultStandardScheme();
      }
    }

    private static class getSearchResultsByUser_resultStandardScheme extends StandardScheme<getSearchResultsByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchResultsByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<edu.jhu.hlt.concrete.search.SearchResult>(_list8.size);
                  edu.jhu.hlt.concrete.search.SearchResult _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new edu.jhu.hlt.concrete.search.SearchResult();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchResultsByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (edu.jhu.hlt.concrete.search.SearchResult _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchResultsByUser_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchResultsByUser_resultTupleScheme getScheme() {
        return new getSearchResultsByUser_resultTupleScheme();
      }
    }

    private static class getSearchResultsByUser_resultTupleScheme extends TupleScheme<getSearchResultsByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchResultsByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (edu.jhu.hlt.concrete.search.SearchResult _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchResultsByUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<edu.jhu.hlt.concrete.search.SearchResult>(_list13.size);
            edu.jhu.hlt.concrete.search.SearchResult _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new edu.jhu.hlt.concrete.search.SearchResult();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getLatestSearchResult_args implements org.apache.thrift.TBase<getLatestSearchResult_args, getLatestSearchResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestSearchResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestSearchResult_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestSearchResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestSearchResult_argsTupleSchemeFactory());
    }

    private String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestSearchResult_args.class, metaDataMap);
    }

    public getLatestSearchResult_args() {
    }

    public getLatestSearchResult_args(
      String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestSearchResult_args(getLatestSearchResult_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public getLatestSearchResult_args deepCopy() {
      return new getLatestSearchResult_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getLatestSearchResult_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestSearchResult_args)
        return this.equals((getLatestSearchResult_args)that);
      return false;
    }

    public boolean equals(getLatestSearchResult_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true && (isSetUserId());
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLatestSearchResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestSearchResult_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestSearchResult_argsStandardSchemeFactory implements SchemeFactory {
      public getLatestSearchResult_argsStandardScheme getScheme() {
        return new getLatestSearchResult_argsStandardScheme();
      }
    }

    private static class getLatestSearchResult_argsStandardScheme extends StandardScheme<getLatestSearchResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestSearchResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestSearchResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestSearchResult_argsTupleSchemeFactory implements SchemeFactory {
      public getLatestSearchResult_argsTupleScheme getScheme() {
        return new getLatestSearchResult_argsTupleScheme();
      }
    }

    private static class getLatestSearchResult_argsTupleScheme extends TupleScheme<getLatestSearchResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestSearchResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestSearchResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getLatestSearchResult_result implements org.apache.thrift.TBase<getLatestSearchResult_result, getLatestSearchResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestSearchResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestSearchResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestSearchResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestSearchResult_resultTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.search.SearchResult success; // required
    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.search.SearchResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestSearchResult_result.class, metaDataMap);
    }

    public getLatestSearchResult_result() {
    }

    public getLatestSearchResult_result(
      edu.jhu.hlt.concrete.search.SearchResult success,
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestSearchResult_result(getLatestSearchResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new edu.jhu.hlt.concrete.search.SearchResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public getLatestSearchResult_result deepCopy() {
      return new getLatestSearchResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public edu.jhu.hlt.concrete.search.SearchResult getSuccess() {
      return this.success;
    }

    public getLatestSearchResult_result setSuccess(edu.jhu.hlt.concrete.search.SearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public getLatestSearchResult_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((edu.jhu.hlt.concrete.search.SearchResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestSearchResult_result)
        return this.equals((getLatestSearchResult_result)that);
      return false;
    }

    public boolean equals(getLatestSearchResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLatestSearchResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestSearchResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestSearchResult_resultStandardSchemeFactory implements SchemeFactory {
      public getLatestSearchResult_resultStandardScheme getScheme() {
        return new getLatestSearchResult_resultStandardScheme();
      }
    }

    private static class getLatestSearchResult_resultStandardScheme extends StandardScheme<getLatestSearchResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestSearchResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new edu.jhu.hlt.concrete.search.SearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestSearchResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestSearchResult_resultTupleSchemeFactory implements SchemeFactory {
      public getLatestSearchResult_resultTupleScheme getScheme() {
        return new getLatestSearchResult_resultTupleScheme();
      }
    }

    private static class getLatestSearchResult_resultTupleScheme extends TupleScheme<getLatestSearchResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestSearchResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestSearchResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new edu.jhu.hlt.concrete.search.SearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getSearchResult_args implements org.apache.thrift.TBase<getSearchResult_args, getSearchResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchResult_args");

    private static final org.apache.thrift.protocol.TField SEARCH_RESULT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("searchResultId", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchResult_argsTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.UUID searchResultId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_RESULT_ID((short)1, "searchResultId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_RESULT_ID
            return SEARCH_RESULT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_RESULT_ID, new org.apache.thrift.meta_data.FieldMetaData("searchResultId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchResult_args.class, metaDataMap);
    }

    public getSearchResult_args() {
    }

    public getSearchResult_args(
      edu.jhu.hlt.concrete.UUID searchResultId)
    {
      this();
      this.searchResultId = searchResultId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchResult_args(getSearchResult_args other) {
      if (other.isSetSearchResultId()) {
        this.searchResultId = new edu.jhu.hlt.concrete.UUID(other.searchResultId);
      }
    }

    public getSearchResult_args deepCopy() {
      return new getSearchResult_args(this);
    }

    @Override
    public void clear() {
      this.searchResultId = null;
    }

    public edu.jhu.hlt.concrete.UUID getSearchResultId() {
      return this.searchResultId;
    }

    public getSearchResult_args setSearchResultId(edu.jhu.hlt.concrete.UUID searchResultId) {
      this.searchResultId = searchResultId;
      return this;
    }

    public void unsetSearchResultId() {
      this.searchResultId = null;
    }

    /** Returns true if field searchResultId is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchResultId() {
      return this.searchResultId != null;
    }

    public void setSearchResultIdIsSet(boolean value) {
      if (!value) {
        this.searchResultId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEARCH_RESULT_ID:
        if (value == null) {
          unsetSearchResultId();
        } else {
          setSearchResultId((edu.jhu.hlt.concrete.UUID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_RESULT_ID:
        return getSearchResultId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_RESULT_ID:
        return isSetSearchResultId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchResult_args)
        return this.equals((getSearchResult_args)that);
      return false;
    }

    public boolean equals(getSearchResult_args that) {
      if (that == null)
        return false;

      boolean this_present_searchResultId = true && this.isSetSearchResultId();
      boolean that_present_searchResultId = true && that.isSetSearchResultId();
      if (this_present_searchResultId || that_present_searchResultId) {
        if (!(this_present_searchResultId && that_present_searchResultId))
          return false;
        if (!this.searchResultId.equals(that.searchResultId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_searchResultId = true && (isSetSearchResultId());
      list.add(present_searchResultId);
      if (present_searchResultId)
        list.add(searchResultId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSearchResultId()).compareTo(other.isSetSearchResultId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchResultId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchResultId, other.searchResultId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchResult_args(");
      boolean first = true;

      sb.append("searchResultId:");
      if (this.searchResultId == null) {
        sb.append("null");
      } else {
        sb.append(this.searchResultId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchResultId != null) {
        searchResultId.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchResult_argsStandardSchemeFactory implements SchemeFactory {
      public getSearchResult_argsStandardScheme getScheme() {
        return new getSearchResult_argsStandardScheme();
      }
    }

    private static class getSearchResult_argsStandardScheme extends StandardScheme<getSearchResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_RESULT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchResultId = new edu.jhu.hlt.concrete.UUID();
                struct.searchResultId.read(iprot);
                struct.setSearchResultIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchResultId != null) {
          oprot.writeFieldBegin(SEARCH_RESULT_ID_FIELD_DESC);
          struct.searchResultId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchResult_argsTupleSchemeFactory implements SchemeFactory {
      public getSearchResult_argsTupleScheme getScheme() {
        return new getSearchResult_argsTupleScheme();
      }
    }

    private static class getSearchResult_argsTupleScheme extends TupleScheme<getSearchResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSearchResultId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSearchResultId()) {
          struct.searchResultId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.searchResultId = new edu.jhu.hlt.concrete.UUID();
          struct.searchResultId.read(iprot);
          struct.setSearchResultIdIsSet(true);
        }
      }
    }

  }

  public static class getSearchResult_result implements org.apache.thrift.TBase<getSearchResult_result, getSearchResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSearchResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSearchResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSearchResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSearchResult_resultTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.search.SearchResult success; // required
    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.search.SearchResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSearchResult_result.class, metaDataMap);
    }

    public getSearchResult_result() {
    }

    public getSearchResult_result(
      edu.jhu.hlt.concrete.search.SearchResult success,
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSearchResult_result(getSearchResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new edu.jhu.hlt.concrete.search.SearchResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public getSearchResult_result deepCopy() {
      return new getSearchResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public edu.jhu.hlt.concrete.search.SearchResult getSuccess() {
      return this.success;
    }

    public getSearchResult_result setSuccess(edu.jhu.hlt.concrete.search.SearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public getSearchResult_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((edu.jhu.hlt.concrete.search.SearchResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSearchResult_result)
        return this.equals((getSearchResult_result)that);
      return false;
    }

    public boolean equals(getSearchResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getSearchResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSearchResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSearchResult_resultStandardSchemeFactory implements SchemeFactory {
      public getSearchResult_resultStandardScheme getScheme() {
        return new getSearchResult_resultStandardScheme();
      }
    }

    private static class getSearchResult_resultStandardScheme extends StandardScheme<getSearchResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSearchResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new edu.jhu.hlt.concrete.search.SearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSearchResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSearchResult_resultTupleSchemeFactory implements SchemeFactory {
      public getSearchResult_resultTupleScheme getScheme() {
        return new getSearchResult_resultTupleScheme();
      }
    }

    private static class getSearchResult_resultTupleScheme extends TupleScheme<getSearchResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSearchResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSearchResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new edu.jhu.hlt.concrete.search.SearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class startSession_args implements org.apache.thrift.TBase<startSession_args, startSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<startSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startSession_args");

    private static final org.apache.thrift.protocol.TField SEARCH_RESULT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("searchResultId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startSession_argsTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.UUID searchResultId; // required
    private edu.jhu.hlt.concrete.services.AnnotationTaskType taskType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEARCH_RESULT_ID((short)1, "searchResultId"),
      /**
       * 
       * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
       */
      TASK_TYPE((short)2, "taskType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEARCH_RESULT_ID
            return SEARCH_RESULT_ID;
          case 2: // TASK_TYPE
            return TASK_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEARCH_RESULT_ID, new org.apache.thrift.meta_data.FieldMetaData("searchResultId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
      tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, edu.jhu.hlt.concrete.services.AnnotationTaskType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startSession_args.class, metaDataMap);
    }

    public startSession_args() {
    }

    public startSession_args(
      edu.jhu.hlt.concrete.UUID searchResultId,
      edu.jhu.hlt.concrete.services.AnnotationTaskType taskType)
    {
      this();
      this.searchResultId = searchResultId;
      this.taskType = taskType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startSession_args(startSession_args other) {
      if (other.isSetSearchResultId()) {
        this.searchResultId = new edu.jhu.hlt.concrete.UUID(other.searchResultId);
      }
      if (other.isSetTaskType()) {
        this.taskType = other.taskType;
      }
    }

    public startSession_args deepCopy() {
      return new startSession_args(this);
    }

    @Override
    public void clear() {
      this.searchResultId = null;
      this.taskType = null;
    }

    public edu.jhu.hlt.concrete.UUID getSearchResultId() {
      return this.searchResultId;
    }

    public startSession_args setSearchResultId(edu.jhu.hlt.concrete.UUID searchResultId) {
      this.searchResultId = searchResultId;
      return this;
    }

    public void unsetSearchResultId() {
      this.searchResultId = null;
    }

    /** Returns true if field searchResultId is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchResultId() {
      return this.searchResultId != null;
    }

    public void setSearchResultIdIsSet(boolean value) {
      if (!value) {
        this.searchResultId = null;
      }
    }

    /**
     * 
     * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
     */
    public edu.jhu.hlt.concrete.services.AnnotationTaskType getTaskType() {
      return this.taskType;
    }

    /**
     * 
     * @see edu.jhu.hlt.concrete.services.AnnotationTaskType
     */
    public startSession_args setTaskType(edu.jhu.hlt.concrete.services.AnnotationTaskType taskType) {
      this.taskType = taskType;
      return this;
    }

    public void unsetTaskType() {
      this.taskType = null;
    }

    /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskType() {
      return this.taskType != null;
    }

    public void setTaskTypeIsSet(boolean value) {
      if (!value) {
        this.taskType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEARCH_RESULT_ID:
        if (value == null) {
          unsetSearchResultId();
        } else {
          setSearchResultId((edu.jhu.hlt.concrete.UUID)value);
        }
        break;

      case TASK_TYPE:
        if (value == null) {
          unsetTaskType();
        } else {
          setTaskType((edu.jhu.hlt.concrete.services.AnnotationTaskType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEARCH_RESULT_ID:
        return getSearchResultId();

      case TASK_TYPE:
        return getTaskType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEARCH_RESULT_ID:
        return isSetSearchResultId();
      case TASK_TYPE:
        return isSetTaskType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startSession_args)
        return this.equals((startSession_args)that);
      return false;
    }

    public boolean equals(startSession_args that) {
      if (that == null)
        return false;

      boolean this_present_searchResultId = true && this.isSetSearchResultId();
      boolean that_present_searchResultId = true && that.isSetSearchResultId();
      if (this_present_searchResultId || that_present_searchResultId) {
        if (!(this_present_searchResultId && that_present_searchResultId))
          return false;
        if (!this.searchResultId.equals(that.searchResultId))
          return false;
      }

      boolean this_present_taskType = true && this.isSetTaskType();
      boolean that_present_taskType = true && that.isSetTaskType();
      if (this_present_taskType || that_present_taskType) {
        if (!(this_present_taskType && that_present_taskType))
          return false;
        if (!this.taskType.equals(that.taskType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_searchResultId = true && (isSetSearchResultId());
      list.add(present_searchResultId);
      if (present_searchResultId)
        list.add(searchResultId);

      boolean present_taskType = true && (isSetTaskType());
      list.add(present_taskType);
      if (present_taskType)
        list.add(taskType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(startSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSearchResultId()).compareTo(other.isSetSearchResultId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchResultId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchResultId, other.searchResultId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskType()).compareTo(other.isSetTaskType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startSession_args(");
      boolean first = true;

      sb.append("searchResultId:");
      if (this.searchResultId == null) {
        sb.append("null");
      } else {
        sb.append(this.searchResultId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskType:");
      if (this.taskType == null) {
        sb.append("null");
      } else {
        sb.append(this.taskType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (searchResultId != null) {
        searchResultId.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startSession_argsStandardSchemeFactory implements SchemeFactory {
      public startSession_argsStandardScheme getScheme() {
        return new startSession_argsStandardScheme();
      }
    }

    private static class startSession_argsStandardScheme extends StandardScheme<startSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEARCH_RESULT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.searchResultId = new edu.jhu.hlt.concrete.UUID();
                struct.searchResultId.read(iprot);
                struct.setSearchResultIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.taskType = edu.jhu.hlt.concrete.services.AnnotationTaskType.findByValue(iprot.readI32());
                struct.setTaskTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.searchResultId != null) {
          oprot.writeFieldBegin(SEARCH_RESULT_ID_FIELD_DESC);
          struct.searchResultId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.taskType != null) {
          oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
          oprot.writeI32(struct.taskType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startSession_argsTupleSchemeFactory implements SchemeFactory {
      public startSession_argsTupleScheme getScheme() {
        return new startSession_argsTupleScheme();
      }
    }

    private static class startSession_argsTupleScheme extends TupleScheme<startSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSearchResultId()) {
          optionals.set(0);
        }
        if (struct.isSetTaskType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSearchResultId()) {
          struct.searchResultId.write(oprot);
        }
        if (struct.isSetTaskType()) {
          oprot.writeI32(struct.taskType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.searchResultId = new edu.jhu.hlt.concrete.UUID();
          struct.searchResultId.read(iprot);
          struct.setSearchResultIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.taskType = edu.jhu.hlt.concrete.services.AnnotationTaskType.findByValue(iprot.readI32());
          struct.setTaskTypeIsSet(true);
        }
      }
    }

  }

  public static class startSession_result implements org.apache.thrift.TBase<startSession_result, startSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<startSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startSession_resultTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.UUID success; // required
    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startSession_result.class, metaDataMap);
    }

    public startSession_result() {
    }

    public startSession_result(
      edu.jhu.hlt.concrete.UUID success,
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startSession_result(startSession_result other) {
      if (other.isSetSuccess()) {
        this.success = new edu.jhu.hlt.concrete.UUID(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public startSession_result deepCopy() {
      return new startSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public edu.jhu.hlt.concrete.UUID getSuccess() {
      return this.success;
    }

    public startSession_result setSuccess(edu.jhu.hlt.concrete.UUID success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public startSession_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((edu.jhu.hlt.concrete.UUID)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startSession_result)
        return this.equals((startSession_result)that);
      return false;
    }

    public boolean equals(startSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(startSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startSession_resultStandardSchemeFactory implements SchemeFactory {
      public startSession_resultStandardScheme getScheme() {
        return new startSession_resultStandardScheme();
      }
    }

    private static class startSession_resultStandardScheme extends StandardScheme<startSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new edu.jhu.hlt.concrete.UUID();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startSession_resultTupleSchemeFactory implements SchemeFactory {
      public startSession_resultTupleScheme getScheme() {
        return new startSession_resultTupleScheme();
      }
    }

    private static class startSession_resultTupleScheme extends TupleScheme<startSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new edu.jhu.hlt.concrete.UUID();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class stopSession_args implements org.apache.thrift.TBase<stopSession_args, stopSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<stopSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopSession_argsTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.UUID sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopSession_args.class, metaDataMap);
    }

    public stopSession_args() {
    }

    public stopSession_args(
      edu.jhu.hlt.concrete.UUID sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopSession_args(stopSession_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = new edu.jhu.hlt.concrete.UUID(other.sessionId);
      }
    }

    public stopSession_args deepCopy() {
      return new stopSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
    }

    public edu.jhu.hlt.concrete.UUID getSessionId() {
      return this.sessionId;
    }

    public stopSession_args setSessionId(edu.jhu.hlt.concrete.UUID sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((edu.jhu.hlt.concrete.UUID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopSession_args)
        return this.equals((stopSession_args)that);
      return false;
    }

    public boolean equals(stopSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionId = true && (isSetSessionId());
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      return list.hashCode();
    }

    @Override
    public int compareTo(stopSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopSession_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sessionId != null) {
        sessionId.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopSession_argsStandardSchemeFactory implements SchemeFactory {
      public stopSession_argsStandardScheme getScheme() {
        return new stopSession_argsStandardScheme();
      }
    }

    private static class stopSession_argsStandardScheme extends StandardScheme<stopSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sessionId = new edu.jhu.hlt.concrete.UUID();
                struct.sessionId.read(iprot);
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          struct.sessionId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopSession_argsTupleSchemeFactory implements SchemeFactory {
      public stopSession_argsTupleScheme getScheme() {
        return new stopSession_argsTupleScheme();
      }
    }

    private static class stopSession_argsTupleScheme extends TupleScheme<stopSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          struct.sessionId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = new edu.jhu.hlt.concrete.UUID();
          struct.sessionId.read(iprot);
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class stopSession_result implements org.apache.thrift.TBase<stopSession_result, stopSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<stopSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopSession_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopSession_resultTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopSession_result.class, metaDataMap);
    }

    public stopSession_result() {
    }

    public stopSession_result(
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopSession_result(stopSession_result other) {
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public stopSession_result deepCopy() {
      return new stopSession_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public stopSession_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopSession_result)
        return this.equals((stopSession_result)that);
      return false;
    }

    public boolean equals(stopSession_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(stopSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopSession_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopSession_resultStandardSchemeFactory implements SchemeFactory {
      public stopSession_resultStandardScheme getScheme() {
        return new stopSession_resultStandardScheme();
      }
    }

    private static class stopSession_resultStandardScheme extends StandardScheme<stopSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopSession_resultTupleSchemeFactory implements SchemeFactory {
      public stopSession_resultTupleScheme getScheme() {
        return new stopSession_resultTupleScheme();
      }
    }

    private static class stopSession_resultTupleScheme extends TupleScheme<stopSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getNextChunk_args implements org.apache.thrift.TBase<getNextChunk_args, getNextChunk_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNextChunk_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNextChunk_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNextChunk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNextChunk_argsTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.UUID sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNextChunk_args.class, metaDataMap);
    }

    public getNextChunk_args() {
    }

    public getNextChunk_args(
      edu.jhu.hlt.concrete.UUID sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNextChunk_args(getNextChunk_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = new edu.jhu.hlt.concrete.UUID(other.sessionId);
      }
    }

    public getNextChunk_args deepCopy() {
      return new getNextChunk_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
    }

    public edu.jhu.hlt.concrete.UUID getSessionId() {
      return this.sessionId;
    }

    public getNextChunk_args setSessionId(edu.jhu.hlt.concrete.UUID sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((edu.jhu.hlt.concrete.UUID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNextChunk_args)
        return this.equals((getNextChunk_args)that);
      return false;
    }

    public boolean equals(getNextChunk_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionId = true && (isSetSessionId());
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNextChunk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNextChunk_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sessionId != null) {
        sessionId.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNextChunk_argsStandardSchemeFactory implements SchemeFactory {
      public getNextChunk_argsStandardScheme getScheme() {
        return new getNextChunk_argsStandardScheme();
      }
    }

    private static class getNextChunk_argsStandardScheme extends StandardScheme<getNextChunk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNextChunk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sessionId = new edu.jhu.hlt.concrete.UUID();
                struct.sessionId.read(iprot);
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNextChunk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          struct.sessionId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNextChunk_argsTupleSchemeFactory implements SchemeFactory {
      public getNextChunk_argsTupleScheme getScheme() {
        return new getNextChunk_argsTupleScheme();
      }
    }

    private static class getNextChunk_argsTupleScheme extends TupleScheme<getNextChunk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNextChunk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          struct.sessionId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNextChunk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = new edu.jhu.hlt.concrete.UUID();
          struct.sessionId.read(iprot);
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class getNextChunk_result implements org.apache.thrift.TBase<getNextChunk_result, getNextChunk_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNextChunk_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNextChunk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNextChunk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNextChunk_resultTupleSchemeFactory());
    }

    private List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> success; // required
    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNextChunk_result.class, metaDataMap);
    }

    public getNextChunk_result() {
    }

    public getNextChunk_result(
      List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> success,
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNextChunk_result(getNextChunk_result other) {
      if (other.isSetSuccess()) {
        List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> __this__success = new ArrayList<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>(other.success.size());
        for (edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier other_element : other.success) {
          __this__success.add(new edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public getNextChunk_result deepCopy() {
      return new getNextChunk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier elem) {
      if (this.success == null) {
        this.success = new ArrayList<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>();
      }
      this.success.add(elem);
    }

    public List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> getSuccess() {
      return this.success;
    }

    public getNextChunk_result setSuccess(List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public getNextChunk_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNextChunk_result)
        return this.equals((getNextChunk_result)that);
      return false;
    }

    public boolean equals(getNextChunk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getNextChunk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNextChunk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNextChunk_resultStandardSchemeFactory implements SchemeFactory {
      public getNextChunk_resultStandardScheme getScheme() {
        return new getNextChunk_resultStandardScheme();
      }
    }

    private static class getNextChunk_resultStandardScheme extends StandardScheme<getNextChunk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNextChunk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>(_list16.size);
                  edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNextChunk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNextChunk_resultTupleSchemeFactory implements SchemeFactory {
      public getNextChunk_resultTupleScheme getScheme() {
        return new getNextChunk_resultTupleScheme();
      }
    }

    private static class getNextChunk_resultTupleScheme extends TupleScheme<getNextChunk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNextChunk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNextChunk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier>(_list21.size);
            edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class submitAnnotation_args implements org.apache.thrift.TBase<submitAnnotation_args, submitAnnotation_args._Fields>, java.io.Serializable, Cloneable, Comparable<submitAnnotation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitAnnotation_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unitId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField COMMUNICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("communication", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitAnnotation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitAnnotation_argsTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.UUID sessionId; // required
    private edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier unitId; // required
    private edu.jhu.hlt.concrete.Communication communication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      UNIT_ID((short)2, "unitId"),
      COMMUNICATION((short)3, "communication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // UNIT_ID
            return UNIT_ID;
          case 3: // COMMUNICATION
            return COMMUNICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
      tmpMap.put(_Fields.UNIT_ID, new org.apache.thrift.meta_data.FieldMetaData("unitId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier.class)));
      tmpMap.put(_Fields.COMMUNICATION, new org.apache.thrift.meta_data.FieldMetaData("communication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.Communication.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitAnnotation_args.class, metaDataMap);
    }

    public submitAnnotation_args() {
    }

    public submitAnnotation_args(
      edu.jhu.hlt.concrete.UUID sessionId,
      edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier unitId,
      edu.jhu.hlt.concrete.Communication communication)
    {
      this();
      this.sessionId = sessionId;
      this.unitId = unitId;
      this.communication = communication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitAnnotation_args(submitAnnotation_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = new edu.jhu.hlt.concrete.UUID(other.sessionId);
      }
      if (other.isSetUnitId()) {
        this.unitId = new edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier(other.unitId);
      }
      if (other.isSetCommunication()) {
        this.communication = new edu.jhu.hlt.concrete.Communication(other.communication);
      }
    }

    public submitAnnotation_args deepCopy() {
      return new submitAnnotation_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.unitId = null;
      this.communication = null;
    }

    public edu.jhu.hlt.concrete.UUID getSessionId() {
      return this.sessionId;
    }

    public submitAnnotation_args setSessionId(edu.jhu.hlt.concrete.UUID sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier getUnitId() {
      return this.unitId;
    }

    public submitAnnotation_args setUnitId(edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier unitId) {
      this.unitId = unitId;
      return this;
    }

    public void unsetUnitId() {
      this.unitId = null;
    }

    /** Returns true if field unitId is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitId() {
      return this.unitId != null;
    }

    public void setUnitIdIsSet(boolean value) {
      if (!value) {
        this.unitId = null;
      }
    }

    public edu.jhu.hlt.concrete.Communication getCommunication() {
      return this.communication;
    }

    public submitAnnotation_args setCommunication(edu.jhu.hlt.concrete.Communication communication) {
      this.communication = communication;
      return this;
    }

    public void unsetCommunication() {
      this.communication = null;
    }

    /** Returns true if field communication is set (has been assigned a value) and false otherwise */
    public boolean isSetCommunication() {
      return this.communication != null;
    }

    public void setCommunicationIsSet(boolean value) {
      if (!value) {
        this.communication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((edu.jhu.hlt.concrete.UUID)value);
        }
        break;

      case UNIT_ID:
        if (value == null) {
          unsetUnitId();
        } else {
          setUnitId((edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier)value);
        }
        break;

      case COMMUNICATION:
        if (value == null) {
          unsetCommunication();
        } else {
          setCommunication((edu.jhu.hlt.concrete.Communication)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case UNIT_ID:
        return getUnitId();

      case COMMUNICATION:
        return getCommunication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case UNIT_ID:
        return isSetUnitId();
      case COMMUNICATION:
        return isSetCommunication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitAnnotation_args)
        return this.equals((submitAnnotation_args)that);
      return false;
    }

    public boolean equals(submitAnnotation_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_unitId = true && this.isSetUnitId();
      boolean that_present_unitId = true && that.isSetUnitId();
      if (this_present_unitId || that_present_unitId) {
        if (!(this_present_unitId && that_present_unitId))
          return false;
        if (!this.unitId.equals(that.unitId))
          return false;
      }

      boolean this_present_communication = true && this.isSetCommunication();
      boolean that_present_communication = true && that.isSetCommunication();
      if (this_present_communication || that_present_communication) {
        if (!(this_present_communication && that_present_communication))
          return false;
        if (!this.communication.equals(that.communication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionId = true && (isSetSessionId());
      list.add(present_sessionId);
      if (present_sessionId)
        list.add(sessionId);

      boolean present_unitId = true && (isSetUnitId());
      list.add(present_unitId);
      if (present_unitId)
        list.add(unitId);

      boolean present_communication = true && (isSetCommunication());
      list.add(present_communication);
      if (present_communication)
        list.add(communication);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitAnnotation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnitId()).compareTo(other.isSetUnitId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitId, other.unitId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommunication()).compareTo(other.isSetCommunication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommunication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communication, other.communication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitAnnotation_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unitId:");
      if (this.unitId == null) {
        sb.append("null");
      } else {
        sb.append(this.unitId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("communication:");
      if (this.communication == null) {
        sb.append("null");
      } else {
        sb.append(this.communication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sessionId != null) {
        sessionId.validate();
      }
      if (unitId != null) {
        unitId.validate();
      }
      if (communication != null) {
        communication.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitAnnotation_argsStandardSchemeFactory implements SchemeFactory {
      public submitAnnotation_argsStandardScheme getScheme() {
        return new submitAnnotation_argsStandardScheme();
      }
    }

    private static class submitAnnotation_argsStandardScheme extends StandardScheme<submitAnnotation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitAnnotation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sessionId = new edu.jhu.hlt.concrete.UUID();
                struct.sessionId.read(iprot);
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unitId = new edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier();
                struct.unitId.read(iprot);
                struct.setUnitIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMUNICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.communication = new edu.jhu.hlt.concrete.Communication();
                struct.communication.read(iprot);
                struct.setCommunicationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitAnnotation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          struct.sessionId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unitId != null) {
          oprot.writeFieldBegin(UNIT_ID_FIELD_DESC);
          struct.unitId.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.communication != null) {
          oprot.writeFieldBegin(COMMUNICATION_FIELD_DESC);
          struct.communication.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitAnnotation_argsTupleSchemeFactory implements SchemeFactory {
      public submitAnnotation_argsTupleScheme getScheme() {
        return new submitAnnotation_argsTupleScheme();
      }
    }

    private static class submitAnnotation_argsTupleScheme extends TupleScheme<submitAnnotation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitAnnotation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetUnitId()) {
          optionals.set(1);
        }
        if (struct.isSetCommunication()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSessionId()) {
          struct.sessionId.write(oprot);
        }
        if (struct.isSetUnitId()) {
          struct.unitId.write(oprot);
        }
        if (struct.isSetCommunication()) {
          struct.communication.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitAnnotation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sessionId = new edu.jhu.hlt.concrete.UUID();
          struct.sessionId.read(iprot);
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unitId = new edu.jhu.hlt.concrete.services.AnnotationUnitIdentifier();
          struct.unitId.read(iprot);
          struct.setUnitIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.communication = new edu.jhu.hlt.concrete.Communication();
          struct.communication.read(iprot);
          struct.setCommunicationIsSet(true);
        }
      }
    }

  }

  public static class submitAnnotation_result implements org.apache.thrift.TBase<submitAnnotation_result, submitAnnotation_result._Fields>, java.io.Serializable, Cloneable, Comparable<submitAnnotation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitAnnotation_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitAnnotation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitAnnotation_resultTupleSchemeFactory());
    }

    private edu.jhu.hlt.concrete.services.ServicesException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitAnnotation_result.class, metaDataMap);
    }

    public submitAnnotation_result() {
    }

    public submitAnnotation_result(
      edu.jhu.hlt.concrete.services.ServicesException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitAnnotation_result(submitAnnotation_result other) {
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ServicesException(other.ex);
      }
    }

    public submitAnnotation_result deepCopy() {
      return new submitAnnotation_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public edu.jhu.hlt.concrete.services.ServicesException getEx() {
      return this.ex;
    }

    public submitAnnotation_result setEx(edu.jhu.hlt.concrete.services.ServicesException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ServicesException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitAnnotation_result)
        return this.equals((submitAnnotation_result)that);
      return false;
    }

    public boolean equals(submitAnnotation_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(submitAnnotation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitAnnotation_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitAnnotation_resultStandardSchemeFactory implements SchemeFactory {
      public submitAnnotation_resultStandardScheme getScheme() {
        return new submitAnnotation_resultStandardScheme();
      }
    }

    private static class submitAnnotation_resultStandardScheme extends StandardScheme<submitAnnotation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitAnnotation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitAnnotation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitAnnotation_resultTupleSchemeFactory implements SchemeFactory {
      public submitAnnotation_resultTupleScheme getScheme() {
        return new submitAnnotation_resultTupleScheme();
      }
    }

    private static class submitAnnotation_resultTupleScheme extends TupleScheme<submitAnnotation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitAnnotation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitAnnotation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ServicesException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
