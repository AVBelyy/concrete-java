/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A single communication instance, containing linguistic content
 * generated by a single speaker or author.  This type is used for
 * both inter-personal communications (such as phone calls or
 * conversations) and third-party communications (such as news
 * articles).
 * 
 * Each communication instance is grounded by its original
 * (unannotated) contents, which should be stored in either the
 * "text" field (for text communications) or the "audio" field (for
 * audio communications).  If the communication is not available in
 * its original form, then these fields should store the
 * communication in the least-processed form available.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-10")
public class Communication implements org.apache.thrift.TBase<Communication, Communication._Fields>, java.io.Serializable, Cloneable, Comparable<Communication> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Communication");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField COMMUNICATION_TAGGING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("communicationTaggingList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField KEY_VALUE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("keyValueMap", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField LID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("lidList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField SECTION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionList", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField ENTITY_MENTION_SET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("entityMentionSetList", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField ENTITY_SET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("entitySetList", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField SITUATION_MENTION_SET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("situationMentionSetList", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField SITUATION_SET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("situationSetList", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField ORIGINAL_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("originalText", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField SOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("sound", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField COMMUNICATION_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("communicationMetadata", org.apache.thrift.protocol.TType.STRUCT, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommunicationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommunicationTupleSchemeFactory());
  }

  private String id; // required
  private edu.jhu.hlt.concrete.UUID uuid; // required
  private String type; // required
  private String text; // optional
  private long startTime; // optional
  private long endTime; // optional
  private List<CommunicationTagging> communicationTaggingList; // optional
  private edu.jhu.hlt.concrete.AnnotationMetadata metadata; // required
  private Map<String,String> keyValueMap; // optional
  private List<edu.jhu.hlt.concrete.LanguageIdentification> lidList; // optional
  private List<edu.jhu.hlt.concrete.Section> sectionList; // optional
  private List<edu.jhu.hlt.concrete.EntityMentionSet> entityMentionSetList; // optional
  private List<edu.jhu.hlt.concrete.EntitySet> entitySetList; // optional
  private List<edu.jhu.hlt.concrete.SituationMentionSet> situationMentionSetList; // optional
  private List<edu.jhu.hlt.concrete.SituationSet> situationSetList; // optional
  private String originalText; // optional
  private edu.jhu.hlt.concrete.Sound sound; // optional
  private edu.jhu.hlt.concrete.CommunicationMetadata communicationMetadata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Stable identifier for this communication, identifying both the
     * name of the source corpus and the document that it corresponds to
     * in that corpus.
     */
    ID((short)1, "id"),
    /**
     * Universally unique identifier for this communication instance.
     * This is generated randomly, and can *not* be mapped back to the
     * source corpus. It is used as a target for symbolic "pointers".
     */
    UUID((short)2, "uuid"),
    /**
     * A short, corpus-specific term characterizing the nature of the
     * communication; may change in a future version of concrete.
     * Often used for filtering.  For example, Gigaword uses
     * the type "story" to distinguish typical news articles from
     * weekly summaries ("multi"), editorial advisories ("advis"), etc.
     * At present, this value is typically a literal form from the
     * originating corpus: as a result, a type marked 'other' may have
     * different meanings across different corpora.
     */
    TYPE((short)3, "type"),
    /**
     * The full text contents of this communication in its original
     * form, or in the least-processed form available, if the original
     * is not available.
     */
    TEXT((short)4, "text"),
    /**
     * The time when this communication started (in unix time UTC --
     * i.e., seconds since January 1, 1970).
     */
    START_TIME((short)5, "startTime"),
    /**
     * The time when this communication ended (in unix time UTC --
     * i.e., seconds since January 1, 1970).
     */
    END_TIME((short)6, "endTime"),
    /**
     * A list of CommunicationTagging objects that can support this
     * Communication. CommunicationTagging objects can be used to
     * annotate Communications with topics, gender identification, etc.
     */
    COMMUNICATION_TAGGING_LIST((short)7, "communicationTaggingList"),
    /**
     * metadata.AnnotationMetadata to support this particular communication.
     * 
     * Communications derived from other communications should
     * indicate in this metadata object their dependency
     * to the original communication ID.
     */
    METADATA((short)8, "metadata"),
    /**
     * A catch-all store of keys and values. Use sparingly!
     */
    KEY_VALUE_MAP((short)9, "keyValueMap"),
    /**
     * Theories about the languages that are present in this
     * communication.
     */
    LID_LIST((short)10, "lidList"),
    /**
     * Theory about the block structure of this communication.
     */
    SECTION_LIST((short)11, "sectionList"),
    /**
     * Theories about which spans of text are used to mention entities
     * in this communication.
     */
    ENTITY_MENTION_SET_LIST((short)12, "entityMentionSetList"),
    /**
     * Theories about what entities are discussed in this
     * communication, with pointers to individual mentions.
     */
    ENTITY_SET_LIST((short)13, "entitySetList"),
    /**
     * Theories about what situations are explicitly mentioned in this
     * communication.
     */
    SITUATION_MENTION_SET_LIST((short)14, "situationMentionSetList"),
    /**
     * Theories about what situations are asserted in this
     * communication.
     */
    SITUATION_SET_LIST((short)15, "situationSetList"),
    /**
     * Optional original text field that points back to an original
     * communication.
     * 
     * This field can be populated for sake of convenience when creating
     * "perspective" communication (communications that are based on
     * highly destructive changes to an original communication [e.g.,
     * via MT]). This allows developers to quickly access the original
     * text that this perspective communication is based off of.
     */
    ORIGINAL_TEXT((short)16, "originalText"),
    /**
     * The full audio contents of this communication in its original
     * form, or in the least-processed form available, if the original
     * is not available.
     */
    SOUND((short)20, "sound"),
    /**
     * Metadata about this specific Communication, such as information
     * about its author, information specific to this Communication
     * or Communications like it (info from an API, for example), etc.
     */
    COMMUNICATION_METADATA((short)21, "communicationMetadata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // UUID
          return UUID;
        case 3: // TYPE
          return TYPE;
        case 4: // TEXT
          return TEXT;
        case 5: // START_TIME
          return START_TIME;
        case 6: // END_TIME
          return END_TIME;
        case 7: // COMMUNICATION_TAGGING_LIST
          return COMMUNICATION_TAGGING_LIST;
        case 8: // METADATA
          return METADATA;
        case 9: // KEY_VALUE_MAP
          return KEY_VALUE_MAP;
        case 10: // LID_LIST
          return LID_LIST;
        case 11: // SECTION_LIST
          return SECTION_LIST;
        case 12: // ENTITY_MENTION_SET_LIST
          return ENTITY_MENTION_SET_LIST;
        case 13: // ENTITY_SET_LIST
          return ENTITY_SET_LIST;
        case 14: // SITUATION_MENTION_SET_LIST
          return SITUATION_MENTION_SET_LIST;
        case 15: // SITUATION_SET_LIST
          return SITUATION_SET_LIST;
        case 16: // ORIGINAL_TEXT
          return ORIGINAL_TEXT;
        case 20: // SOUND
          return SOUND;
        case 21: // COMMUNICATION_METADATA
          return COMMUNICATION_METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TEXT,_Fields.START_TIME,_Fields.END_TIME,_Fields.COMMUNICATION_TAGGING_LIST,_Fields.KEY_VALUE_MAP,_Fields.LID_LIST,_Fields.SECTION_LIST,_Fields.ENTITY_MENTION_SET_LIST,_Fields.ENTITY_SET_LIST,_Fields.SITUATION_MENTION_SET_LIST,_Fields.SITUATION_SET_LIST,_Fields.ORIGINAL_TEXT,_Fields.SOUND,_Fields.COMMUNICATION_METADATA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMUNICATION_TAGGING_LIST, new org.apache.thrift.meta_data.FieldMetaData("communicationTaggingList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommunicationTagging.class))));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.AnnotationMetadata.class)));
    tmpMap.put(_Fields.KEY_VALUE_MAP, new org.apache.thrift.meta_data.FieldMetaData("keyValueMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LID_LIST, new org.apache.thrift.meta_data.FieldMetaData("lidList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.LanguageIdentification.class))));
    tmpMap.put(_Fields.SECTION_LIST, new org.apache.thrift.meta_data.FieldMetaData("sectionList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.Section.class))));
    tmpMap.put(_Fields.ENTITY_MENTION_SET_LIST, new org.apache.thrift.meta_data.FieldMetaData("entityMentionSetList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.EntityMentionSet.class))));
    tmpMap.put(_Fields.ENTITY_SET_LIST, new org.apache.thrift.meta_data.FieldMetaData("entitySetList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.EntitySet.class))));
    tmpMap.put(_Fields.SITUATION_MENTION_SET_LIST, new org.apache.thrift.meta_data.FieldMetaData("situationMentionSetList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.SituationMentionSet.class))));
    tmpMap.put(_Fields.SITUATION_SET_LIST, new org.apache.thrift.meta_data.FieldMetaData("situationSetList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.SituationSet.class))));
    tmpMap.put(_Fields.ORIGINAL_TEXT, new org.apache.thrift.meta_data.FieldMetaData("originalText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOUND, new org.apache.thrift.meta_data.FieldMetaData("sound", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.Sound.class)));
    tmpMap.put(_Fields.COMMUNICATION_METADATA, new org.apache.thrift.meta_data.FieldMetaData("communicationMetadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.CommunicationMetadata.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Communication.class, metaDataMap);
  }

  public Communication() {
  }

  public Communication(
    String id,
    edu.jhu.hlt.concrete.UUID uuid,
    String type,
    edu.jhu.hlt.concrete.AnnotationMetadata metadata)
  {
    this();
    this.id = id;
    this.uuid = uuid;
    this.type = type;
    this.metadata = metadata;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Communication(Communication other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetUuid()) {
      this.uuid = new edu.jhu.hlt.concrete.UUID(other.uuid);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    if (other.isSetCommunicationTaggingList()) {
      List<CommunicationTagging> __this__communicationTaggingList = new ArrayList<CommunicationTagging>(other.communicationTaggingList.size());
      for (CommunicationTagging other_element : other.communicationTaggingList) {
        __this__communicationTaggingList.add(new CommunicationTagging(other_element));
      }
      this.communicationTaggingList = __this__communicationTaggingList;
    }
    if (other.isSetMetadata()) {
      this.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata(other.metadata);
    }
    if (other.isSetKeyValueMap()) {
      Map<String,String> __this__keyValueMap = new HashMap<String,String>(other.keyValueMap);
      this.keyValueMap = __this__keyValueMap;
    }
    if (other.isSetLidList()) {
      List<edu.jhu.hlt.concrete.LanguageIdentification> __this__lidList = new ArrayList<edu.jhu.hlt.concrete.LanguageIdentification>(other.lidList.size());
      for (edu.jhu.hlt.concrete.LanguageIdentification other_element : other.lidList) {
        __this__lidList.add(new edu.jhu.hlt.concrete.LanguageIdentification(other_element));
      }
      this.lidList = __this__lidList;
    }
    if (other.isSetSectionList()) {
      List<edu.jhu.hlt.concrete.Section> __this__sectionList = new ArrayList<edu.jhu.hlt.concrete.Section>(other.sectionList.size());
      for (edu.jhu.hlt.concrete.Section other_element : other.sectionList) {
        __this__sectionList.add(new edu.jhu.hlt.concrete.Section(other_element));
      }
      this.sectionList = __this__sectionList;
    }
    if (other.isSetEntityMentionSetList()) {
      List<edu.jhu.hlt.concrete.EntityMentionSet> __this__entityMentionSetList = new ArrayList<edu.jhu.hlt.concrete.EntityMentionSet>(other.entityMentionSetList.size());
      for (edu.jhu.hlt.concrete.EntityMentionSet other_element : other.entityMentionSetList) {
        __this__entityMentionSetList.add(new edu.jhu.hlt.concrete.EntityMentionSet(other_element));
      }
      this.entityMentionSetList = __this__entityMentionSetList;
    }
    if (other.isSetEntitySetList()) {
      List<edu.jhu.hlt.concrete.EntitySet> __this__entitySetList = new ArrayList<edu.jhu.hlt.concrete.EntitySet>(other.entitySetList.size());
      for (edu.jhu.hlt.concrete.EntitySet other_element : other.entitySetList) {
        __this__entitySetList.add(new edu.jhu.hlt.concrete.EntitySet(other_element));
      }
      this.entitySetList = __this__entitySetList;
    }
    if (other.isSetSituationMentionSetList()) {
      List<edu.jhu.hlt.concrete.SituationMentionSet> __this__situationMentionSetList = new ArrayList<edu.jhu.hlt.concrete.SituationMentionSet>(other.situationMentionSetList.size());
      for (edu.jhu.hlt.concrete.SituationMentionSet other_element : other.situationMentionSetList) {
        __this__situationMentionSetList.add(new edu.jhu.hlt.concrete.SituationMentionSet(other_element));
      }
      this.situationMentionSetList = __this__situationMentionSetList;
    }
    if (other.isSetSituationSetList()) {
      List<edu.jhu.hlt.concrete.SituationSet> __this__situationSetList = new ArrayList<edu.jhu.hlt.concrete.SituationSet>(other.situationSetList.size());
      for (edu.jhu.hlt.concrete.SituationSet other_element : other.situationSetList) {
        __this__situationSetList.add(new edu.jhu.hlt.concrete.SituationSet(other_element));
      }
      this.situationSetList = __this__situationSetList;
    }
    if (other.isSetOriginalText()) {
      this.originalText = other.originalText;
    }
    if (other.isSetSound()) {
      this.sound = new edu.jhu.hlt.concrete.Sound(other.sound);
    }
    if (other.isSetCommunicationMetadata()) {
      this.communicationMetadata = new edu.jhu.hlt.concrete.CommunicationMetadata(other.communicationMetadata);
    }
  }

  public Communication deepCopy() {
    return new Communication(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.uuid = null;
    this.type = null;
    this.text = null;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.communicationTaggingList = null;
    this.metadata = null;
    this.keyValueMap = null;
    this.lidList = null;
    this.sectionList = null;
    this.entityMentionSetList = null;
    this.entitySetList = null;
    this.situationMentionSetList = null;
    this.situationSetList = null;
    this.originalText = null;
    this.sound = null;
    this.communicationMetadata = null;
  }

  /**
   * Stable identifier for this communication, identifying both the
   * name of the source corpus and the document that it corresponds to
   * in that corpus.
   */
  public String getId() {
    return this.id;
  }

  /**
   * Stable identifier for this communication, identifying both the
   * name of the source corpus and the document that it corresponds to
   * in that corpus.
   */
  public Communication setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * Universally unique identifier for this communication instance.
   * This is generated randomly, and can *not* be mapped back to the
   * source corpus. It is used as a target for symbolic "pointers".
   */
  public edu.jhu.hlt.concrete.UUID getUuid() {
    return this.uuid;
  }

  /**
   * Universally unique identifier for this communication instance.
   * This is generated randomly, and can *not* be mapped back to the
   * source corpus. It is used as a target for symbolic "pointers".
   */
  public Communication setUuid(edu.jhu.hlt.concrete.UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  /**
   * A short, corpus-specific term characterizing the nature of the
   * communication; may change in a future version of concrete.
   * Often used for filtering.  For example, Gigaword uses
   * the type "story" to distinguish typical news articles from
   * weekly summaries ("multi"), editorial advisories ("advis"), etc.
   * At present, this value is typically a literal form from the
   * originating corpus: as a result, a type marked 'other' may have
   * different meanings across different corpora.
   */
  public String getType() {
    return this.type;
  }

  /**
   * A short, corpus-specific term characterizing the nature of the
   * communication; may change in a future version of concrete.
   * Often used for filtering.  For example, Gigaword uses
   * the type "story" to distinguish typical news articles from
   * weekly summaries ("multi"), editorial advisories ("advis"), etc.
   * At present, this value is typically a literal form from the
   * originating corpus: as a result, a type marked 'other' may have
   * different meanings across different corpora.
   */
  public Communication setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * The full text contents of this communication in its original
   * form, or in the least-processed form available, if the original
   * is not available.
   */
  public String getText() {
    return this.text;
  }

  /**
   * The full text contents of this communication in its original
   * form, or in the least-processed form available, if the original
   * is not available.
   */
  public Communication setText(String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  /**
   * The time when this communication started (in unix time UTC --
   * i.e., seconds since January 1, 1970).
   */
  public long getStartTime() {
    return this.startTime;
  }

  /**
   * The time when this communication started (in unix time UTC --
   * i.e., seconds since January 1, 1970).
   */
  public Communication setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  /**
   * The time when this communication ended (in unix time UTC --
   * i.e., seconds since January 1, 1970).
   */
  public long getEndTime() {
    return this.endTime;
  }

  /**
   * The time when this communication ended (in unix time UTC --
   * i.e., seconds since January 1, 1970).
   */
  public Communication setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public int getCommunicationTaggingListSize() {
    return (this.communicationTaggingList == null) ? 0 : this.communicationTaggingList.size();
  }

  public java.util.Iterator<CommunicationTagging> getCommunicationTaggingListIterator() {
    return (this.communicationTaggingList == null) ? null : this.communicationTaggingList.iterator();
  }

  public void addToCommunicationTaggingList(CommunicationTagging elem) {
    if (this.communicationTaggingList == null) {
      this.communicationTaggingList = new ArrayList<CommunicationTagging>();
    }
    this.communicationTaggingList.add(elem);
  }

  /**
   * A list of CommunicationTagging objects that can support this
   * Communication. CommunicationTagging objects can be used to
   * annotate Communications with topics, gender identification, etc.
   */
  public List<CommunicationTagging> getCommunicationTaggingList() {
    return this.communicationTaggingList;
  }

  /**
   * A list of CommunicationTagging objects that can support this
   * Communication. CommunicationTagging objects can be used to
   * annotate Communications with topics, gender identification, etc.
   */
  public Communication setCommunicationTaggingList(List<CommunicationTagging> communicationTaggingList) {
    this.communicationTaggingList = communicationTaggingList;
    return this;
  }

  public void unsetCommunicationTaggingList() {
    this.communicationTaggingList = null;
  }

  /** Returns true if field communicationTaggingList is set (has been assigned a value) and false otherwise */
  public boolean isSetCommunicationTaggingList() {
    return this.communicationTaggingList != null;
  }

  public void setCommunicationTaggingListIsSet(boolean value) {
    if (!value) {
      this.communicationTaggingList = null;
    }
  }

  /**
   * metadata.AnnotationMetadata to support this particular communication.
   * 
   * Communications derived from other communications should
   * indicate in this metadata object their dependency
   * to the original communication ID.
   */
  public edu.jhu.hlt.concrete.AnnotationMetadata getMetadata() {
    return this.metadata;
  }

  /**
   * metadata.AnnotationMetadata to support this particular communication.
   * 
   * Communications derived from other communications should
   * indicate in this metadata object their dependency
   * to the original communication ID.
   */
  public Communication setMetadata(edu.jhu.hlt.concrete.AnnotationMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public int getKeyValueMapSize() {
    return (this.keyValueMap == null) ? 0 : this.keyValueMap.size();
  }

  public void putToKeyValueMap(String key, String val) {
    if (this.keyValueMap == null) {
      this.keyValueMap = new HashMap<String,String>();
    }
    this.keyValueMap.put(key, val);
  }

  /**
   * A catch-all store of keys and values. Use sparingly!
   */
  public Map<String,String> getKeyValueMap() {
    return this.keyValueMap;
  }

  /**
   * A catch-all store of keys and values. Use sparingly!
   */
  public Communication setKeyValueMap(Map<String,String> keyValueMap) {
    this.keyValueMap = keyValueMap;
    return this;
  }

  public void unsetKeyValueMap() {
    this.keyValueMap = null;
  }

  /** Returns true if field keyValueMap is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyValueMap() {
    return this.keyValueMap != null;
  }

  public void setKeyValueMapIsSet(boolean value) {
    if (!value) {
      this.keyValueMap = null;
    }
  }

  public int getLidListSize() {
    return (this.lidList == null) ? 0 : this.lidList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.LanguageIdentification> getLidListIterator() {
    return (this.lidList == null) ? null : this.lidList.iterator();
  }

  public void addToLidList(edu.jhu.hlt.concrete.LanguageIdentification elem) {
    if (this.lidList == null) {
      this.lidList = new ArrayList<edu.jhu.hlt.concrete.LanguageIdentification>();
    }
    this.lidList.add(elem);
  }

  /**
   * Theories about the languages that are present in this
   * communication.
   */
  public List<edu.jhu.hlt.concrete.LanguageIdentification> getLidList() {
    return this.lidList;
  }

  /**
   * Theories about the languages that are present in this
   * communication.
   */
  public Communication setLidList(List<edu.jhu.hlt.concrete.LanguageIdentification> lidList) {
    this.lidList = lidList;
    return this;
  }

  public void unsetLidList() {
    this.lidList = null;
  }

  /** Returns true if field lidList is set (has been assigned a value) and false otherwise */
  public boolean isSetLidList() {
    return this.lidList != null;
  }

  public void setLidListIsSet(boolean value) {
    if (!value) {
      this.lidList = null;
    }
  }

  public int getSectionListSize() {
    return (this.sectionList == null) ? 0 : this.sectionList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.Section> getSectionListIterator() {
    return (this.sectionList == null) ? null : this.sectionList.iterator();
  }

  public void addToSectionList(edu.jhu.hlt.concrete.Section elem) {
    if (this.sectionList == null) {
      this.sectionList = new ArrayList<edu.jhu.hlt.concrete.Section>();
    }
    this.sectionList.add(elem);
  }

  /**
   * Theory about the block structure of this communication.
   */
  public List<edu.jhu.hlt.concrete.Section> getSectionList() {
    return this.sectionList;
  }

  /**
   * Theory about the block structure of this communication.
   */
  public Communication setSectionList(List<edu.jhu.hlt.concrete.Section> sectionList) {
    this.sectionList = sectionList;
    return this;
  }

  public void unsetSectionList() {
    this.sectionList = null;
  }

  /** Returns true if field sectionList is set (has been assigned a value) and false otherwise */
  public boolean isSetSectionList() {
    return this.sectionList != null;
  }

  public void setSectionListIsSet(boolean value) {
    if (!value) {
      this.sectionList = null;
    }
  }

  public int getEntityMentionSetListSize() {
    return (this.entityMentionSetList == null) ? 0 : this.entityMentionSetList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.EntityMentionSet> getEntityMentionSetListIterator() {
    return (this.entityMentionSetList == null) ? null : this.entityMentionSetList.iterator();
  }

  public void addToEntityMentionSetList(edu.jhu.hlt.concrete.EntityMentionSet elem) {
    if (this.entityMentionSetList == null) {
      this.entityMentionSetList = new ArrayList<edu.jhu.hlt.concrete.EntityMentionSet>();
    }
    this.entityMentionSetList.add(elem);
  }

  /**
   * Theories about which spans of text are used to mention entities
   * in this communication.
   */
  public List<edu.jhu.hlt.concrete.EntityMentionSet> getEntityMentionSetList() {
    return this.entityMentionSetList;
  }

  /**
   * Theories about which spans of text are used to mention entities
   * in this communication.
   */
  public Communication setEntityMentionSetList(List<edu.jhu.hlt.concrete.EntityMentionSet> entityMentionSetList) {
    this.entityMentionSetList = entityMentionSetList;
    return this;
  }

  public void unsetEntityMentionSetList() {
    this.entityMentionSetList = null;
  }

  /** Returns true if field entityMentionSetList is set (has been assigned a value) and false otherwise */
  public boolean isSetEntityMentionSetList() {
    return this.entityMentionSetList != null;
  }

  public void setEntityMentionSetListIsSet(boolean value) {
    if (!value) {
      this.entityMentionSetList = null;
    }
  }

  public int getEntitySetListSize() {
    return (this.entitySetList == null) ? 0 : this.entitySetList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.EntitySet> getEntitySetListIterator() {
    return (this.entitySetList == null) ? null : this.entitySetList.iterator();
  }

  public void addToEntitySetList(edu.jhu.hlt.concrete.EntitySet elem) {
    if (this.entitySetList == null) {
      this.entitySetList = new ArrayList<edu.jhu.hlt.concrete.EntitySet>();
    }
    this.entitySetList.add(elem);
  }

  /**
   * Theories about what entities are discussed in this
   * communication, with pointers to individual mentions.
   */
  public List<edu.jhu.hlt.concrete.EntitySet> getEntitySetList() {
    return this.entitySetList;
  }

  /**
   * Theories about what entities are discussed in this
   * communication, with pointers to individual mentions.
   */
  public Communication setEntitySetList(List<edu.jhu.hlt.concrete.EntitySet> entitySetList) {
    this.entitySetList = entitySetList;
    return this;
  }

  public void unsetEntitySetList() {
    this.entitySetList = null;
  }

  /** Returns true if field entitySetList is set (has been assigned a value) and false otherwise */
  public boolean isSetEntitySetList() {
    return this.entitySetList != null;
  }

  public void setEntitySetListIsSet(boolean value) {
    if (!value) {
      this.entitySetList = null;
    }
  }

  public int getSituationMentionSetListSize() {
    return (this.situationMentionSetList == null) ? 0 : this.situationMentionSetList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.SituationMentionSet> getSituationMentionSetListIterator() {
    return (this.situationMentionSetList == null) ? null : this.situationMentionSetList.iterator();
  }

  public void addToSituationMentionSetList(edu.jhu.hlt.concrete.SituationMentionSet elem) {
    if (this.situationMentionSetList == null) {
      this.situationMentionSetList = new ArrayList<edu.jhu.hlt.concrete.SituationMentionSet>();
    }
    this.situationMentionSetList.add(elem);
  }

  /**
   * Theories about what situations are explicitly mentioned in this
   * communication.
   */
  public List<edu.jhu.hlt.concrete.SituationMentionSet> getSituationMentionSetList() {
    return this.situationMentionSetList;
  }

  /**
   * Theories about what situations are explicitly mentioned in this
   * communication.
   */
  public Communication setSituationMentionSetList(List<edu.jhu.hlt.concrete.SituationMentionSet> situationMentionSetList) {
    this.situationMentionSetList = situationMentionSetList;
    return this;
  }

  public void unsetSituationMentionSetList() {
    this.situationMentionSetList = null;
  }

  /** Returns true if field situationMentionSetList is set (has been assigned a value) and false otherwise */
  public boolean isSetSituationMentionSetList() {
    return this.situationMentionSetList != null;
  }

  public void setSituationMentionSetListIsSet(boolean value) {
    if (!value) {
      this.situationMentionSetList = null;
    }
  }

  public int getSituationSetListSize() {
    return (this.situationSetList == null) ? 0 : this.situationSetList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.SituationSet> getSituationSetListIterator() {
    return (this.situationSetList == null) ? null : this.situationSetList.iterator();
  }

  public void addToSituationSetList(edu.jhu.hlt.concrete.SituationSet elem) {
    if (this.situationSetList == null) {
      this.situationSetList = new ArrayList<edu.jhu.hlt.concrete.SituationSet>();
    }
    this.situationSetList.add(elem);
  }

  /**
   * Theories about what situations are asserted in this
   * communication.
   */
  public List<edu.jhu.hlt.concrete.SituationSet> getSituationSetList() {
    return this.situationSetList;
  }

  /**
   * Theories about what situations are asserted in this
   * communication.
   */
  public Communication setSituationSetList(List<edu.jhu.hlt.concrete.SituationSet> situationSetList) {
    this.situationSetList = situationSetList;
    return this;
  }

  public void unsetSituationSetList() {
    this.situationSetList = null;
  }

  /** Returns true if field situationSetList is set (has been assigned a value) and false otherwise */
  public boolean isSetSituationSetList() {
    return this.situationSetList != null;
  }

  public void setSituationSetListIsSet(boolean value) {
    if (!value) {
      this.situationSetList = null;
    }
  }

  /**
   * Optional original text field that points back to an original
   * communication.
   * 
   * This field can be populated for sake of convenience when creating
   * "perspective" communication (communications that are based on
   * highly destructive changes to an original communication [e.g.,
   * via MT]). This allows developers to quickly access the original
   * text that this perspective communication is based off of.
   */
  public String getOriginalText() {
    return this.originalText;
  }

  /**
   * Optional original text field that points back to an original
   * communication.
   * 
   * This field can be populated for sake of convenience when creating
   * "perspective" communication (communications that are based on
   * highly destructive changes to an original communication [e.g.,
   * via MT]). This allows developers to quickly access the original
   * text that this perspective communication is based off of.
   */
  public Communication setOriginalText(String originalText) {
    this.originalText = originalText;
    return this;
  }

  public void unsetOriginalText() {
    this.originalText = null;
  }

  /** Returns true if field originalText is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalText() {
    return this.originalText != null;
  }

  public void setOriginalTextIsSet(boolean value) {
    if (!value) {
      this.originalText = null;
    }
  }

  /**
   * The full audio contents of this communication in its original
   * form, or in the least-processed form available, if the original
   * is not available.
   */
  public edu.jhu.hlt.concrete.Sound getSound() {
    return this.sound;
  }

  /**
   * The full audio contents of this communication in its original
   * form, or in the least-processed form available, if the original
   * is not available.
   */
  public Communication setSound(edu.jhu.hlt.concrete.Sound sound) {
    this.sound = sound;
    return this;
  }

  public void unsetSound() {
    this.sound = null;
  }

  /** Returns true if field sound is set (has been assigned a value) and false otherwise */
  public boolean isSetSound() {
    return this.sound != null;
  }

  public void setSoundIsSet(boolean value) {
    if (!value) {
      this.sound = null;
    }
  }

  /**
   * Metadata about this specific Communication, such as information
   * about its author, information specific to this Communication
   * or Communications like it (info from an API, for example), etc.
   */
  public edu.jhu.hlt.concrete.CommunicationMetadata getCommunicationMetadata() {
    return this.communicationMetadata;
  }

  /**
   * Metadata about this specific Communication, such as information
   * about its author, information specific to this Communication
   * or Communications like it (info from an API, for example), etc.
   */
  public Communication setCommunicationMetadata(edu.jhu.hlt.concrete.CommunicationMetadata communicationMetadata) {
    this.communicationMetadata = communicationMetadata;
    return this;
  }

  public void unsetCommunicationMetadata() {
    this.communicationMetadata = null;
  }

  /** Returns true if field communicationMetadata is set (has been assigned a value) and false otherwise */
  public boolean isSetCommunicationMetadata() {
    return this.communicationMetadata != null;
  }

  public void setCommunicationMetadataIsSet(boolean value) {
    if (!value) {
      this.communicationMetadata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((String)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case COMMUNICATION_TAGGING_LIST:
      if (value == null) {
        unsetCommunicationTaggingList();
      } else {
        setCommunicationTaggingList((List<CommunicationTagging>)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((edu.jhu.hlt.concrete.AnnotationMetadata)value);
      }
      break;

    case KEY_VALUE_MAP:
      if (value == null) {
        unsetKeyValueMap();
      } else {
        setKeyValueMap((Map<String,String>)value);
      }
      break;

    case LID_LIST:
      if (value == null) {
        unsetLidList();
      } else {
        setLidList((List<edu.jhu.hlt.concrete.LanguageIdentification>)value);
      }
      break;

    case SECTION_LIST:
      if (value == null) {
        unsetSectionList();
      } else {
        setSectionList((List<edu.jhu.hlt.concrete.Section>)value);
      }
      break;

    case ENTITY_MENTION_SET_LIST:
      if (value == null) {
        unsetEntityMentionSetList();
      } else {
        setEntityMentionSetList((List<edu.jhu.hlt.concrete.EntityMentionSet>)value);
      }
      break;

    case ENTITY_SET_LIST:
      if (value == null) {
        unsetEntitySetList();
      } else {
        setEntitySetList((List<edu.jhu.hlt.concrete.EntitySet>)value);
      }
      break;

    case SITUATION_MENTION_SET_LIST:
      if (value == null) {
        unsetSituationMentionSetList();
      } else {
        setSituationMentionSetList((List<edu.jhu.hlt.concrete.SituationMentionSet>)value);
      }
      break;

    case SITUATION_SET_LIST:
      if (value == null) {
        unsetSituationSetList();
      } else {
        setSituationSetList((List<edu.jhu.hlt.concrete.SituationSet>)value);
      }
      break;

    case ORIGINAL_TEXT:
      if (value == null) {
        unsetOriginalText();
      } else {
        setOriginalText((String)value);
      }
      break;

    case SOUND:
      if (value == null) {
        unsetSound();
      } else {
        setSound((edu.jhu.hlt.concrete.Sound)value);
      }
      break;

    case COMMUNICATION_METADATA:
      if (value == null) {
        unsetCommunicationMetadata();
      } else {
        setCommunicationMetadata((edu.jhu.hlt.concrete.CommunicationMetadata)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case UUID:
      return getUuid();

    case TYPE:
      return getType();

    case TEXT:
      return getText();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case COMMUNICATION_TAGGING_LIST:
      return getCommunicationTaggingList();

    case METADATA:
      return getMetadata();

    case KEY_VALUE_MAP:
      return getKeyValueMap();

    case LID_LIST:
      return getLidList();

    case SECTION_LIST:
      return getSectionList();

    case ENTITY_MENTION_SET_LIST:
      return getEntityMentionSetList();

    case ENTITY_SET_LIST:
      return getEntitySetList();

    case SITUATION_MENTION_SET_LIST:
      return getSituationMentionSetList();

    case SITUATION_SET_LIST:
      return getSituationSetList();

    case ORIGINAL_TEXT:
      return getOriginalText();

    case SOUND:
      return getSound();

    case COMMUNICATION_METADATA:
      return getCommunicationMetadata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case UUID:
      return isSetUuid();
    case TYPE:
      return isSetType();
    case TEXT:
      return isSetText();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case COMMUNICATION_TAGGING_LIST:
      return isSetCommunicationTaggingList();
    case METADATA:
      return isSetMetadata();
    case KEY_VALUE_MAP:
      return isSetKeyValueMap();
    case LID_LIST:
      return isSetLidList();
    case SECTION_LIST:
      return isSetSectionList();
    case ENTITY_MENTION_SET_LIST:
      return isSetEntityMentionSetList();
    case ENTITY_SET_LIST:
      return isSetEntitySetList();
    case SITUATION_MENTION_SET_LIST:
      return isSetSituationMentionSetList();
    case SITUATION_SET_LIST:
      return isSetSituationSetList();
    case ORIGINAL_TEXT:
      return isSetOriginalText();
    case SOUND:
      return isSetSound();
    case COMMUNICATION_METADATA:
      return isSetCommunicationMetadata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Communication)
      return this.equals((Communication)that);
    return false;
  }

  public boolean equals(Communication that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_communicationTaggingList = true && this.isSetCommunicationTaggingList();
    boolean that_present_communicationTaggingList = true && that.isSetCommunicationTaggingList();
    if (this_present_communicationTaggingList || that_present_communicationTaggingList) {
      if (!(this_present_communicationTaggingList && that_present_communicationTaggingList))
        return false;
      if (!this.communicationTaggingList.equals(that.communicationTaggingList))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_keyValueMap = true && this.isSetKeyValueMap();
    boolean that_present_keyValueMap = true && that.isSetKeyValueMap();
    if (this_present_keyValueMap || that_present_keyValueMap) {
      if (!(this_present_keyValueMap && that_present_keyValueMap))
        return false;
      if (!this.keyValueMap.equals(that.keyValueMap))
        return false;
    }

    boolean this_present_lidList = true && this.isSetLidList();
    boolean that_present_lidList = true && that.isSetLidList();
    if (this_present_lidList || that_present_lidList) {
      if (!(this_present_lidList && that_present_lidList))
        return false;
      if (!this.lidList.equals(that.lidList))
        return false;
    }

    boolean this_present_sectionList = true && this.isSetSectionList();
    boolean that_present_sectionList = true && that.isSetSectionList();
    if (this_present_sectionList || that_present_sectionList) {
      if (!(this_present_sectionList && that_present_sectionList))
        return false;
      if (!this.sectionList.equals(that.sectionList))
        return false;
    }

    boolean this_present_entityMentionSetList = true && this.isSetEntityMentionSetList();
    boolean that_present_entityMentionSetList = true && that.isSetEntityMentionSetList();
    if (this_present_entityMentionSetList || that_present_entityMentionSetList) {
      if (!(this_present_entityMentionSetList && that_present_entityMentionSetList))
        return false;
      if (!this.entityMentionSetList.equals(that.entityMentionSetList))
        return false;
    }

    boolean this_present_entitySetList = true && this.isSetEntitySetList();
    boolean that_present_entitySetList = true && that.isSetEntitySetList();
    if (this_present_entitySetList || that_present_entitySetList) {
      if (!(this_present_entitySetList && that_present_entitySetList))
        return false;
      if (!this.entitySetList.equals(that.entitySetList))
        return false;
    }

    boolean this_present_situationMentionSetList = true && this.isSetSituationMentionSetList();
    boolean that_present_situationMentionSetList = true && that.isSetSituationMentionSetList();
    if (this_present_situationMentionSetList || that_present_situationMentionSetList) {
      if (!(this_present_situationMentionSetList && that_present_situationMentionSetList))
        return false;
      if (!this.situationMentionSetList.equals(that.situationMentionSetList))
        return false;
    }

    boolean this_present_situationSetList = true && this.isSetSituationSetList();
    boolean that_present_situationSetList = true && that.isSetSituationSetList();
    if (this_present_situationSetList || that_present_situationSetList) {
      if (!(this_present_situationSetList && that_present_situationSetList))
        return false;
      if (!this.situationSetList.equals(that.situationSetList))
        return false;
    }

    boolean this_present_originalText = true && this.isSetOriginalText();
    boolean that_present_originalText = true && that.isSetOriginalText();
    if (this_present_originalText || that_present_originalText) {
      if (!(this_present_originalText && that_present_originalText))
        return false;
      if (!this.originalText.equals(that.originalText))
        return false;
    }

    boolean this_present_sound = true && this.isSetSound();
    boolean that_present_sound = true && that.isSetSound();
    if (this_present_sound || that_present_sound) {
      if (!(this_present_sound && that_present_sound))
        return false;
      if (!this.sound.equals(that.sound))
        return false;
    }

    boolean this_present_communicationMetadata = true && this.isSetCommunicationMetadata();
    boolean that_present_communicationMetadata = true && that.isSetCommunicationMetadata();
    if (this_present_communicationMetadata || that_present_communicationMetadata) {
      if (!(this_present_communicationMetadata && that_present_communicationMetadata))
        return false;
      if (!this.communicationMetadata.equals(that.communicationMetadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_uuid = true && (isSetUuid());
    list.add(present_uuid);
    if (present_uuid)
      list.add(uuid);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_text = true && (isSetText());
    list.add(present_text);
    if (present_text)
      list.add(text);

    boolean present_startTime = true && (isSetStartTime());
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true && (isSetEndTime());
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_communicationTaggingList = true && (isSetCommunicationTaggingList());
    list.add(present_communicationTaggingList);
    if (present_communicationTaggingList)
      list.add(communicationTaggingList);

    boolean present_metadata = true && (isSetMetadata());
    list.add(present_metadata);
    if (present_metadata)
      list.add(metadata);

    boolean present_keyValueMap = true && (isSetKeyValueMap());
    list.add(present_keyValueMap);
    if (present_keyValueMap)
      list.add(keyValueMap);

    boolean present_lidList = true && (isSetLidList());
    list.add(present_lidList);
    if (present_lidList)
      list.add(lidList);

    boolean present_sectionList = true && (isSetSectionList());
    list.add(present_sectionList);
    if (present_sectionList)
      list.add(sectionList);

    boolean present_entityMentionSetList = true && (isSetEntityMentionSetList());
    list.add(present_entityMentionSetList);
    if (present_entityMentionSetList)
      list.add(entityMentionSetList);

    boolean present_entitySetList = true && (isSetEntitySetList());
    list.add(present_entitySetList);
    if (present_entitySetList)
      list.add(entitySetList);

    boolean present_situationMentionSetList = true && (isSetSituationMentionSetList());
    list.add(present_situationMentionSetList);
    if (present_situationMentionSetList)
      list.add(situationMentionSetList);

    boolean present_situationSetList = true && (isSetSituationSetList());
    list.add(present_situationSetList);
    if (present_situationSetList)
      list.add(situationSetList);

    boolean present_originalText = true && (isSetOriginalText());
    list.add(present_originalText);
    if (present_originalText)
      list.add(originalText);

    boolean present_sound = true && (isSetSound());
    list.add(present_sound);
    if (present_sound)
      list.add(sound);

    boolean present_communicationMetadata = true && (isSetCommunicationMetadata());
    list.add(present_communicationMetadata);
    if (present_communicationMetadata)
      list.add(communicationMetadata);

    return list.hashCode();
  }

  @Override
  public int compareTo(Communication other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommunicationTaggingList()).compareTo(other.isSetCommunicationTaggingList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommunicationTaggingList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communicationTaggingList, other.communicationTaggingList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyValueMap()).compareTo(other.isSetKeyValueMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyValueMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyValueMap, other.keyValueMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLidList()).compareTo(other.isSetLidList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLidList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lidList, other.lidList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSectionList()).compareTo(other.isSetSectionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSectionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionList, other.sectionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntityMentionSetList()).compareTo(other.isSetEntityMentionSetList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntityMentionSetList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityMentionSetList, other.entityMentionSetList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntitySetList()).compareTo(other.isSetEntitySetList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntitySetList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entitySetList, other.entitySetList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSituationMentionSetList()).compareTo(other.isSetSituationMentionSetList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSituationMentionSetList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.situationMentionSetList, other.situationMentionSetList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSituationSetList()).compareTo(other.isSetSituationSetList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSituationSetList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.situationSetList, other.situationSetList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalText()).compareTo(other.isSetOriginalText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalText, other.originalText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSound()).compareTo(other.isSetSound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sound, other.sound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommunicationMetadata()).compareTo(other.isSetCommunicationMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommunicationMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communicationMetadata, other.communicationMetadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Communication(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetText()) {
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetStartTime()) {
      if (!first) sb.append(", ");
      sb.append("startTime:");
      sb.append(this.startTime);
      first = false;
    }
    if (isSetEndTime()) {
      if (!first) sb.append(", ");
      sb.append("endTime:");
      sb.append(this.endTime);
      first = false;
    }
    if (isSetCommunicationTaggingList()) {
      if (!first) sb.append(", ");
      sb.append("communicationTaggingList:");
      if (this.communicationTaggingList == null) {
        sb.append("null");
      } else {
        sb.append(this.communicationTaggingList);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("metadata:");
    if (this.metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata);
    }
    first = false;
    if (isSetKeyValueMap()) {
      if (!first) sb.append(", ");
      sb.append("keyValueMap:");
      if (this.keyValueMap == null) {
        sb.append("null");
      } else {
        sb.append(this.keyValueMap);
      }
      first = false;
    }
    if (isSetLidList()) {
      if (!first) sb.append(", ");
      sb.append("lidList:");
      if (this.lidList == null) {
        sb.append("null");
      } else {
        sb.append(this.lidList);
      }
      first = false;
    }
    if (isSetSectionList()) {
      if (!first) sb.append(", ");
      sb.append("sectionList:");
      if (this.sectionList == null) {
        sb.append("null");
      } else {
        sb.append(this.sectionList);
      }
      first = false;
    }
    if (isSetEntityMentionSetList()) {
      if (!first) sb.append(", ");
      sb.append("entityMentionSetList:");
      if (this.entityMentionSetList == null) {
        sb.append("null");
      } else {
        sb.append(this.entityMentionSetList);
      }
      first = false;
    }
    if (isSetEntitySetList()) {
      if (!first) sb.append(", ");
      sb.append("entitySetList:");
      if (this.entitySetList == null) {
        sb.append("null");
      } else {
        sb.append(this.entitySetList);
      }
      first = false;
    }
    if (isSetSituationMentionSetList()) {
      if (!first) sb.append(", ");
      sb.append("situationMentionSetList:");
      if (this.situationMentionSetList == null) {
        sb.append("null");
      } else {
        sb.append(this.situationMentionSetList);
      }
      first = false;
    }
    if (isSetSituationSetList()) {
      if (!first) sb.append(", ");
      sb.append("situationSetList:");
      if (this.situationSetList == null) {
        sb.append("null");
      } else {
        sb.append(this.situationSetList);
      }
      first = false;
    }
    if (isSetOriginalText()) {
      if (!first) sb.append(", ");
      sb.append("originalText:");
      if (this.originalText == null) {
        sb.append("null");
      } else {
        sb.append(this.originalText);
      }
      first = false;
    }
    if (isSetSound()) {
      if (!first) sb.append(", ");
      sb.append("sound:");
      if (this.sound == null) {
        sb.append("null");
      } else {
        sb.append(this.sound);
      }
      first = false;
    }
    if (isSetCommunicationMetadata()) {
      if (!first) sb.append(", ");
      sb.append("communicationMetadata:");
      if (this.communicationMetadata == null) {
        sb.append("null");
      } else {
        sb.append(this.communicationMetadata);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    if (metadata == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uuid != null) {
      uuid.validate();
    }
    if (metadata != null) {
      metadata.validate();
    }
    if (sound != null) {
      sound.validate();
    }
    if (communicationMetadata != null) {
      communicationMetadata.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommunicationStandardSchemeFactory implements SchemeFactory {
    public CommunicationStandardScheme getScheme() {
      return new CommunicationStandardScheme();
    }
  }

  private static class CommunicationStandardScheme extends StandardScheme<Communication> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Communication struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uuid = new edu.jhu.hlt.concrete.UUID();
              struct.uuid.read(iprot);
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMMUNICATION_TAGGING_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.communicationTaggingList = new ArrayList<CommunicationTagging>(_list16.size);
                CommunicationTagging _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new CommunicationTagging();
                  _elem17.read(iprot);
                  struct.communicationTaggingList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setCommunicationTaggingListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata();
              struct.metadata.read(iprot);
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // KEY_VALUE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
                struct.keyValueMap = new HashMap<String,String>(2*_map19.size);
                String _key20;
                String _val21;
                for (int _i22 = 0; _i22 < _map19.size; ++_i22)
                {
                  _key20 = iprot.readString();
                  _val21 = iprot.readString();
                  struct.keyValueMap.put(_key20, _val21);
                }
                iprot.readMapEnd();
              }
              struct.setKeyValueMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                struct.lidList = new ArrayList<edu.jhu.hlt.concrete.LanguageIdentification>(_list23.size);
                edu.jhu.hlt.concrete.LanguageIdentification _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = new edu.jhu.hlt.concrete.LanguageIdentification();
                  _elem24.read(iprot);
                  struct.lidList.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setLidListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SECTION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.sectionList = new ArrayList<edu.jhu.hlt.concrete.Section>(_list26.size);
                edu.jhu.hlt.concrete.Section _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = new edu.jhu.hlt.concrete.Section();
                  _elem27.read(iprot);
                  struct.sectionList.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setSectionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ENTITY_MENTION_SET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                struct.entityMentionSetList = new ArrayList<edu.jhu.hlt.concrete.EntityMentionSet>(_list29.size);
                edu.jhu.hlt.concrete.EntityMentionSet _elem30;
                for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                {
                  _elem30 = new edu.jhu.hlt.concrete.EntityMentionSet();
                  _elem30.read(iprot);
                  struct.entityMentionSetList.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setEntityMentionSetListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENTITY_SET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.entitySetList = new ArrayList<edu.jhu.hlt.concrete.EntitySet>(_list32.size);
                edu.jhu.hlt.concrete.EntitySet _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new edu.jhu.hlt.concrete.EntitySet();
                  _elem33.read(iprot);
                  struct.entitySetList.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setEntitySetListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SITUATION_MENTION_SET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.situationMentionSetList = new ArrayList<edu.jhu.hlt.concrete.SituationMentionSet>(_list35.size);
                edu.jhu.hlt.concrete.SituationMentionSet _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new edu.jhu.hlt.concrete.SituationMentionSet();
                  _elem36.read(iprot);
                  struct.situationMentionSetList.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setSituationMentionSetListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SITUATION_SET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.situationSetList = new ArrayList<edu.jhu.hlt.concrete.SituationSet>(_list38.size);
                edu.jhu.hlt.concrete.SituationSet _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = new edu.jhu.hlt.concrete.SituationSet();
                  _elem39.read(iprot);
                  struct.situationSetList.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setSituationSetListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ORIGINAL_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originalText = iprot.readString();
              struct.setOriginalTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sound = new edu.jhu.hlt.concrete.Sound();
              struct.sound.read(iprot);
              struct.setSoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COMMUNICATION_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.communicationMetadata = new edu.jhu.hlt.concrete.CommunicationMetadata();
              struct.communicationMetadata.read(iprot);
              struct.setCommunicationMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Communication struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        struct.uuid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        if (struct.isSetText()) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStartTime()) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        oprot.writeI64(struct.startTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndTime()) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        oprot.writeI64(struct.endTime);
        oprot.writeFieldEnd();
      }
      if (struct.communicationTaggingList != null) {
        if (struct.isSetCommunicationTaggingList()) {
          oprot.writeFieldBegin(COMMUNICATION_TAGGING_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.communicationTaggingList.size()));
            for (CommunicationTagging _iter41 : struct.communicationTaggingList)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.metadata != null) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        struct.metadata.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.keyValueMap != null) {
        if (struct.isSetKeyValueMap()) {
          oprot.writeFieldBegin(KEY_VALUE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.keyValueMap.size()));
            for (Map.Entry<String, String> _iter42 : struct.keyValueMap.entrySet())
            {
              oprot.writeString(_iter42.getKey());
              oprot.writeString(_iter42.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.lidList != null) {
        if (struct.isSetLidList()) {
          oprot.writeFieldBegin(LID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lidList.size()));
            for (edu.jhu.hlt.concrete.LanguageIdentification _iter43 : struct.lidList)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sectionList != null) {
        if (struct.isSetSectionList()) {
          oprot.writeFieldBegin(SECTION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sectionList.size()));
            for (edu.jhu.hlt.concrete.Section _iter44 : struct.sectionList)
            {
              _iter44.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.entityMentionSetList != null) {
        if (struct.isSetEntityMentionSetList()) {
          oprot.writeFieldBegin(ENTITY_MENTION_SET_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entityMentionSetList.size()));
            for (edu.jhu.hlt.concrete.EntityMentionSet _iter45 : struct.entityMentionSetList)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.entitySetList != null) {
        if (struct.isSetEntitySetList()) {
          oprot.writeFieldBegin(ENTITY_SET_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entitySetList.size()));
            for (edu.jhu.hlt.concrete.EntitySet _iter46 : struct.entitySetList)
            {
              _iter46.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.situationMentionSetList != null) {
        if (struct.isSetSituationMentionSetList()) {
          oprot.writeFieldBegin(SITUATION_MENTION_SET_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.situationMentionSetList.size()));
            for (edu.jhu.hlt.concrete.SituationMentionSet _iter47 : struct.situationMentionSetList)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.situationSetList != null) {
        if (struct.isSetSituationSetList()) {
          oprot.writeFieldBegin(SITUATION_SET_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.situationSetList.size()));
            for (edu.jhu.hlt.concrete.SituationSet _iter48 : struct.situationSetList)
            {
              _iter48.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.originalText != null) {
        if (struct.isSetOriginalText()) {
          oprot.writeFieldBegin(ORIGINAL_TEXT_FIELD_DESC);
          oprot.writeString(struct.originalText);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sound != null) {
        if (struct.isSetSound()) {
          oprot.writeFieldBegin(SOUND_FIELD_DESC);
          struct.sound.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.communicationMetadata != null) {
        if (struct.isSetCommunicationMetadata()) {
          oprot.writeFieldBegin(COMMUNICATION_METADATA_FIELD_DESC);
          struct.communicationMetadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommunicationTupleSchemeFactory implements SchemeFactory {
    public CommunicationTupleScheme getScheme() {
      return new CommunicationTupleScheme();
    }
  }

  private static class CommunicationTupleScheme extends TupleScheme<Communication> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Communication struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      struct.uuid.write(oprot);
      oprot.writeString(struct.type);
      struct.metadata.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetText()) {
        optionals.set(0);
      }
      if (struct.isSetStartTime()) {
        optionals.set(1);
      }
      if (struct.isSetEndTime()) {
        optionals.set(2);
      }
      if (struct.isSetCommunicationTaggingList()) {
        optionals.set(3);
      }
      if (struct.isSetKeyValueMap()) {
        optionals.set(4);
      }
      if (struct.isSetLidList()) {
        optionals.set(5);
      }
      if (struct.isSetSectionList()) {
        optionals.set(6);
      }
      if (struct.isSetEntityMentionSetList()) {
        optionals.set(7);
      }
      if (struct.isSetEntitySetList()) {
        optionals.set(8);
      }
      if (struct.isSetSituationMentionSetList()) {
        optionals.set(9);
      }
      if (struct.isSetSituationSetList()) {
        optionals.set(10);
      }
      if (struct.isSetOriginalText()) {
        optionals.set(11);
      }
      if (struct.isSetSound()) {
        optionals.set(12);
      }
      if (struct.isSetCommunicationMetadata()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetCommunicationTaggingList()) {
        {
          oprot.writeI32(struct.communicationTaggingList.size());
          for (CommunicationTagging _iter49 : struct.communicationTaggingList)
          {
            _iter49.write(oprot);
          }
        }
      }
      if (struct.isSetKeyValueMap()) {
        {
          oprot.writeI32(struct.keyValueMap.size());
          for (Map.Entry<String, String> _iter50 : struct.keyValueMap.entrySet())
          {
            oprot.writeString(_iter50.getKey());
            oprot.writeString(_iter50.getValue());
          }
        }
      }
      if (struct.isSetLidList()) {
        {
          oprot.writeI32(struct.lidList.size());
          for (edu.jhu.hlt.concrete.LanguageIdentification _iter51 : struct.lidList)
          {
            _iter51.write(oprot);
          }
        }
      }
      if (struct.isSetSectionList()) {
        {
          oprot.writeI32(struct.sectionList.size());
          for (edu.jhu.hlt.concrete.Section _iter52 : struct.sectionList)
          {
            _iter52.write(oprot);
          }
        }
      }
      if (struct.isSetEntityMentionSetList()) {
        {
          oprot.writeI32(struct.entityMentionSetList.size());
          for (edu.jhu.hlt.concrete.EntityMentionSet _iter53 : struct.entityMentionSetList)
          {
            _iter53.write(oprot);
          }
        }
      }
      if (struct.isSetEntitySetList()) {
        {
          oprot.writeI32(struct.entitySetList.size());
          for (edu.jhu.hlt.concrete.EntitySet _iter54 : struct.entitySetList)
          {
            _iter54.write(oprot);
          }
        }
      }
      if (struct.isSetSituationMentionSetList()) {
        {
          oprot.writeI32(struct.situationMentionSetList.size());
          for (edu.jhu.hlt.concrete.SituationMentionSet _iter55 : struct.situationMentionSetList)
          {
            _iter55.write(oprot);
          }
        }
      }
      if (struct.isSetSituationSetList()) {
        {
          oprot.writeI32(struct.situationSetList.size());
          for (edu.jhu.hlt.concrete.SituationSet _iter56 : struct.situationSetList)
          {
            _iter56.write(oprot);
          }
        }
      }
      if (struct.isSetOriginalText()) {
        oprot.writeString(struct.originalText);
      }
      if (struct.isSetSound()) {
        struct.sound.write(oprot);
      }
      if (struct.isSetCommunicationMetadata()) {
        struct.communicationMetadata.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Communication struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.uuid = new edu.jhu.hlt.concrete.UUID();
      struct.uuid.read(iprot);
      struct.setUuidIsSet(true);
      struct.type = iprot.readString();
      struct.setTypeIsSet(true);
      struct.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata();
      struct.metadata.read(iprot);
      struct.setMetadataIsSet(true);
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.communicationTaggingList = new ArrayList<CommunicationTagging>(_list57.size);
          CommunicationTagging _elem58;
          for (int _i59 = 0; _i59 < _list57.size; ++_i59)
          {
            _elem58 = new CommunicationTagging();
            _elem58.read(iprot);
            struct.communicationTaggingList.add(_elem58);
          }
        }
        struct.setCommunicationTaggingListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.keyValueMap = new HashMap<String,String>(2*_map60.size);
          String _key61;
          String _val62;
          for (int _i63 = 0; _i63 < _map60.size; ++_i63)
          {
            _key61 = iprot.readString();
            _val62 = iprot.readString();
            struct.keyValueMap.put(_key61, _val62);
          }
        }
        struct.setKeyValueMapIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list64 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lidList = new ArrayList<edu.jhu.hlt.concrete.LanguageIdentification>(_list64.size);
          edu.jhu.hlt.concrete.LanguageIdentification _elem65;
          for (int _i66 = 0; _i66 < _list64.size; ++_i66)
          {
            _elem65 = new edu.jhu.hlt.concrete.LanguageIdentification();
            _elem65.read(iprot);
            struct.lidList.add(_elem65);
          }
        }
        struct.setLidListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sectionList = new ArrayList<edu.jhu.hlt.concrete.Section>(_list67.size);
          edu.jhu.hlt.concrete.Section _elem68;
          for (int _i69 = 0; _i69 < _list67.size; ++_i69)
          {
            _elem68 = new edu.jhu.hlt.concrete.Section();
            _elem68.read(iprot);
            struct.sectionList.add(_elem68);
          }
        }
        struct.setSectionListIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list70 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.entityMentionSetList = new ArrayList<edu.jhu.hlt.concrete.EntityMentionSet>(_list70.size);
          edu.jhu.hlt.concrete.EntityMentionSet _elem71;
          for (int _i72 = 0; _i72 < _list70.size; ++_i72)
          {
            _elem71 = new edu.jhu.hlt.concrete.EntityMentionSet();
            _elem71.read(iprot);
            struct.entityMentionSetList.add(_elem71);
          }
        }
        struct.setEntityMentionSetListIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.entitySetList = new ArrayList<edu.jhu.hlt.concrete.EntitySet>(_list73.size);
          edu.jhu.hlt.concrete.EntitySet _elem74;
          for (int _i75 = 0; _i75 < _list73.size; ++_i75)
          {
            _elem74 = new edu.jhu.hlt.concrete.EntitySet();
            _elem74.read(iprot);
            struct.entitySetList.add(_elem74);
          }
        }
        struct.setEntitySetListIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list76 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.situationMentionSetList = new ArrayList<edu.jhu.hlt.concrete.SituationMentionSet>(_list76.size);
          edu.jhu.hlt.concrete.SituationMentionSet _elem77;
          for (int _i78 = 0; _i78 < _list76.size; ++_i78)
          {
            _elem77 = new edu.jhu.hlt.concrete.SituationMentionSet();
            _elem77.read(iprot);
            struct.situationMentionSetList.add(_elem77);
          }
        }
        struct.setSituationMentionSetListIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.situationSetList = new ArrayList<edu.jhu.hlt.concrete.SituationSet>(_list79.size);
          edu.jhu.hlt.concrete.SituationSet _elem80;
          for (int _i81 = 0; _i81 < _list79.size; ++_i81)
          {
            _elem80 = new edu.jhu.hlt.concrete.SituationSet();
            _elem80.read(iprot);
            struct.situationSetList.add(_elem80);
          }
        }
        struct.setSituationSetListIsSet(true);
      }
      if (incoming.get(11)) {
        struct.originalText = iprot.readString();
        struct.setOriginalTextIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sound = new edu.jhu.hlt.concrete.Sound();
        struct.sound.read(iprot);
        struct.setSoundIsSet(true);
      }
      if (incoming.get(13)) {
        struct.communicationMetadata = new edu.jhu.hlt.concrete.CommunicationMetadata();
        struct.communicationMetadata.read(iprot);
        struct.setCommunicationMetadataIsSet(true);
      }
    }
  }

}

