/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A concrete mention of a situation, where "situations" include
 * events, relations, facts, sentiments, and beliefs. Each situation
 * has a core type (such as EVENT or SENTIMENT), along with an
 * optional subtype based on its core type (e.g.,
 * event_type=CONTACT_MEET), and a set of zero or more unordered
 * arguments.
 * 
 * This struct should be used for most types of SRL labelings
 * (e.g. Propbank and FrameNet) because they are grounded in text.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-10")
public class SituationMention implements org.apache.thrift.TBase<SituationMention, SituationMention._Fields>, java.io.Serializable, Cloneable, Comparable<SituationMention> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SituationMention");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SITUATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("situationType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SITUATION_KIND_FIELD_DESC = new org.apache.thrift.protocol.TField("situationKind", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField ARGUMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("argumentList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField INTENSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("intensity", org.apache.thrift.protocol.TType.DOUBLE, (short)100);
  private static final org.apache.thrift.protocol.TField POLARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("polarity", org.apache.thrift.protocol.TType.STRING, (short)101);
  private static final org.apache.thrift.protocol.TField TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokens", org.apache.thrift.protocol.TType.STRUCT, (short)150);
  private static final org.apache.thrift.protocol.TField CONSTITUENT_FIELD_DESC = new org.apache.thrift.protocol.TField("constituent", org.apache.thrift.protocol.TType.STRUCT, (short)151);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SituationMentionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SituationMentionTupleSchemeFactory());
  }

  private edu.jhu.hlt.concrete.UUID uuid; // required
  private String text; // optional
  private String situationType; // optional
  private String situationKind; // optional
  private List<MentionArgument> argumentList; // required
  private double intensity; // optional
  private String polarity; // optional
  private edu.jhu.hlt.concrete.TokenRefSequence tokens; // optional
  private edu.jhu.hlt.concrete.ConstituentRef constituent; // optional
  private double confidence; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Unique identifier for this situation.
     */
    UUID((short)1, "uuid"),
    /**
     * The text content of this situation mention. This field is
     * often redundant with the 'tokens' field, and may not
     * be generated by all analytics.
     */
    TEXT((short)2, "text"),
    /**
     * The core type of this situation (eg EVENT or SENTIMENT),
     * or a coarse grain situation type.
     */
    SITUATION_TYPE((short)3, "situationType"),
    /**
     * A fine grain situation type that specifically describes the
     * situation mention based on situationType above. It allows for
     * more detailed description of the situation mention.
     * 
     * Some examples:
     * 
     * if situationType == EVENT, the event type for the sit. mention
     * if situationType == STATE, the state type for this sit. mention
     * 
     * For Propbank, this field should be the predicate lemma and id,
     * e.g. "strike.02". For FrameNet, this should be the frame name,
     * e.g. "Commerce_buy".
     * 
     * Different and more varied situationTypes may be added
     * in the future.
     */
    SITUATION_KIND((short)50, "situationKind"),
    /**
     * The arguments for this situation mention. Each argument
     * consists of a role and a value. It is possible for an situation
     * to have multiple arguments with the same role. Arguments are
     * unordered.
     */
    ARGUMENT_LIST((short)4, "argumentList"),
    /**
     * An "intensity" rating for the situation, typically ranging from
     * 0-1. In the case of SENTIMENT situations, this is used to record
     * the intensity of the sentiment.
     */
    INTENSITY((short)100, "intensity"),
    /**
     * The polarity of this situation. In the case of SENTIMENT
     * situations, this is used to record the polarity of the
     * sentiment.
     */
    POLARITY((short)101, "polarity"),
    /**
     * An optional pointer to tokens that are (especially)
     * relevant to this situation mention. It is left up to individual
     * analytics to decide what tokens (if any) they wish to include in
     * this field. In particular, it is not specified whether the
     * arguments' tokens should be included.
     */
    TOKENS((short)150, "tokens"),
    /**
     * An alternative way to specify the same thing as tokens.
     */
    CONSTITUENT((short)151, "constituent"),
    /**
     * A confidence score for this individual situation mention. You
     * can also set a confidence score for an entire SituationMentionSet
     * using the SituationMentionSet's metadata.
     */
    CONFIDENCE((short)200, "confidence");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // TEXT
          return TEXT;
        case 3: // SITUATION_TYPE
          return SITUATION_TYPE;
        case 50: // SITUATION_KIND
          return SITUATION_KIND;
        case 4: // ARGUMENT_LIST
          return ARGUMENT_LIST;
        case 100: // INTENSITY
          return INTENSITY;
        case 101: // POLARITY
          return POLARITY;
        case 150: // TOKENS
          return TOKENS;
        case 151: // CONSTITUENT
          return CONSTITUENT;
        case 200: // CONFIDENCE
          return CONFIDENCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTENSITY_ISSET_ID = 0;
  private static final int __CONFIDENCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TEXT,_Fields.SITUATION_TYPE,_Fields.SITUATION_KIND,_Fields.INTENSITY,_Fields.POLARITY,_Fields.TOKENS,_Fields.CONSTITUENT,_Fields.CONFIDENCE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITUATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("situationType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITUATION_KIND, new org.apache.thrift.meta_data.FieldMetaData("situationKind", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARGUMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("argumentList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MentionArgument.class))));
    tmpMap.put(_Fields.INTENSITY, new org.apache.thrift.meta_data.FieldMetaData("intensity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POLARITY, new org.apache.thrift.meta_data.FieldMetaData("polarity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKENS, new org.apache.thrift.meta_data.FieldMetaData("tokens", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.TokenRefSequence.class)));
    tmpMap.put(_Fields.CONSTITUENT, new org.apache.thrift.meta_data.FieldMetaData("constituent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.ConstituentRef.class)));
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SituationMention.class, metaDataMap);
  }

  public SituationMention() {
  }

  public SituationMention(
    edu.jhu.hlt.concrete.UUID uuid,
    List<MentionArgument> argumentList)
  {
    this();
    this.uuid = uuid;
    this.argumentList = argumentList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SituationMention(SituationMention other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuid()) {
      this.uuid = new edu.jhu.hlt.concrete.UUID(other.uuid);
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetSituationType()) {
      this.situationType = other.situationType;
    }
    if (other.isSetSituationKind()) {
      this.situationKind = other.situationKind;
    }
    if (other.isSetArgumentList()) {
      List<MentionArgument> __this__argumentList = new ArrayList<MentionArgument>(other.argumentList.size());
      for (MentionArgument other_element : other.argumentList) {
        __this__argumentList.add(new MentionArgument(other_element));
      }
      this.argumentList = __this__argumentList;
    }
    this.intensity = other.intensity;
    if (other.isSetPolarity()) {
      this.polarity = other.polarity;
    }
    if (other.isSetTokens()) {
      this.tokens = new edu.jhu.hlt.concrete.TokenRefSequence(other.tokens);
    }
    if (other.isSetConstituent()) {
      this.constituent = new edu.jhu.hlt.concrete.ConstituentRef(other.constituent);
    }
    this.confidence = other.confidence;
  }

  public SituationMention deepCopy() {
    return new SituationMention(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.text = null;
    this.situationType = null;
    this.situationKind = null;
    this.argumentList = null;
    setIntensityIsSet(false);
    this.intensity = 0.0;
    this.polarity = null;
    this.tokens = null;
    this.constituent = null;
    setConfidenceIsSet(false);
    this.confidence = 0.0;
  }

  /**
   * Unique identifier for this situation.
   */
  public edu.jhu.hlt.concrete.UUID getUuid() {
    return this.uuid;
  }

  /**
   * Unique identifier for this situation.
   */
  public SituationMention setUuid(edu.jhu.hlt.concrete.UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  /**
   * The text content of this situation mention. This field is
   * often redundant with the 'tokens' field, and may not
   * be generated by all analytics.
   */
  public String getText() {
    return this.text;
  }

  /**
   * The text content of this situation mention. This field is
   * often redundant with the 'tokens' field, and may not
   * be generated by all analytics.
   */
  public SituationMention setText(String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  /**
   * The core type of this situation (eg EVENT or SENTIMENT),
   * or a coarse grain situation type.
   */
  public String getSituationType() {
    return this.situationType;
  }

  /**
   * The core type of this situation (eg EVENT or SENTIMENT),
   * or a coarse grain situation type.
   */
  public SituationMention setSituationType(String situationType) {
    this.situationType = situationType;
    return this;
  }

  public void unsetSituationType() {
    this.situationType = null;
  }

  /** Returns true if field situationType is set (has been assigned a value) and false otherwise */
  public boolean isSetSituationType() {
    return this.situationType != null;
  }

  public void setSituationTypeIsSet(boolean value) {
    if (!value) {
      this.situationType = null;
    }
  }

  /**
   * A fine grain situation type that specifically describes the
   * situation mention based on situationType above. It allows for
   * more detailed description of the situation mention.
   * 
   * Some examples:
   * 
   * if situationType == EVENT, the event type for the sit. mention
   * if situationType == STATE, the state type for this sit. mention
   * 
   * For Propbank, this field should be the predicate lemma and id,
   * e.g. "strike.02". For FrameNet, this should be the frame name,
   * e.g. "Commerce_buy".
   * 
   * Different and more varied situationTypes may be added
   * in the future.
   */
  public String getSituationKind() {
    return this.situationKind;
  }

  /**
   * A fine grain situation type that specifically describes the
   * situation mention based on situationType above. It allows for
   * more detailed description of the situation mention.
   * 
   * Some examples:
   * 
   * if situationType == EVENT, the event type for the sit. mention
   * if situationType == STATE, the state type for this sit. mention
   * 
   * For Propbank, this field should be the predicate lemma and id,
   * e.g. "strike.02". For FrameNet, this should be the frame name,
   * e.g. "Commerce_buy".
   * 
   * Different and more varied situationTypes may be added
   * in the future.
   */
  public SituationMention setSituationKind(String situationKind) {
    this.situationKind = situationKind;
    return this;
  }

  public void unsetSituationKind() {
    this.situationKind = null;
  }

  /** Returns true if field situationKind is set (has been assigned a value) and false otherwise */
  public boolean isSetSituationKind() {
    return this.situationKind != null;
  }

  public void setSituationKindIsSet(boolean value) {
    if (!value) {
      this.situationKind = null;
    }
  }

  public int getArgumentListSize() {
    return (this.argumentList == null) ? 0 : this.argumentList.size();
  }

  public java.util.Iterator<MentionArgument> getArgumentListIterator() {
    return (this.argumentList == null) ? null : this.argumentList.iterator();
  }

  public void addToArgumentList(MentionArgument elem) {
    if (this.argumentList == null) {
      this.argumentList = new ArrayList<MentionArgument>();
    }
    this.argumentList.add(elem);
  }

  /**
   * The arguments for this situation mention. Each argument
   * consists of a role and a value. It is possible for an situation
   * to have multiple arguments with the same role. Arguments are
   * unordered.
   */
  public List<MentionArgument> getArgumentList() {
    return this.argumentList;
  }

  /**
   * The arguments for this situation mention. Each argument
   * consists of a role and a value. It is possible for an situation
   * to have multiple arguments with the same role. Arguments are
   * unordered.
   */
  public SituationMention setArgumentList(List<MentionArgument> argumentList) {
    this.argumentList = argumentList;
    return this;
  }

  public void unsetArgumentList() {
    this.argumentList = null;
  }

  /** Returns true if field argumentList is set (has been assigned a value) and false otherwise */
  public boolean isSetArgumentList() {
    return this.argumentList != null;
  }

  public void setArgumentListIsSet(boolean value) {
    if (!value) {
      this.argumentList = null;
    }
  }

  /**
   * An "intensity" rating for the situation, typically ranging from
   * 0-1. In the case of SENTIMENT situations, this is used to record
   * the intensity of the sentiment.
   */
  public double getIntensity() {
    return this.intensity;
  }

  /**
   * An "intensity" rating for the situation, typically ranging from
   * 0-1. In the case of SENTIMENT situations, this is used to record
   * the intensity of the sentiment.
   */
  public SituationMention setIntensity(double intensity) {
    this.intensity = intensity;
    setIntensityIsSet(true);
    return this;
  }

  public void unsetIntensity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTENSITY_ISSET_ID);
  }

  /** Returns true if field intensity is set (has been assigned a value) and false otherwise */
  public boolean isSetIntensity() {
    return EncodingUtils.testBit(__isset_bitfield, __INTENSITY_ISSET_ID);
  }

  public void setIntensityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTENSITY_ISSET_ID, value);
  }

  /**
   * The polarity of this situation. In the case of SENTIMENT
   * situations, this is used to record the polarity of the
   * sentiment.
   */
  public String getPolarity() {
    return this.polarity;
  }

  /**
   * The polarity of this situation. In the case of SENTIMENT
   * situations, this is used to record the polarity of the
   * sentiment.
   */
  public SituationMention setPolarity(String polarity) {
    this.polarity = polarity;
    return this;
  }

  public void unsetPolarity() {
    this.polarity = null;
  }

  /** Returns true if field polarity is set (has been assigned a value) and false otherwise */
  public boolean isSetPolarity() {
    return this.polarity != null;
  }

  public void setPolarityIsSet(boolean value) {
    if (!value) {
      this.polarity = null;
    }
  }

  /**
   * An optional pointer to tokens that are (especially)
   * relevant to this situation mention. It is left up to individual
   * analytics to decide what tokens (if any) they wish to include in
   * this field. In particular, it is not specified whether the
   * arguments' tokens should be included.
   */
  public edu.jhu.hlt.concrete.TokenRefSequence getTokens() {
    return this.tokens;
  }

  /**
   * An optional pointer to tokens that are (especially)
   * relevant to this situation mention. It is left up to individual
   * analytics to decide what tokens (if any) they wish to include in
   * this field. In particular, it is not specified whether the
   * arguments' tokens should be included.
   */
  public SituationMention setTokens(edu.jhu.hlt.concrete.TokenRefSequence tokens) {
    this.tokens = tokens;
    return this;
  }

  public void unsetTokens() {
    this.tokens = null;
  }

  /** Returns true if field tokens is set (has been assigned a value) and false otherwise */
  public boolean isSetTokens() {
    return this.tokens != null;
  }

  public void setTokensIsSet(boolean value) {
    if (!value) {
      this.tokens = null;
    }
  }

  /**
   * An alternative way to specify the same thing as tokens.
   */
  public edu.jhu.hlt.concrete.ConstituentRef getConstituent() {
    return this.constituent;
  }

  /**
   * An alternative way to specify the same thing as tokens.
   */
  public SituationMention setConstituent(edu.jhu.hlt.concrete.ConstituentRef constituent) {
    this.constituent = constituent;
    return this;
  }

  public void unsetConstituent() {
    this.constituent = null;
  }

  /** Returns true if field constituent is set (has been assigned a value) and false otherwise */
  public boolean isSetConstituent() {
    return this.constituent != null;
  }

  public void setConstituentIsSet(boolean value) {
    if (!value) {
      this.constituent = null;
    }
  }

  /**
   * A confidence score for this individual situation mention. You
   * can also set a confidence score for an entire SituationMentionSet
   * using the SituationMentionSet's metadata.
   */
  public double getConfidence() {
    return this.confidence;
  }

  /**
   * A confidence score for this individual situation mention. You
   * can also set a confidence score for an entire SituationMentionSet
   * using the SituationMentionSet's metadata.
   */
  public SituationMention setConfidence(double confidence) {
    this.confidence = confidence;
    setConfidenceIsSet(true);
    return this;
  }

  public void unsetConfidence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  public void setConfidenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((String)value);
      }
      break;

    case SITUATION_TYPE:
      if (value == null) {
        unsetSituationType();
      } else {
        setSituationType((String)value);
      }
      break;

    case SITUATION_KIND:
      if (value == null) {
        unsetSituationKind();
      } else {
        setSituationKind((String)value);
      }
      break;

    case ARGUMENT_LIST:
      if (value == null) {
        unsetArgumentList();
      } else {
        setArgumentList((List<MentionArgument>)value);
      }
      break;

    case INTENSITY:
      if (value == null) {
        unsetIntensity();
      } else {
        setIntensity((Double)value);
      }
      break;

    case POLARITY:
      if (value == null) {
        unsetPolarity();
      } else {
        setPolarity((String)value);
      }
      break;

    case TOKENS:
      if (value == null) {
        unsetTokens();
      } else {
        setTokens((edu.jhu.hlt.concrete.TokenRefSequence)value);
      }
      break;

    case CONSTITUENT:
      if (value == null) {
        unsetConstituent();
      } else {
        setConstituent((edu.jhu.hlt.concrete.ConstituentRef)value);
      }
      break;

    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case TEXT:
      return getText();

    case SITUATION_TYPE:
      return getSituationType();

    case SITUATION_KIND:
      return getSituationKind();

    case ARGUMENT_LIST:
      return getArgumentList();

    case INTENSITY:
      return getIntensity();

    case POLARITY:
      return getPolarity();

    case TOKENS:
      return getTokens();

    case CONSTITUENT:
      return getConstituent();

    case CONFIDENCE:
      return getConfidence();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case TEXT:
      return isSetText();
    case SITUATION_TYPE:
      return isSetSituationType();
    case SITUATION_KIND:
      return isSetSituationKind();
    case ARGUMENT_LIST:
      return isSetArgumentList();
    case INTENSITY:
      return isSetIntensity();
    case POLARITY:
      return isSetPolarity();
    case TOKENS:
      return isSetTokens();
    case CONSTITUENT:
      return isSetConstituent();
    case CONFIDENCE:
      return isSetConfidence();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SituationMention)
      return this.equals((SituationMention)that);
    return false;
  }

  public boolean equals(SituationMention that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_situationType = true && this.isSetSituationType();
    boolean that_present_situationType = true && that.isSetSituationType();
    if (this_present_situationType || that_present_situationType) {
      if (!(this_present_situationType && that_present_situationType))
        return false;
      if (!this.situationType.equals(that.situationType))
        return false;
    }

    boolean this_present_situationKind = true && this.isSetSituationKind();
    boolean that_present_situationKind = true && that.isSetSituationKind();
    if (this_present_situationKind || that_present_situationKind) {
      if (!(this_present_situationKind && that_present_situationKind))
        return false;
      if (!this.situationKind.equals(that.situationKind))
        return false;
    }

    boolean this_present_argumentList = true && this.isSetArgumentList();
    boolean that_present_argumentList = true && that.isSetArgumentList();
    if (this_present_argumentList || that_present_argumentList) {
      if (!(this_present_argumentList && that_present_argumentList))
        return false;
      if (!this.argumentList.equals(that.argumentList))
        return false;
    }

    boolean this_present_intensity = true && this.isSetIntensity();
    boolean that_present_intensity = true && that.isSetIntensity();
    if (this_present_intensity || that_present_intensity) {
      if (!(this_present_intensity && that_present_intensity))
        return false;
      if (this.intensity != that.intensity)
        return false;
    }

    boolean this_present_polarity = true && this.isSetPolarity();
    boolean that_present_polarity = true && that.isSetPolarity();
    if (this_present_polarity || that_present_polarity) {
      if (!(this_present_polarity && that_present_polarity))
        return false;
      if (!this.polarity.equals(that.polarity))
        return false;
    }

    boolean this_present_tokens = true && this.isSetTokens();
    boolean that_present_tokens = true && that.isSetTokens();
    if (this_present_tokens || that_present_tokens) {
      if (!(this_present_tokens && that_present_tokens))
        return false;
      if (!this.tokens.equals(that.tokens))
        return false;
    }

    boolean this_present_constituent = true && this.isSetConstituent();
    boolean that_present_constituent = true && that.isSetConstituent();
    if (this_present_constituent || that_present_constituent) {
      if (!(this_present_constituent && that_present_constituent))
        return false;
      if (!this.constituent.equals(that.constituent))
        return false;
    }

    boolean this_present_confidence = true && this.isSetConfidence();
    boolean that_present_confidence = true && that.isSetConfidence();
    if (this_present_confidence || that_present_confidence) {
      if (!(this_present_confidence && that_present_confidence))
        return false;
      if (this.confidence != that.confidence)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uuid = true && (isSetUuid());
    list.add(present_uuid);
    if (present_uuid)
      list.add(uuid);

    boolean present_text = true && (isSetText());
    list.add(present_text);
    if (present_text)
      list.add(text);

    boolean present_situationType = true && (isSetSituationType());
    list.add(present_situationType);
    if (present_situationType)
      list.add(situationType);

    boolean present_situationKind = true && (isSetSituationKind());
    list.add(present_situationKind);
    if (present_situationKind)
      list.add(situationKind);

    boolean present_argumentList = true && (isSetArgumentList());
    list.add(present_argumentList);
    if (present_argumentList)
      list.add(argumentList);

    boolean present_intensity = true && (isSetIntensity());
    list.add(present_intensity);
    if (present_intensity)
      list.add(intensity);

    boolean present_polarity = true && (isSetPolarity());
    list.add(present_polarity);
    if (present_polarity)
      list.add(polarity);

    boolean present_tokens = true && (isSetTokens());
    list.add(present_tokens);
    if (present_tokens)
      list.add(tokens);

    boolean present_constituent = true && (isSetConstituent());
    list.add(present_constituent);
    if (present_constituent)
      list.add(constituent);

    boolean present_confidence = true && (isSetConfidence());
    list.add(present_confidence);
    if (present_confidence)
      list.add(confidence);

    return list.hashCode();
  }

  @Override
  public int compareTo(SituationMention other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSituationType()).compareTo(other.isSetSituationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSituationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.situationType, other.situationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSituationKind()).compareTo(other.isSetSituationKind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSituationKind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.situationKind, other.situationKind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgumentList()).compareTo(other.isSetArgumentList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgumentList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argumentList, other.argumentList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntensity()).compareTo(other.isSetIntensity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntensity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intensity, other.intensity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolarity()).compareTo(other.isSetPolarity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolarity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.polarity, other.polarity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokens()).compareTo(other.isSetTokens());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokens()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokens, other.tokens);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstituent()).compareTo(other.isSetConstituent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstituent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constituent, other.constituent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfidence()).compareTo(other.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, other.confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SituationMention(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (isSetText()) {
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetSituationType()) {
      if (!first) sb.append(", ");
      sb.append("situationType:");
      if (this.situationType == null) {
        sb.append("null");
      } else {
        sb.append(this.situationType);
      }
      first = false;
    }
    if (isSetSituationKind()) {
      if (!first) sb.append(", ");
      sb.append("situationKind:");
      if (this.situationKind == null) {
        sb.append("null");
      } else {
        sb.append(this.situationKind);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("argumentList:");
    if (this.argumentList == null) {
      sb.append("null");
    } else {
      sb.append(this.argumentList);
    }
    first = false;
    if (isSetIntensity()) {
      if (!first) sb.append(", ");
      sb.append("intensity:");
      sb.append(this.intensity);
      first = false;
    }
    if (isSetPolarity()) {
      if (!first) sb.append(", ");
      sb.append("polarity:");
      if (this.polarity == null) {
        sb.append("null");
      } else {
        sb.append(this.polarity);
      }
      first = false;
    }
    if (isSetTokens()) {
      if (!first) sb.append(", ");
      sb.append("tokens:");
      if (this.tokens == null) {
        sb.append("null");
      } else {
        sb.append(this.tokens);
      }
      first = false;
    }
    if (isSetConstituent()) {
      if (!first) sb.append(", ");
      sb.append("constituent:");
      if (this.constituent == null) {
        sb.append("null");
      } else {
        sb.append(this.constituent);
      }
      first = false;
    }
    if (isSetConfidence()) {
      if (!first) sb.append(", ");
      sb.append("confidence:");
      sb.append(this.confidence);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (argumentList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'argumentList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uuid != null) {
      uuid.validate();
    }
    if (tokens != null) {
      tokens.validate();
    }
    if (constituent != null) {
      constituent.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SituationMentionStandardSchemeFactory implements SchemeFactory {
    public SituationMentionStandardScheme getScheme() {
      return new SituationMentionStandardScheme();
    }
  }

  private static class SituationMentionStandardScheme extends StandardScheme<SituationMention> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SituationMention struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uuid = new edu.jhu.hlt.concrete.UUID();
              struct.uuid.read(iprot);
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SITUATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.situationType = iprot.readString();
              struct.setSituationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // SITUATION_KIND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.situationKind = iprot.readString();
              struct.setSituationKindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARGUMENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.argumentList = new ArrayList<MentionArgument>(_list64.size);
                MentionArgument _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new MentionArgument();
                  _elem65.read(iprot);
                  struct.argumentList.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setArgumentListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // INTENSITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.intensity = iprot.readDouble();
              struct.setIntensityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // POLARITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.polarity = iprot.readString();
              struct.setPolarityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 150: // TOKENS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokens = new edu.jhu.hlt.concrete.TokenRefSequence();
              struct.tokens.read(iprot);
              struct.setTokensIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 151: // CONSTITUENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.constituent = new edu.jhu.hlt.concrete.ConstituentRef();
              struct.constituent.read(iprot);
              struct.setConstituentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence = iprot.readDouble();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SituationMention struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        struct.uuid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        if (struct.isSetText()) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
      }
      if (struct.situationType != null) {
        if (struct.isSetSituationType()) {
          oprot.writeFieldBegin(SITUATION_TYPE_FIELD_DESC);
          oprot.writeString(struct.situationType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.argumentList != null) {
        oprot.writeFieldBegin(ARGUMENT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.argumentList.size()));
          for (MentionArgument _iter67 : struct.argumentList)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.situationKind != null) {
        if (struct.isSetSituationKind()) {
          oprot.writeFieldBegin(SITUATION_KIND_FIELD_DESC);
          oprot.writeString(struct.situationKind);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIntensity()) {
        oprot.writeFieldBegin(INTENSITY_FIELD_DESC);
        oprot.writeDouble(struct.intensity);
        oprot.writeFieldEnd();
      }
      if (struct.polarity != null) {
        if (struct.isSetPolarity()) {
          oprot.writeFieldBegin(POLARITY_FIELD_DESC);
          oprot.writeString(struct.polarity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tokens != null) {
        if (struct.isSetTokens()) {
          oprot.writeFieldBegin(TOKENS_FIELD_DESC);
          struct.tokens.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.constituent != null) {
        if (struct.isSetConstituent()) {
          oprot.writeFieldBegin(CONSTITUENT_FIELD_DESC);
          struct.constituent.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConfidence()) {
        oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.confidence);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SituationMentionTupleSchemeFactory implements SchemeFactory {
    public SituationMentionTupleScheme getScheme() {
      return new SituationMentionTupleScheme();
    }
  }

  private static class SituationMentionTupleScheme extends TupleScheme<SituationMention> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SituationMention struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.uuid.write(oprot);
      {
        oprot.writeI32(struct.argumentList.size());
        for (MentionArgument _iter68 : struct.argumentList)
        {
          _iter68.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetText()) {
        optionals.set(0);
      }
      if (struct.isSetSituationType()) {
        optionals.set(1);
      }
      if (struct.isSetSituationKind()) {
        optionals.set(2);
      }
      if (struct.isSetIntensity()) {
        optionals.set(3);
      }
      if (struct.isSetPolarity()) {
        optionals.set(4);
      }
      if (struct.isSetTokens()) {
        optionals.set(5);
      }
      if (struct.isSetConstituent()) {
        optionals.set(6);
      }
      if (struct.isSetConfidence()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
      if (struct.isSetSituationType()) {
        oprot.writeString(struct.situationType);
      }
      if (struct.isSetSituationKind()) {
        oprot.writeString(struct.situationKind);
      }
      if (struct.isSetIntensity()) {
        oprot.writeDouble(struct.intensity);
      }
      if (struct.isSetPolarity()) {
        oprot.writeString(struct.polarity);
      }
      if (struct.isSetTokens()) {
        struct.tokens.write(oprot);
      }
      if (struct.isSetConstituent()) {
        struct.constituent.write(oprot);
      }
      if (struct.isSetConfidence()) {
        oprot.writeDouble(struct.confidence);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SituationMention struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuid = new edu.jhu.hlt.concrete.UUID();
      struct.uuid.read(iprot);
      struct.setUuidIsSet(true);
      {
        org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.argumentList = new ArrayList<MentionArgument>(_list69.size);
        MentionArgument _elem70;
        for (int _i71 = 0; _i71 < _list69.size; ++_i71)
        {
          _elem70 = new MentionArgument();
          _elem70.read(iprot);
          struct.argumentList.add(_elem70);
        }
      }
      struct.setArgumentListIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
      if (incoming.get(1)) {
        struct.situationType = iprot.readString();
        struct.setSituationTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.situationKind = iprot.readString();
        struct.setSituationKindIsSet(true);
      }
      if (incoming.get(3)) {
        struct.intensity = iprot.readDouble();
        struct.setIntensityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.polarity = iprot.readString();
        struct.setPolarityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tokens = new edu.jhu.hlt.concrete.TokenRefSequence();
        struct.tokens.read(iprot);
        struct.setTokensIsSet(true);
      }
      if (incoming.get(6)) {
        struct.constituent = new edu.jhu.hlt.concrete.ConstituentRef();
        struct.constituent.read(iprot);
        struct.setConstituentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.confidence = iprot.readDouble();
        struct.setConfidenceIsSet(true);
      }
    }
  }

}

