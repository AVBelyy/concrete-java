/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-10")
public class TwitterEntities implements org.apache.thrift.TBase<TwitterEntities, TwitterEntities._Fields>, java.io.Serializable, Cloneable, Comparable<TwitterEntities> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TwitterEntities");

  private static final org.apache.thrift.protocol.TField HASHTAG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("hashtagList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField URL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("urlList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField USER_MENTION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("userMentionList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TwitterEntitiesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TwitterEntitiesTupleSchemeFactory());
  }

  private List<HashTag> hashtagList; // optional
  private List<URL> urlList; // optional
  private List<UserMention> userMentionList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HASHTAG_LIST((short)1, "hashtagList"),
    URL_LIST((short)2, "urlList"),
    USER_MENTION_LIST((short)3, "userMentionList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HASHTAG_LIST
          return HASHTAG_LIST;
        case 2: // URL_LIST
          return URL_LIST;
        case 3: // USER_MENTION_LIST
          return USER_MENTION_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.HASHTAG_LIST,_Fields.URL_LIST,_Fields.USER_MENTION_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HASHTAG_LIST, new org.apache.thrift.meta_data.FieldMetaData("hashtagList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HashTag.class))));
    tmpMap.put(_Fields.URL_LIST, new org.apache.thrift.meta_data.FieldMetaData("urlList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, URL.class))));
    tmpMap.put(_Fields.USER_MENTION_LIST, new org.apache.thrift.meta_data.FieldMetaData("userMentionList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserMention.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TwitterEntities.class, metaDataMap);
  }

  public TwitterEntities() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TwitterEntities(TwitterEntities other) {
    if (other.isSetHashtagList()) {
      List<HashTag> __this__hashtagList = new ArrayList<HashTag>(other.hashtagList.size());
      for (HashTag other_element : other.hashtagList) {
        __this__hashtagList.add(new HashTag(other_element));
      }
      this.hashtagList = __this__hashtagList;
    }
    if (other.isSetUrlList()) {
      List<URL> __this__urlList = new ArrayList<URL>(other.urlList.size());
      for (URL other_element : other.urlList) {
        __this__urlList.add(new URL(other_element));
      }
      this.urlList = __this__urlList;
    }
    if (other.isSetUserMentionList()) {
      List<UserMention> __this__userMentionList = new ArrayList<UserMention>(other.userMentionList.size());
      for (UserMention other_element : other.userMentionList) {
        __this__userMentionList.add(new UserMention(other_element));
      }
      this.userMentionList = __this__userMentionList;
    }
  }

  public TwitterEntities deepCopy() {
    return new TwitterEntities(this);
  }

  @Override
  public void clear() {
    this.hashtagList = null;
    this.urlList = null;
    this.userMentionList = null;
  }

  public int getHashtagListSize() {
    return (this.hashtagList == null) ? 0 : this.hashtagList.size();
  }

  public java.util.Iterator<HashTag> getHashtagListIterator() {
    return (this.hashtagList == null) ? null : this.hashtagList.iterator();
  }

  public void addToHashtagList(HashTag elem) {
    if (this.hashtagList == null) {
      this.hashtagList = new ArrayList<HashTag>();
    }
    this.hashtagList.add(elem);
  }

  public List<HashTag> getHashtagList() {
    return this.hashtagList;
  }

  public TwitterEntities setHashtagList(List<HashTag> hashtagList) {
    this.hashtagList = hashtagList;
    return this;
  }

  public void unsetHashtagList() {
    this.hashtagList = null;
  }

  /** Returns true if field hashtagList is set (has been assigned a value) and false otherwise */
  public boolean isSetHashtagList() {
    return this.hashtagList != null;
  }

  public void setHashtagListIsSet(boolean value) {
    if (!value) {
      this.hashtagList = null;
    }
  }

  public int getUrlListSize() {
    return (this.urlList == null) ? 0 : this.urlList.size();
  }

  public java.util.Iterator<URL> getUrlListIterator() {
    return (this.urlList == null) ? null : this.urlList.iterator();
  }

  public void addToUrlList(URL elem) {
    if (this.urlList == null) {
      this.urlList = new ArrayList<URL>();
    }
    this.urlList.add(elem);
  }

  public List<URL> getUrlList() {
    return this.urlList;
  }

  public TwitterEntities setUrlList(List<URL> urlList) {
    this.urlList = urlList;
    return this;
  }

  public void unsetUrlList() {
    this.urlList = null;
  }

  /** Returns true if field urlList is set (has been assigned a value) and false otherwise */
  public boolean isSetUrlList() {
    return this.urlList != null;
  }

  public void setUrlListIsSet(boolean value) {
    if (!value) {
      this.urlList = null;
    }
  }

  public int getUserMentionListSize() {
    return (this.userMentionList == null) ? 0 : this.userMentionList.size();
  }

  public java.util.Iterator<UserMention> getUserMentionListIterator() {
    return (this.userMentionList == null) ? null : this.userMentionList.iterator();
  }

  public void addToUserMentionList(UserMention elem) {
    if (this.userMentionList == null) {
      this.userMentionList = new ArrayList<UserMention>();
    }
    this.userMentionList.add(elem);
  }

  public List<UserMention> getUserMentionList() {
    return this.userMentionList;
  }

  public TwitterEntities setUserMentionList(List<UserMention> userMentionList) {
    this.userMentionList = userMentionList;
    return this;
  }

  public void unsetUserMentionList() {
    this.userMentionList = null;
  }

  /** Returns true if field userMentionList is set (has been assigned a value) and false otherwise */
  public boolean isSetUserMentionList() {
    return this.userMentionList != null;
  }

  public void setUserMentionListIsSet(boolean value) {
    if (!value) {
      this.userMentionList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HASHTAG_LIST:
      if (value == null) {
        unsetHashtagList();
      } else {
        setHashtagList((List<HashTag>)value);
      }
      break;

    case URL_LIST:
      if (value == null) {
        unsetUrlList();
      } else {
        setUrlList((List<URL>)value);
      }
      break;

    case USER_MENTION_LIST:
      if (value == null) {
        unsetUserMentionList();
      } else {
        setUserMentionList((List<UserMention>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HASHTAG_LIST:
      return getHashtagList();

    case URL_LIST:
      return getUrlList();

    case USER_MENTION_LIST:
      return getUserMentionList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HASHTAG_LIST:
      return isSetHashtagList();
    case URL_LIST:
      return isSetUrlList();
    case USER_MENTION_LIST:
      return isSetUserMentionList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TwitterEntities)
      return this.equals((TwitterEntities)that);
    return false;
  }

  public boolean equals(TwitterEntities that) {
    if (that == null)
      return false;

    boolean this_present_hashtagList = true && this.isSetHashtagList();
    boolean that_present_hashtagList = true && that.isSetHashtagList();
    if (this_present_hashtagList || that_present_hashtagList) {
      if (!(this_present_hashtagList && that_present_hashtagList))
        return false;
      if (!this.hashtagList.equals(that.hashtagList))
        return false;
    }

    boolean this_present_urlList = true && this.isSetUrlList();
    boolean that_present_urlList = true && that.isSetUrlList();
    if (this_present_urlList || that_present_urlList) {
      if (!(this_present_urlList && that_present_urlList))
        return false;
      if (!this.urlList.equals(that.urlList))
        return false;
    }

    boolean this_present_userMentionList = true && this.isSetUserMentionList();
    boolean that_present_userMentionList = true && that.isSetUserMentionList();
    if (this_present_userMentionList || that_present_userMentionList) {
      if (!(this_present_userMentionList && that_present_userMentionList))
        return false;
      if (!this.userMentionList.equals(that.userMentionList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hashtagList = true && (isSetHashtagList());
    list.add(present_hashtagList);
    if (present_hashtagList)
      list.add(hashtagList);

    boolean present_urlList = true && (isSetUrlList());
    list.add(present_urlList);
    if (present_urlList)
      list.add(urlList);

    boolean present_userMentionList = true && (isSetUserMentionList());
    list.add(present_userMentionList);
    if (present_userMentionList)
      list.add(userMentionList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TwitterEntities other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHashtagList()).compareTo(other.isSetHashtagList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHashtagList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashtagList, other.hashtagList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrlList()).compareTo(other.isSetUrlList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrlList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urlList, other.urlList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserMentionList()).compareTo(other.isSetUserMentionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserMentionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userMentionList, other.userMentionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TwitterEntities(");
    boolean first = true;

    if (isSetHashtagList()) {
      sb.append("hashtagList:");
      if (this.hashtagList == null) {
        sb.append("null");
      } else {
        sb.append(this.hashtagList);
      }
      first = false;
    }
    if (isSetUrlList()) {
      if (!first) sb.append(", ");
      sb.append("urlList:");
      if (this.urlList == null) {
        sb.append("null");
      } else {
        sb.append(this.urlList);
      }
      first = false;
    }
    if (isSetUserMentionList()) {
      if (!first) sb.append(", ");
      sb.append("userMentionList:");
      if (this.userMentionList == null) {
        sb.append("null");
      } else {
        sb.append(this.userMentionList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TwitterEntitiesStandardSchemeFactory implements SchemeFactory {
    public TwitterEntitiesStandardScheme getScheme() {
      return new TwitterEntitiesStandardScheme();
    }
  }

  private static class TwitterEntitiesStandardScheme extends StandardScheme<TwitterEntities> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TwitterEntities struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HASHTAG_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.hashtagList = new ArrayList<HashTag>(_list8.size);
                HashTag _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new HashTag();
                  _elem9.read(iprot);
                  struct.hashtagList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setHashtagListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // URL_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.urlList = new ArrayList<URL>(_list11.size);
                URL _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = new URL();
                  _elem12.read(iprot);
                  struct.urlList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setUrlListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_MENTION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.userMentionList = new ArrayList<UserMention>(_list14.size);
                UserMention _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = new UserMention();
                  _elem15.read(iprot);
                  struct.userMentionList.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setUserMentionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TwitterEntities struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hashtagList != null) {
        if (struct.isSetHashtagList()) {
          oprot.writeFieldBegin(HASHTAG_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.hashtagList.size()));
            for (HashTag _iter17 : struct.hashtagList)
            {
              _iter17.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.urlList != null) {
        if (struct.isSetUrlList()) {
          oprot.writeFieldBegin(URL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.urlList.size()));
            for (URL _iter18 : struct.urlList)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.userMentionList != null) {
        if (struct.isSetUserMentionList()) {
          oprot.writeFieldBegin(USER_MENTION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.userMentionList.size()));
            for (UserMention _iter19 : struct.userMentionList)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TwitterEntitiesTupleSchemeFactory implements SchemeFactory {
    public TwitterEntitiesTupleScheme getScheme() {
      return new TwitterEntitiesTupleScheme();
    }
  }

  private static class TwitterEntitiesTupleScheme extends TupleScheme<TwitterEntities> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TwitterEntities struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHashtagList()) {
        optionals.set(0);
      }
      if (struct.isSetUrlList()) {
        optionals.set(1);
      }
      if (struct.isSetUserMentionList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHashtagList()) {
        {
          oprot.writeI32(struct.hashtagList.size());
          for (HashTag _iter20 : struct.hashtagList)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetUrlList()) {
        {
          oprot.writeI32(struct.urlList.size());
          for (URL _iter21 : struct.urlList)
          {
            _iter21.write(oprot);
          }
        }
      }
      if (struct.isSetUserMentionList()) {
        {
          oprot.writeI32(struct.userMentionList.size());
          for (UserMention _iter22 : struct.userMentionList)
          {
            _iter22.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TwitterEntities struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.hashtagList = new ArrayList<HashTag>(_list23.size);
          HashTag _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = new HashTag();
            _elem24.read(iprot);
            struct.hashtagList.add(_elem24);
          }
        }
        struct.setHashtagListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.urlList = new ArrayList<URL>(_list26.size);
          URL _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = new URL();
            _elem27.read(iprot);
            struct.urlList.add(_elem27);
          }
        }
        struct.setUrlListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.userMentionList = new ArrayList<UserMention>(_list29.size);
          UserMention _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new UserMention();
            _elem30.read(iprot);
            struct.userMentionList.add(_elem30);
          }
        }
        struct.setUserMentionListIsSet(true);
      }
    }
  }

}

