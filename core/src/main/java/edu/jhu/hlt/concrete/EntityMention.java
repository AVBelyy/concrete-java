/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A span of text with a specific referent, such as a person,
 * organization, or time. Things that can be referred to by a mention
 * are called "entities."
 * 
 * It is left up to individual EntityMention taggers to decide which
 * referent types and phrase types to identify. For example, some
 * EntityMention taggers may only identify proper nouns, or may only
 * identify EntityMentions that refer to people.
 * 
 * Each EntityMention consists of a sequence of tokens. This sequence
 * is usually annotated with information about the referent type
 * (e.g., is it a person, or a location, or an organization, etc) as
 * well as the phrase type (is it a name, pronoun, common noun, etc.).
 * 
 * EntityMentions typically consist of a single noun phrase; however,
 * other phrase types may also be marked as mentions. For
 * example, in the phrase "French hotel," the adjective "French" might
 * be marked as a mention for France.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-04")
public class EntityMention implements org.apache.thrift.TBase<EntityMention, EntityMention._Fields>, java.io.Serializable, Cloneable, Comparable<EntityMention> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EntityMention");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokens", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ENTITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("entityType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PHRASE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("phraseType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CHILD_MENTION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("childMentionIdList", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EntityMentionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EntityMentionTupleSchemeFactory());
  }

  private edu.jhu.hlt.concrete.UUID uuid; // required
  private edu.jhu.hlt.concrete.TokenRefSequence tokens; // required
  private String entityType; // optional
  private String phraseType; // optional
  private double confidence; // optional
  private String text; // optional
  private List<edu.jhu.hlt.concrete.UUID> childMentionIdList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    /**
     * Pointer to sequence of tokens.
     * 
     * Special note: In the case of PRO-drop, where there is no explicit
     * mention, but an EntityMention is needed for downstream Entity
     * analysis, this field should be set to a TokenRefSequence with an
     * empty tokenIndexList and the anchorTokenIndex set to the head/only
     * token of the verb/predicate from which the PRO was dropped.
     */
    TOKENS((short)2, "tokens"),
    /**
     * The type of referent that is referred to by this mention.
     */
    ENTITY_TYPE((short)3, "entityType"),
    /**
     * The phrase type of the tokens that constitute this mention.
     */
    PHRASE_TYPE((short)4, "phraseType"),
    /**
     * A confidence score for this individual mention.  You can also
     * set a confidence score for an entire EntityMentionSet using the
     * EntityMentionSet's metadata.
     */
    CONFIDENCE((short)5, "confidence"),
    /**
     * The text content of this entity mention.  This field is
     * typically redundant with the string formed by cross-referencing
     * the 'tokens.tokenIndexList' field with this mention's
     * tokenization. This field may not be generated by all analytics.
     */
    TEXT((short)6, "text"),
    /**
     * A list of pointers to the "child" EntityMentions of this
     * EntityMention.
     */
    CHILD_MENTION_ID_LIST((short)7, "childMentionIdList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // TOKENS
          return TOKENS;
        case 3: // ENTITY_TYPE
          return ENTITY_TYPE;
        case 4: // PHRASE_TYPE
          return PHRASE_TYPE;
        case 5: // CONFIDENCE
          return CONFIDENCE;
        case 6: // TEXT
          return TEXT;
        case 7: // CHILD_MENTION_ID_LIST
          return CHILD_MENTION_ID_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONFIDENCE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ENTITY_TYPE,_Fields.PHRASE_TYPE,_Fields.CONFIDENCE,_Fields.TEXT,_Fields.CHILD_MENTION_ID_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.TOKENS, new org.apache.thrift.meta_data.FieldMetaData("tokens", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.TokenRefSequence.class)));
    tmpMap.put(_Fields.ENTITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("entityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHRASE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("phraseType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHILD_MENTION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("childMentionIdList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EntityMention.class, metaDataMap);
  }

  public EntityMention() {
  }

  public EntityMention(
    edu.jhu.hlt.concrete.UUID uuid,
    edu.jhu.hlt.concrete.TokenRefSequence tokens)
  {
    this();
    this.uuid = uuid;
    this.tokens = tokens;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EntityMention(EntityMention other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuid()) {
      this.uuid = new edu.jhu.hlt.concrete.UUID(other.uuid);
    }
    if (other.isSetTokens()) {
      this.tokens = new edu.jhu.hlt.concrete.TokenRefSequence(other.tokens);
    }
    if (other.isSetEntityType()) {
      this.entityType = other.entityType;
    }
    if (other.isSetPhraseType()) {
      this.phraseType = other.phraseType;
    }
    this.confidence = other.confidence;
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetChildMentionIdList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__childMentionIdList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.childMentionIdList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.childMentionIdList) {
        __this__childMentionIdList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.childMentionIdList = __this__childMentionIdList;
    }
  }

  public EntityMention deepCopy() {
    return new EntityMention(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.tokens = null;
    this.entityType = null;
    this.phraseType = null;
    setConfidenceIsSet(false);
    this.confidence = 0.0;
    this.text = null;
    this.childMentionIdList = null;
  }

  public edu.jhu.hlt.concrete.UUID getUuid() {
    return this.uuid;
  }

  public EntityMention setUuid(edu.jhu.hlt.concrete.UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  /**
   * Pointer to sequence of tokens.
   * 
   * Special note: In the case of PRO-drop, where there is no explicit
   * mention, but an EntityMention is needed for downstream Entity
   * analysis, this field should be set to a TokenRefSequence with an
   * empty tokenIndexList and the anchorTokenIndex set to the head/only
   * token of the verb/predicate from which the PRO was dropped.
   */
  public edu.jhu.hlt.concrete.TokenRefSequence getTokens() {
    return this.tokens;
  }

  /**
   * Pointer to sequence of tokens.
   * 
   * Special note: In the case of PRO-drop, where there is no explicit
   * mention, but an EntityMention is needed for downstream Entity
   * analysis, this field should be set to a TokenRefSequence with an
   * empty tokenIndexList and the anchorTokenIndex set to the head/only
   * token of the verb/predicate from which the PRO was dropped.
   */
  public EntityMention setTokens(edu.jhu.hlt.concrete.TokenRefSequence tokens) {
    this.tokens = tokens;
    return this;
  }

  public void unsetTokens() {
    this.tokens = null;
  }

  /** Returns true if field tokens is set (has been assigned a value) and false otherwise */
  public boolean isSetTokens() {
    return this.tokens != null;
  }

  public void setTokensIsSet(boolean value) {
    if (!value) {
      this.tokens = null;
    }
  }

  /**
   * The type of referent that is referred to by this mention.
   */
  public String getEntityType() {
    return this.entityType;
  }

  /**
   * The type of referent that is referred to by this mention.
   */
  public EntityMention setEntityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

  public void unsetEntityType() {
    this.entityType = null;
  }

  /** Returns true if field entityType is set (has been assigned a value) and false otherwise */
  public boolean isSetEntityType() {
    return this.entityType != null;
  }

  public void setEntityTypeIsSet(boolean value) {
    if (!value) {
      this.entityType = null;
    }
  }

  /**
   * The phrase type of the tokens that constitute this mention.
   */
  public String getPhraseType() {
    return this.phraseType;
  }

  /**
   * The phrase type of the tokens that constitute this mention.
   */
  public EntityMention setPhraseType(String phraseType) {
    this.phraseType = phraseType;
    return this;
  }

  public void unsetPhraseType() {
    this.phraseType = null;
  }

  /** Returns true if field phraseType is set (has been assigned a value) and false otherwise */
  public boolean isSetPhraseType() {
    return this.phraseType != null;
  }

  public void setPhraseTypeIsSet(boolean value) {
    if (!value) {
      this.phraseType = null;
    }
  }

  /**
   * A confidence score for this individual mention.  You can also
   * set a confidence score for an entire EntityMentionSet using the
   * EntityMentionSet's metadata.
   */
  public double getConfidence() {
    return this.confidence;
  }

  /**
   * A confidence score for this individual mention.  You can also
   * set a confidence score for an entire EntityMentionSet using the
   * EntityMentionSet's metadata.
   */
  public EntityMention setConfidence(double confidence) {
    this.confidence = confidence;
    setConfidenceIsSet(true);
    return this;
  }

  public void unsetConfidence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  public void setConfidenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
  }

  /**
   * The text content of this entity mention.  This field is
   * typically redundant with the string formed by cross-referencing
   * the 'tokens.tokenIndexList' field with this mention's
   * tokenization. This field may not be generated by all analytics.
   */
  public String getText() {
    return this.text;
  }

  /**
   * The text content of this entity mention.  This field is
   * typically redundant with the string formed by cross-referencing
   * the 'tokens.tokenIndexList' field with this mention's
   * tokenization. This field may not be generated by all analytics.
   */
  public EntityMention setText(String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public int getChildMentionIdListSize() {
    return (this.childMentionIdList == null) ? 0 : this.childMentionIdList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getChildMentionIdListIterator() {
    return (this.childMentionIdList == null) ? null : this.childMentionIdList.iterator();
  }

  public void addToChildMentionIdList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.childMentionIdList == null) {
      this.childMentionIdList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.childMentionIdList.add(elem);
  }

  /**
   * A list of pointers to the "child" EntityMentions of this
   * EntityMention.
   */
  public List<edu.jhu.hlt.concrete.UUID> getChildMentionIdList() {
    return this.childMentionIdList;
  }

  /**
   * A list of pointers to the "child" EntityMentions of this
   * EntityMention.
   */
  public EntityMention setChildMentionIdList(List<edu.jhu.hlt.concrete.UUID> childMentionIdList) {
    this.childMentionIdList = childMentionIdList;
    return this;
  }

  public void unsetChildMentionIdList() {
    this.childMentionIdList = null;
  }

  /** Returns true if field childMentionIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetChildMentionIdList() {
    return this.childMentionIdList != null;
  }

  public void setChildMentionIdListIsSet(boolean value) {
    if (!value) {
      this.childMentionIdList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case TOKENS:
      if (value == null) {
        unsetTokens();
      } else {
        setTokens((edu.jhu.hlt.concrete.TokenRefSequence)value);
      }
      break;

    case ENTITY_TYPE:
      if (value == null) {
        unsetEntityType();
      } else {
        setEntityType((String)value);
      }
      break;

    case PHRASE_TYPE:
      if (value == null) {
        unsetPhraseType();
      } else {
        setPhraseType((String)value);
      }
      break;

    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((Double)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((String)value);
      }
      break;

    case CHILD_MENTION_ID_LIST:
      if (value == null) {
        unsetChildMentionIdList();
      } else {
        setChildMentionIdList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case TOKENS:
      return getTokens();

    case ENTITY_TYPE:
      return getEntityType();

    case PHRASE_TYPE:
      return getPhraseType();

    case CONFIDENCE:
      return getConfidence();

    case TEXT:
      return getText();

    case CHILD_MENTION_ID_LIST:
      return getChildMentionIdList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case TOKENS:
      return isSetTokens();
    case ENTITY_TYPE:
      return isSetEntityType();
    case PHRASE_TYPE:
      return isSetPhraseType();
    case CONFIDENCE:
      return isSetConfidence();
    case TEXT:
      return isSetText();
    case CHILD_MENTION_ID_LIST:
      return isSetChildMentionIdList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EntityMention)
      return this.equals((EntityMention)that);
    return false;
  }

  public boolean equals(EntityMention that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_tokens = true && this.isSetTokens();
    boolean that_present_tokens = true && that.isSetTokens();
    if (this_present_tokens || that_present_tokens) {
      if (!(this_present_tokens && that_present_tokens))
        return false;
      if (!this.tokens.equals(that.tokens))
        return false;
    }

    boolean this_present_entityType = true && this.isSetEntityType();
    boolean that_present_entityType = true && that.isSetEntityType();
    if (this_present_entityType || that_present_entityType) {
      if (!(this_present_entityType && that_present_entityType))
        return false;
      if (!this.entityType.equals(that.entityType))
        return false;
    }

    boolean this_present_phraseType = true && this.isSetPhraseType();
    boolean that_present_phraseType = true && that.isSetPhraseType();
    if (this_present_phraseType || that_present_phraseType) {
      if (!(this_present_phraseType && that_present_phraseType))
        return false;
      if (!this.phraseType.equals(that.phraseType))
        return false;
    }

    boolean this_present_confidence = true && this.isSetConfidence();
    boolean that_present_confidence = true && that.isSetConfidence();
    if (this_present_confidence || that_present_confidence) {
      if (!(this_present_confidence && that_present_confidence))
        return false;
      if (this.confidence != that.confidence)
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_childMentionIdList = true && this.isSetChildMentionIdList();
    boolean that_present_childMentionIdList = true && that.isSetChildMentionIdList();
    if (this_present_childMentionIdList || that_present_childMentionIdList) {
      if (!(this_present_childMentionIdList && that_present_childMentionIdList))
        return false;
      if (!this.childMentionIdList.equals(that.childMentionIdList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uuid = true && (isSetUuid());
    list.add(present_uuid);
    if (present_uuid)
      list.add(uuid);

    boolean present_tokens = true && (isSetTokens());
    list.add(present_tokens);
    if (present_tokens)
      list.add(tokens);

    boolean present_entityType = true && (isSetEntityType());
    list.add(present_entityType);
    if (present_entityType)
      list.add(entityType);

    boolean present_phraseType = true && (isSetPhraseType());
    list.add(present_phraseType);
    if (present_phraseType)
      list.add(phraseType);

    boolean present_confidence = true && (isSetConfidence());
    list.add(present_confidence);
    if (present_confidence)
      list.add(confidence);

    boolean present_text = true && (isSetText());
    list.add(present_text);
    if (present_text)
      list.add(text);

    boolean present_childMentionIdList = true && (isSetChildMentionIdList());
    list.add(present_childMentionIdList);
    if (present_childMentionIdList)
      list.add(childMentionIdList);

    return list.hashCode();
  }

  @Override
  public int compareTo(EntityMention other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokens()).compareTo(other.isSetTokens());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokens()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokens, other.tokens);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntityType()).compareTo(other.isSetEntityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityType, other.entityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhraseType()).compareTo(other.isSetPhraseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhraseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phraseType, other.phraseType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfidence()).compareTo(other.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, other.confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildMentionIdList()).compareTo(other.isSetChildMentionIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildMentionIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childMentionIdList, other.childMentionIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EntityMention(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokens:");
    if (this.tokens == null) {
      sb.append("null");
    } else {
      sb.append(this.tokens);
    }
    first = false;
    if (isSetEntityType()) {
      if (!first) sb.append(", ");
      sb.append("entityType:");
      if (this.entityType == null) {
        sb.append("null");
      } else {
        sb.append(this.entityType);
      }
      first = false;
    }
    if (isSetPhraseType()) {
      if (!first) sb.append(", ");
      sb.append("phraseType:");
      if (this.phraseType == null) {
        sb.append("null");
      } else {
        sb.append(this.phraseType);
      }
      first = false;
    }
    if (isSetConfidence()) {
      if (!first) sb.append(", ");
      sb.append("confidence:");
      sb.append(this.confidence);
      first = false;
    }
    if (isSetText()) {
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetChildMentionIdList()) {
      if (!first) sb.append(", ");
      sb.append("childMentionIdList:");
      if (this.childMentionIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.childMentionIdList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (tokens == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tokens' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uuid != null) {
      uuid.validate();
    }
    if (tokens != null) {
      tokens.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EntityMentionStandardSchemeFactory implements SchemeFactory {
    public EntityMentionStandardScheme getScheme() {
      return new EntityMentionStandardScheme();
    }
  }

  private static class EntityMentionStandardScheme extends StandardScheme<EntityMention> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EntityMention struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uuid = new edu.jhu.hlt.concrete.UUID();
              struct.uuid.read(iprot);
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOKENS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokens = new edu.jhu.hlt.concrete.TokenRefSequence();
              struct.tokens.read(iprot);
              struct.setTokensIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENTITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entityType = iprot.readString();
              struct.setEntityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PHRASE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phraseType = iprot.readString();
              struct.setPhraseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence = iprot.readDouble();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHILD_MENTION_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.childMentionIdList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list24.size);
                edu.jhu.hlt.concrete.UUID _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new edu.jhu.hlt.concrete.UUID();
                  _elem25.read(iprot);
                  struct.childMentionIdList.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setChildMentionIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EntityMention struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        struct.uuid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.tokens != null) {
        oprot.writeFieldBegin(TOKENS_FIELD_DESC);
        struct.tokens.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.entityType != null) {
        if (struct.isSetEntityType()) {
          oprot.writeFieldBegin(ENTITY_TYPE_FIELD_DESC);
          oprot.writeString(struct.entityType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.phraseType != null) {
        if (struct.isSetPhraseType()) {
          oprot.writeFieldBegin(PHRASE_TYPE_FIELD_DESC);
          oprot.writeString(struct.phraseType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConfidence()) {
        oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.confidence);
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        if (struct.isSetText()) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
      }
      if (struct.childMentionIdList != null) {
        if (struct.isSetChildMentionIdList()) {
          oprot.writeFieldBegin(CHILD_MENTION_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.childMentionIdList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter27 : struct.childMentionIdList)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EntityMentionTupleSchemeFactory implements SchemeFactory {
    public EntityMentionTupleScheme getScheme() {
      return new EntityMentionTupleScheme();
    }
  }

  private static class EntityMentionTupleScheme extends TupleScheme<EntityMention> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EntityMention struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.uuid.write(oprot);
      struct.tokens.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetEntityType()) {
        optionals.set(0);
      }
      if (struct.isSetPhraseType()) {
        optionals.set(1);
      }
      if (struct.isSetConfidence()) {
        optionals.set(2);
      }
      if (struct.isSetText()) {
        optionals.set(3);
      }
      if (struct.isSetChildMentionIdList()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetEntityType()) {
        oprot.writeString(struct.entityType);
      }
      if (struct.isSetPhraseType()) {
        oprot.writeString(struct.phraseType);
      }
      if (struct.isSetConfidence()) {
        oprot.writeDouble(struct.confidence);
      }
      if (struct.isSetText()) {
        oprot.writeString(struct.text);
      }
      if (struct.isSetChildMentionIdList()) {
        {
          oprot.writeI32(struct.childMentionIdList.size());
          for (edu.jhu.hlt.concrete.UUID _iter28 : struct.childMentionIdList)
          {
            _iter28.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EntityMention struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuid = new edu.jhu.hlt.concrete.UUID();
      struct.uuid.read(iprot);
      struct.setUuidIsSet(true);
      struct.tokens = new edu.jhu.hlt.concrete.TokenRefSequence();
      struct.tokens.read(iprot);
      struct.setTokensIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.entityType = iprot.readString();
        struct.setEntityTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.phraseType = iprot.readString();
        struct.setPhraseTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.confidence = iprot.readDouble();
        struct.setConfidenceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.text = iprot.readString();
        struct.setTextIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.childMentionIdList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list29.size);
          edu.jhu.hlt.concrete.UUID _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new edu.jhu.hlt.concrete.UUID();
            _elem30.read(iprot);
            struct.childMentionIdList.add(_elem30);
          }
        }
        struct.setChildMentionIdListIsSet(true);
      }
    }
  }

}

