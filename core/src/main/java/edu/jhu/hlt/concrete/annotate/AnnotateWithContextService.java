/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete.annotate;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class AnnotateWithContextService {

  /**
   * A service that provides an alternative to Annotate,
   * with the ability to pass along an additional Context
   * parameter that conveys additional information about the
   * Communication.
   */
  public interface Iface extends edu.jhu.hlt.concrete.services.Service.Iface {

    /**
     * Takes a Communication and a Context as input
     * and returns a new one as output.
     * 
     * It is up to the implementing service to verify that
     * the input communication is valid, as well as interpret
     * the Context in an appropriate manner.
     * 
     * Can throw a ConcreteThriftException upon error
     * (invalid input, analytic exception, etc.).
     * 
     * @param original
     * @param context
     */
    public edu.jhu.hlt.concrete.Communication annotate(edu.jhu.hlt.concrete.Communication original, edu.jhu.hlt.concrete.Context context) throws edu.jhu.hlt.concrete.services.ConcreteThriftException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends edu.jhu.hlt.concrete.services.Service .AsyncIface {

    public void annotate(edu.jhu.hlt.concrete.Communication original, edu.jhu.hlt.concrete.Context context, org.apache.thrift.async.AsyncMethodCallback<edu.jhu.hlt.concrete.Communication> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends edu.jhu.hlt.concrete.services.Service.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public edu.jhu.hlt.concrete.Communication annotate(edu.jhu.hlt.concrete.Communication original, edu.jhu.hlt.concrete.Context context) throws edu.jhu.hlt.concrete.services.ConcreteThriftException, org.apache.thrift.TException
    {
      send_annotate(original, context);
      return recv_annotate();
    }

    public void send_annotate(edu.jhu.hlt.concrete.Communication original, edu.jhu.hlt.concrete.Context context) throws org.apache.thrift.TException
    {
      annotate_args args = new annotate_args();
      args.setOriginal(original);
      args.setContext(context);
      sendBase("annotate", args);
    }

    public edu.jhu.hlt.concrete.Communication recv_annotate() throws edu.jhu.hlt.concrete.services.ConcreteThriftException, org.apache.thrift.TException
    {
      annotate_result result = new annotate_result();
      receiveBase(result, "annotate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "annotate failed: unknown result");
    }

  }
  public static class AsyncClient extends edu.jhu.hlt.concrete.services.Service.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void annotate(edu.jhu.hlt.concrete.Communication original, edu.jhu.hlt.concrete.Context context, org.apache.thrift.async.AsyncMethodCallback<edu.jhu.hlt.concrete.Communication> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      annotate_call method_call = new annotate_call(original, context, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class annotate_call extends org.apache.thrift.async.TAsyncMethodCall<edu.jhu.hlt.concrete.Communication> {
      private edu.jhu.hlt.concrete.Communication original;
      private edu.jhu.hlt.concrete.Context context;
      public annotate_call(edu.jhu.hlt.concrete.Communication original, edu.jhu.hlt.concrete.Context context, org.apache.thrift.async.AsyncMethodCallback<edu.jhu.hlt.concrete.Communication> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.original = original;
        this.context = context;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("annotate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        annotate_args args = new annotate_args();
        args.setOriginal(original);
        args.setContext(context);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public edu.jhu.hlt.concrete.Communication getResult() throws edu.jhu.hlt.concrete.services.ConcreteThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_annotate();
      }
    }

  }

  public static class Processor<I extends Iface> extends edu.jhu.hlt.concrete.services.Service.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("annotate", new annotate());
      return processMap;
    }

    public static class annotate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, annotate_args> {
      public annotate() {
        super("annotate");
      }

      public annotate_args getEmptyArgsInstance() {
        return new annotate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public annotate_result getResult(I iface, annotate_args args) throws org.apache.thrift.TException {
        annotate_result result = new annotate_result();
        try {
          result.success = iface.annotate(args.original, args.context);
        } catch (edu.jhu.hlt.concrete.services.ConcreteThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends edu.jhu.hlt.concrete.services.Service.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("annotate", new annotate());
      return processMap;
    }

    public static class annotate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, annotate_args, edu.jhu.hlt.concrete.Communication> {
      public annotate() {
        super("annotate");
      }

      public annotate_args getEmptyArgsInstance() {
        return new annotate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<edu.jhu.hlt.concrete.Communication> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<edu.jhu.hlt.concrete.Communication>() { 
          public void onComplete(edu.jhu.hlt.concrete.Communication o) {
            annotate_result result = new annotate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            annotate_result result = new annotate_result();
            if (e instanceof edu.jhu.hlt.concrete.services.ConcreteThriftException) {
              result.ex = (edu.jhu.hlt.concrete.services.ConcreteThriftException) e;
              result.setExIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, annotate_args args, org.apache.thrift.async.AsyncMethodCallback<edu.jhu.hlt.concrete.Communication> resultHandler) throws org.apache.thrift.TException {
        iface.annotate(args.original, args.context,resultHandler);
      }
    }

  }

  public static class annotate_args implements org.apache.thrift.TBase<annotate_args, annotate_args._Fields>, java.io.Serializable, Cloneable, Comparable<annotate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("annotate_args");

    private static final org.apache.thrift.protocol.TField ORIGINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("original", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new annotate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new annotate_argsTupleSchemeFactory();

    private edu.jhu.hlt.concrete.Communication original; // required
    private edu.jhu.hlt.concrete.Context context; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORIGINAL((short)1, "original"),
      CONTEXT((short)2, "context");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORIGINAL
            return ORIGINAL;
          case 2: // CONTEXT
            return CONTEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORIGINAL, new org.apache.thrift.meta_data.FieldMetaData("original", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.Communication.class)));
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.Context.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(annotate_args.class, metaDataMap);
    }

    public annotate_args() {
    }

    public annotate_args(
      edu.jhu.hlt.concrete.Communication original,
      edu.jhu.hlt.concrete.Context context)
    {
      this();
      this.original = original;
      this.context = context;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public annotate_args(annotate_args other) {
      if (other.isSetOriginal()) {
        this.original = new edu.jhu.hlt.concrete.Communication(other.original);
      }
      if (other.isSetContext()) {
        this.context = new edu.jhu.hlt.concrete.Context(other.context);
      }
    }

    public annotate_args deepCopy() {
      return new annotate_args(this);
    }

    @Override
    public void clear() {
      this.original = null;
      this.context = null;
    }

    public edu.jhu.hlt.concrete.Communication getOriginal() {
      return this.original;
    }

    public annotate_args setOriginal(edu.jhu.hlt.concrete.Communication original) {
      this.original = original;
      return this;
    }

    public void unsetOriginal() {
      this.original = null;
    }

    /** Returns true if field original is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginal() {
      return this.original != null;
    }

    public void setOriginalIsSet(boolean value) {
      if (!value) {
        this.original = null;
      }
    }

    public edu.jhu.hlt.concrete.Context getContext() {
      return this.context;
    }

    public annotate_args setContext(edu.jhu.hlt.concrete.Context context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ORIGINAL:
        if (value == null) {
          unsetOriginal();
        } else {
          setOriginal((edu.jhu.hlt.concrete.Communication)value);
        }
        break;

      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((edu.jhu.hlt.concrete.Context)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ORIGINAL:
        return getOriginal();

      case CONTEXT:
        return getContext();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ORIGINAL:
        return isSetOriginal();
      case CONTEXT:
        return isSetContext();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof annotate_args)
        return this.equals((annotate_args)that);
      return false;
    }

    public boolean equals(annotate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_original = true && this.isSetOriginal();
      boolean that_present_original = true && that.isSetOriginal();
      if (this_present_original || that_present_original) {
        if (!(this_present_original && that_present_original))
          return false;
        if (!this.original.equals(that.original))
          return false;
      }

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOriginal()) ? 131071 : 524287);
      if (isSetOriginal())
        hashCode = hashCode * 8191 + original.hashCode();

      hashCode = hashCode * 8191 + ((isSetContext()) ? 131071 : 524287);
      if (isSetContext())
        hashCode = hashCode * 8191 + context.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(annotate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOriginal()).compareTo(other.isSetOriginal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.original, other.original);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContext()).compareTo(other.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, other.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("annotate_args(");
      boolean first = true;

      sb.append("original:");
      if (this.original == null) {
        sb.append("null");
      } else {
        sb.append(this.original);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (original != null) {
        original.validate();
      }
      if (context != null) {
        context.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class annotate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public annotate_argsStandardScheme getScheme() {
        return new annotate_argsStandardScheme();
      }
    }

    private static class annotate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<annotate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, annotate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORIGINAL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.original = new edu.jhu.hlt.concrete.Communication();
                struct.original.read(iprot);
                struct.setOriginalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.context = new edu.jhu.hlt.concrete.Context();
                struct.context.read(iprot);
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, annotate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.original != null) {
          oprot.writeFieldBegin(ORIGINAL_FIELD_DESC);
          struct.original.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          struct.context.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class annotate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public annotate_argsTupleScheme getScheme() {
        return new annotate_argsTupleScheme();
      }
    }

    private static class annotate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<annotate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, annotate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOriginal()) {
          optionals.set(0);
        }
        if (struct.isSetContext()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOriginal()) {
          struct.original.write(oprot);
        }
        if (struct.isSetContext()) {
          struct.context.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, annotate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.original = new edu.jhu.hlt.concrete.Communication();
          struct.original.read(iprot);
          struct.setOriginalIsSet(true);
        }
        if (incoming.get(1)) {
          struct.context = new edu.jhu.hlt.concrete.Context();
          struct.context.read(iprot);
          struct.setContextIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class annotate_result implements org.apache.thrift.TBase<annotate_result, annotate_result._Fields>, java.io.Serializable, Cloneable, Comparable<annotate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("annotate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new annotate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new annotate_resultTupleSchemeFactory();

    private edu.jhu.hlt.concrete.Communication success; // required
    private edu.jhu.hlt.concrete.services.ConcreteThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.Communication.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.services.ConcreteThriftException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(annotate_result.class, metaDataMap);
    }

    public annotate_result() {
    }

    public annotate_result(
      edu.jhu.hlt.concrete.Communication success,
      edu.jhu.hlt.concrete.services.ConcreteThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public annotate_result(annotate_result other) {
      if (other.isSetSuccess()) {
        this.success = new edu.jhu.hlt.concrete.Communication(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new edu.jhu.hlt.concrete.services.ConcreteThriftException(other.ex);
      }
    }

    public annotate_result deepCopy() {
      return new annotate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public edu.jhu.hlt.concrete.Communication getSuccess() {
      return this.success;
    }

    public annotate_result setSuccess(edu.jhu.hlt.concrete.Communication success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public edu.jhu.hlt.concrete.services.ConcreteThriftException getEx() {
      return this.ex;
    }

    public annotate_result setEx(edu.jhu.hlt.concrete.services.ConcreteThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((edu.jhu.hlt.concrete.Communication)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((edu.jhu.hlt.concrete.services.ConcreteThriftException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof annotate_result)
        return this.equals((annotate_result)that);
      return false;
    }

    public boolean equals(annotate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEx()) ? 131071 : 524287);
      if (isSetEx())
        hashCode = hashCode * 8191 + ex.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(annotate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("annotate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class annotate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public annotate_resultStandardScheme getScheme() {
        return new annotate_resultStandardScheme();
      }
    }

    private static class annotate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<annotate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, annotate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new edu.jhu.hlt.concrete.Communication();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new edu.jhu.hlt.concrete.services.ConcreteThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, annotate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class annotate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public annotate_resultTupleScheme getScheme() {
        return new annotate_resultTupleScheme();
      }
    }

    private static class annotate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<annotate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, annotate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, annotate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new edu.jhu.hlt.concrete.Communication();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new edu.jhu.hlt.concrete.services.ConcreteThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
