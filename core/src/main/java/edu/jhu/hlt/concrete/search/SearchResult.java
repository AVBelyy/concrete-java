/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Single wrapper for results from all the various Search* services.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class SearchResult implements org.apache.thrift.TBase<SearchResult, SearchResult._Fields>, java.io.Serializable, Cloneable, Comparable<SearchResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchResult");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SEARCH_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("searchQuery", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SEARCH_RESULT_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("searchResultItems", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchResultTupleSchemeFactory());
  }

  private edu.jhu.hlt.concrete.UUID uuid; // required
  private SearchQuery searchQuery; // required
  private List<SearchResultItem> searchResultItems; // optional
  private edu.jhu.hlt.concrete.AnnotationMetadata metadata; // optional
  private String lang; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Unique identifier for the results of this search.
     */
    UUID((short)1, "uuid"),
    /**
     * The query that led to this result.
     * Useful for capturing feedback or building training data.
     */
    SEARCH_QUERY((short)2, "searchQuery"),
    /**
     * The list is assumed sorted best to worst, which should be
     * reflected by the values contained in the score field of each
     * SearchResult, if that field is populated.
     */
    SEARCH_RESULT_ITEMS((short)3, "searchResultItems"),
    /**
     * The system that provided the response: likely use case for
     * populating this field is for building training data.  Presumably
     * a system will not need/want to return this object in live use.
     */
    METADATA((short)4, "metadata"),
    /**
     * The dominant language of the search results.
     * Use ISO 639-2/T three letter codes.
     * Search providers should set this when possible to support downstream processing.
     * Do not set if it is not known.
     * If multilingual, use the string "multilingual".
     */
    LANG((short)5, "lang");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // SEARCH_QUERY
          return SEARCH_QUERY;
        case 3: // SEARCH_RESULT_ITEMS
          return SEARCH_RESULT_ITEMS;
        case 4: // METADATA
          return METADATA;
        case 5: // LANG
          return LANG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SEARCH_RESULT_ITEMS,_Fields.METADATA,_Fields.LANG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.SEARCH_QUERY, new org.apache.thrift.meta_data.FieldMetaData("searchQuery", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchQuery.class)));
    tmpMap.put(_Fields.SEARCH_RESULT_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("searchResultItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchResultItem.class))));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.AnnotationMetadata.class)));
    tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchResult.class, metaDataMap);
  }

  public SearchResult() {
  }

  public SearchResult(
    edu.jhu.hlt.concrete.UUID uuid,
    SearchQuery searchQuery)
  {
    this();
    this.uuid = uuid;
    this.searchQuery = searchQuery;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchResult(SearchResult other) {
    if (other.isSetUuid()) {
      this.uuid = new edu.jhu.hlt.concrete.UUID(other.uuid);
    }
    if (other.isSetSearchQuery()) {
      this.searchQuery = new SearchQuery(other.searchQuery);
    }
    if (other.isSetSearchResultItems()) {
      List<SearchResultItem> __this__searchResultItems = new ArrayList<SearchResultItem>(other.searchResultItems.size());
      for (SearchResultItem other_element : other.searchResultItems) {
        __this__searchResultItems.add(new SearchResultItem(other_element));
      }
      this.searchResultItems = __this__searchResultItems;
    }
    if (other.isSetMetadata()) {
      this.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata(other.metadata);
    }
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
  }

  public SearchResult deepCopy() {
    return new SearchResult(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.searchQuery = null;
    this.searchResultItems = null;
    this.metadata = null;
    this.lang = null;
  }

  /**
   * Unique identifier for the results of this search.
   */
  public edu.jhu.hlt.concrete.UUID getUuid() {
    return this.uuid;
  }

  /**
   * Unique identifier for the results of this search.
   */
  public SearchResult setUuid(edu.jhu.hlt.concrete.UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  /**
   * The query that led to this result.
   * Useful for capturing feedback or building training data.
   */
  public SearchQuery getSearchQuery() {
    return this.searchQuery;
  }

  /**
   * The query that led to this result.
   * Useful for capturing feedback or building training data.
   */
  public SearchResult setSearchQuery(SearchQuery searchQuery) {
    this.searchQuery = searchQuery;
    return this;
  }

  public void unsetSearchQuery() {
    this.searchQuery = null;
  }

  /** Returns true if field searchQuery is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchQuery() {
    return this.searchQuery != null;
  }

  public void setSearchQueryIsSet(boolean value) {
    if (!value) {
      this.searchQuery = null;
    }
  }

  public int getSearchResultItemsSize() {
    return (this.searchResultItems == null) ? 0 : this.searchResultItems.size();
  }

  public java.util.Iterator<SearchResultItem> getSearchResultItemsIterator() {
    return (this.searchResultItems == null) ? null : this.searchResultItems.iterator();
  }

  public void addToSearchResultItems(SearchResultItem elem) {
    if (this.searchResultItems == null) {
      this.searchResultItems = new ArrayList<SearchResultItem>();
    }
    this.searchResultItems.add(elem);
  }

  /**
   * The list is assumed sorted best to worst, which should be
   * reflected by the values contained in the score field of each
   * SearchResult, if that field is populated.
   */
  public List<SearchResultItem> getSearchResultItems() {
    return this.searchResultItems;
  }

  /**
   * The list is assumed sorted best to worst, which should be
   * reflected by the values contained in the score field of each
   * SearchResult, if that field is populated.
   */
  public SearchResult setSearchResultItems(List<SearchResultItem> searchResultItems) {
    this.searchResultItems = searchResultItems;
    return this;
  }

  public void unsetSearchResultItems() {
    this.searchResultItems = null;
  }

  /** Returns true if field searchResultItems is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchResultItems() {
    return this.searchResultItems != null;
  }

  public void setSearchResultItemsIsSet(boolean value) {
    if (!value) {
      this.searchResultItems = null;
    }
  }

  /**
   * The system that provided the response: likely use case for
   * populating this field is for building training data.  Presumably
   * a system will not need/want to return this object in live use.
   */
  public edu.jhu.hlt.concrete.AnnotationMetadata getMetadata() {
    return this.metadata;
  }

  /**
   * The system that provided the response: likely use case for
   * populating this field is for building training data.  Presumably
   * a system will not need/want to return this object in live use.
   */
  public SearchResult setMetadata(edu.jhu.hlt.concrete.AnnotationMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  /**
   * The dominant language of the search results.
   * Use ISO 639-2/T three letter codes.
   * Search providers should set this when possible to support downstream processing.
   * Do not set if it is not known.
   * If multilingual, use the string "multilingual".
   */
  public String getLang() {
    return this.lang;
  }

  /**
   * The dominant language of the search results.
   * Use ISO 639-2/T three letter codes.
   * Search providers should set this when possible to support downstream processing.
   * Do not set if it is not known.
   * If multilingual, use the string "multilingual".
   */
  public SearchResult setLang(String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been assigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case SEARCH_QUERY:
      if (value == null) {
        unsetSearchQuery();
      } else {
        setSearchQuery((SearchQuery)value);
      }
      break;

    case SEARCH_RESULT_ITEMS:
      if (value == null) {
        unsetSearchResultItems();
      } else {
        setSearchResultItems((List<SearchResultItem>)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((edu.jhu.hlt.concrete.AnnotationMetadata)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case SEARCH_QUERY:
      return getSearchQuery();

    case SEARCH_RESULT_ITEMS:
      return getSearchResultItems();

    case METADATA:
      return getMetadata();

    case LANG:
      return getLang();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case SEARCH_QUERY:
      return isSetSearchQuery();
    case SEARCH_RESULT_ITEMS:
      return isSetSearchResultItems();
    case METADATA:
      return isSetMetadata();
    case LANG:
      return isSetLang();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchResult)
      return this.equals((SearchResult)that);
    return false;
  }

  public boolean equals(SearchResult that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_searchQuery = true && this.isSetSearchQuery();
    boolean that_present_searchQuery = true && that.isSetSearchQuery();
    if (this_present_searchQuery || that_present_searchQuery) {
      if (!(this_present_searchQuery && that_present_searchQuery))
        return false;
      if (!this.searchQuery.equals(that.searchQuery))
        return false;
    }

    boolean this_present_searchResultItems = true && this.isSetSearchResultItems();
    boolean that_present_searchResultItems = true && that.isSetSearchResultItems();
    if (this_present_searchResultItems || that_present_searchResultItems) {
      if (!(this_present_searchResultItems && that_present_searchResultItems))
        return false;
      if (!this.searchResultItems.equals(that.searchResultItems))
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uuid = true && (isSetUuid());
    list.add(present_uuid);
    if (present_uuid)
      list.add(uuid);

    boolean present_searchQuery = true && (isSetSearchQuery());
    list.add(present_searchQuery);
    if (present_searchQuery)
      list.add(searchQuery);

    boolean present_searchResultItems = true && (isSetSearchResultItems());
    list.add(present_searchResultItems);
    if (present_searchResultItems)
      list.add(searchResultItems);

    boolean present_metadata = true && (isSetMetadata());
    list.add(present_metadata);
    if (present_metadata)
      list.add(metadata);

    boolean present_lang = true && (isSetLang());
    list.add(present_lang);
    if (present_lang)
      list.add(lang);

    return list.hashCode();
  }

  @Override
  public int compareTo(SearchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchQuery()).compareTo(other.isSetSearchQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchQuery, other.searchQuery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchResultItems()).compareTo(other.isSetSearchResultItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchResultItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchResultItems, other.searchResultItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLang()).compareTo(other.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, other.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchResult(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchQuery:");
    if (this.searchQuery == null) {
      sb.append("null");
    } else {
      sb.append(this.searchQuery);
    }
    first = false;
    if (isSetSearchResultItems()) {
      if (!first) sb.append(", ");
      sb.append("searchResultItems:");
      if (this.searchResultItems == null) {
        sb.append("null");
      } else {
        sb.append(this.searchResultItems);
      }
      first = false;
    }
    if (isSetMetadata()) {
      if (!first) sb.append(", ");
      sb.append("metadata:");
      if (this.metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.metadata);
      }
      first = false;
    }
    if (isSetLang()) {
      if (!first) sb.append(", ");
      sb.append("lang:");
      if (this.lang == null) {
        sb.append("null");
      } else {
        sb.append(this.lang);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (searchQuery == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'searchQuery' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uuid != null) {
      uuid.validate();
    }
    if (searchQuery != null) {
      searchQuery.validate();
    }
    if (metadata != null) {
      metadata.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchResultStandardSchemeFactory implements SchemeFactory {
    public SearchResultStandardScheme getScheme() {
      return new SearchResultStandardScheme();
    }
  }

  private static class SearchResultStandardScheme extends StandardScheme<SearchResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uuid = new edu.jhu.hlt.concrete.UUID();
              struct.uuid.read(iprot);
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEARCH_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.searchQuery = new SearchQuery();
              struct.searchQuery.read(iprot);
              struct.setSearchQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEARCH_RESULT_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.searchResultItems = new ArrayList<SearchResultItem>(_list24.size);
                SearchResultItem _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new SearchResultItem();
                  _elem25.read(iprot);
                  struct.searchResultItems.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setSearchResultItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata();
              struct.metadata.read(iprot);
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lang = iprot.readString();
              struct.setLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        struct.uuid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.searchQuery != null) {
        oprot.writeFieldBegin(SEARCH_QUERY_FIELD_DESC);
        struct.searchQuery.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.searchResultItems != null) {
        if (struct.isSetSearchResultItems()) {
          oprot.writeFieldBegin(SEARCH_RESULT_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.searchResultItems.size()));
            for (SearchResultItem _iter27 : struct.searchResultItems)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.metadata != null) {
        if (struct.isSetMetadata()) {
          oprot.writeFieldBegin(METADATA_FIELD_DESC);
          struct.metadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lang != null) {
        if (struct.isSetLang()) {
          oprot.writeFieldBegin(LANG_FIELD_DESC);
          oprot.writeString(struct.lang);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchResultTupleSchemeFactory implements SchemeFactory {
    public SearchResultTupleScheme getScheme() {
      return new SearchResultTupleScheme();
    }
  }

  private static class SearchResultTupleScheme extends TupleScheme<SearchResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.uuid.write(oprot);
      struct.searchQuery.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetSearchResultItems()) {
        optionals.set(0);
      }
      if (struct.isSetMetadata()) {
        optionals.set(1);
      }
      if (struct.isSetLang()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSearchResultItems()) {
        {
          oprot.writeI32(struct.searchResultItems.size());
          for (SearchResultItem _iter28 : struct.searchResultItems)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetMetadata()) {
        struct.metadata.write(oprot);
      }
      if (struct.isSetLang()) {
        oprot.writeString(struct.lang);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuid = new edu.jhu.hlt.concrete.UUID();
      struct.uuid.read(iprot);
      struct.setUuidIsSet(true);
      struct.searchQuery = new SearchQuery();
      struct.searchQuery.read(iprot);
      struct.setSearchQueryIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.searchResultItems = new ArrayList<SearchResultItem>(_list29.size);
          SearchResultItem _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new SearchResultItem();
            _elem30.read(iprot);
            struct.searchResultItems.add(_elem30);
          }
        }
        struct.setSearchResultItemsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.metadata = new edu.jhu.hlt.concrete.AnnotationMetadata();
        struct.metadata.read(iprot);
        struct.setMetadataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lang = iprot.readString();
        struct.setLangIsSet(true);
      }
    }
  }

}

