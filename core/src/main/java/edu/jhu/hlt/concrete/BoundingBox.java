/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-04")
public class BoundingBox implements org.apache.thrift.TBase<BoundingBox, BoundingBox._Fields>, java.io.Serializable, Cloneable, Comparable<BoundingBox> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BoundingBox");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COORDINATE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("coordinateList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BoundingBoxStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BoundingBoxTupleSchemeFactory());
  }

  private String type; // optional
  private List<TwitterLatLong> coordinateList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    COORDINATE_LIST((short)2, "coordinateList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // COORDINATE_LIST
          return COORDINATE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COORDINATE_LIST, new org.apache.thrift.meta_data.FieldMetaData("coordinateList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TwitterLatLong.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BoundingBox.class, metaDataMap);
  }

  public BoundingBox() {
  }

  public BoundingBox(
    List<TwitterLatLong> coordinateList)
  {
    this();
    this.coordinateList = coordinateList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BoundingBox(BoundingBox other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetCoordinateList()) {
      List<TwitterLatLong> __this__coordinateList = new ArrayList<TwitterLatLong>(other.coordinateList.size());
      for (TwitterLatLong other_element : other.coordinateList) {
        __this__coordinateList.add(new TwitterLatLong(other_element));
      }
      this.coordinateList = __this__coordinateList;
    }
  }

  public BoundingBox deepCopy() {
    return new BoundingBox(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.coordinateList = null;
  }

  public String getType() {
    return this.type;
  }

  public BoundingBox setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getCoordinateListSize() {
    return (this.coordinateList == null) ? 0 : this.coordinateList.size();
  }

  public java.util.Iterator<TwitterLatLong> getCoordinateListIterator() {
    return (this.coordinateList == null) ? null : this.coordinateList.iterator();
  }

  public void addToCoordinateList(TwitterLatLong elem) {
    if (this.coordinateList == null) {
      this.coordinateList = new ArrayList<TwitterLatLong>();
    }
    this.coordinateList.add(elem);
  }

  public List<TwitterLatLong> getCoordinateList() {
    return this.coordinateList;
  }

  public BoundingBox setCoordinateList(List<TwitterLatLong> coordinateList) {
    this.coordinateList = coordinateList;
    return this;
  }

  public void unsetCoordinateList() {
    this.coordinateList = null;
  }

  /** Returns true if field coordinateList is set (has been assigned a value) and false otherwise */
  public boolean isSetCoordinateList() {
    return this.coordinateList != null;
  }

  public void setCoordinateListIsSet(boolean value) {
    if (!value) {
      this.coordinateList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case COORDINATE_LIST:
      if (value == null) {
        unsetCoordinateList();
      } else {
        setCoordinateList((List<TwitterLatLong>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case COORDINATE_LIST:
      return getCoordinateList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case COORDINATE_LIST:
      return isSetCoordinateList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BoundingBox)
      return this.equals((BoundingBox)that);
    return false;
  }

  public boolean equals(BoundingBox that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_coordinateList = true && this.isSetCoordinateList();
    boolean that_present_coordinateList = true && that.isSetCoordinateList();
    if (this_present_coordinateList || that_present_coordinateList) {
      if (!(this_present_coordinateList && that_present_coordinateList))
        return false;
      if (!this.coordinateList.equals(that.coordinateList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_coordinateList = true && (isSetCoordinateList());
    list.add(present_coordinateList);
    if (present_coordinateList)
      list.add(coordinateList);

    return list.hashCode();
  }

  @Override
  public int compareTo(BoundingBox other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoordinateList()).compareTo(other.isSetCoordinateList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoordinateList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coordinateList, other.coordinateList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BoundingBox(");
    boolean first = true;

    if (isSetType()) {
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("coordinateList:");
    if (this.coordinateList == null) {
      sb.append("null");
    } else {
      sb.append(this.coordinateList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (coordinateList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'coordinateList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BoundingBoxStandardSchemeFactory implements SchemeFactory {
    public BoundingBoxStandardScheme getScheme() {
      return new BoundingBoxStandardScheme();
    }
  }

  private static class BoundingBoxStandardScheme extends StandardScheme<BoundingBox> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BoundingBox struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COORDINATE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.coordinateList = new ArrayList<TwitterLatLong>(_list0.size);
                TwitterLatLong _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TwitterLatLong();
                  _elem1.read(iprot);
                  struct.coordinateList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCoordinateListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BoundingBox struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coordinateList != null) {
        oprot.writeFieldBegin(COORDINATE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.coordinateList.size()));
          for (TwitterLatLong _iter3 : struct.coordinateList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BoundingBoxTupleSchemeFactory implements SchemeFactory {
    public BoundingBoxTupleScheme getScheme() {
      return new BoundingBoxTupleScheme();
    }
  }

  private static class BoundingBoxTupleScheme extends TupleScheme<BoundingBox> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BoundingBox struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.coordinateList.size());
        for (TwitterLatLong _iter4 : struct.coordinateList)
        {
          _iter4.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BoundingBox struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.coordinateList = new ArrayList<TwitterLatLong>(_list5.size);
        TwitterLatLong _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new TwitterLatLong();
          _elem6.read(iprot);
          struct.coordinateList.add(_elem6);
        }
      }
      struct.setCoordinateListIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
    }
  }

}

