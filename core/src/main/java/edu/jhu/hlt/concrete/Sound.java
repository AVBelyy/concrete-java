/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A sound wave. A separate optional field is defined for each
 * suppported format. Typically, a Sound object will only define
 * a single field.
 * 
 * Note: we may want to have separate fields for separate channels
 * (left vs right), etc.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class Sound implements org.apache.thrift.TBase<Sound, Sound._Fields>, java.io.Serializable, Cloneable, Comparable<Sound> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sound");

  private static final org.apache.thrift.protocol.TField WAV_FIELD_DESC = new org.apache.thrift.protocol.TField("wav", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MP3_FIELD_DESC = new org.apache.thrift.protocol.TField("mp3", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SPH_FIELD_DESC = new org.apache.thrift.protocol.TField("sph", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SoundStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SoundTupleSchemeFactory();

  private java.nio.ByteBuffer wav; // optional
  private java.nio.ByteBuffer mp3; // optional
  private java.nio.ByteBuffer sph; // optional
  private java.lang.String path; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WAV((short)1, "wav"),
    MP3((short)2, "mp3"),
    SPH((short)3, "sph"),
    /**
     * An absolute path to a file on disk where the sound file can be
     * found. It is assumed that this path will be accessable from any
     * machine that the system is run on (i.e., it should be a shared
     * disk, or possibly a mirrored directory).
     */
    PATH((short)4, "path");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WAV
          return WAV;
        case 2: // MP3
          return MP3;
        case 3: // SPH
          return SPH;
        case 4: // PATH
          return PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.WAV,_Fields.MP3,_Fields.SPH,_Fields.PATH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WAV, new org.apache.thrift.meta_data.FieldMetaData("wav", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.MP3, new org.apache.thrift.meta_data.FieldMetaData("mp3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SPH, new org.apache.thrift.meta_data.FieldMetaData("sph", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sound.class, metaDataMap);
  }

  public Sound() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sound(Sound other) {
    if (other.isSetWav()) {
      this.wav = org.apache.thrift.TBaseHelper.copyBinary(other.wav);
    }
    if (other.isSetMp3()) {
      this.mp3 = org.apache.thrift.TBaseHelper.copyBinary(other.mp3);
    }
    if (other.isSetSph()) {
      this.sph = org.apache.thrift.TBaseHelper.copyBinary(other.sph);
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
  }

  public Sound deepCopy() {
    return new Sound(this);
  }

  @Override
  public void clear() {
    this.wav = null;
    this.mp3 = null;
    this.sph = null;
    this.path = null;
  }

  public byte[] getWav() {
    setWav(org.apache.thrift.TBaseHelper.rightSize(wav));
    return wav == null ? null : wav.array();
  }

  public java.nio.ByteBuffer bufferForWav() {
    return org.apache.thrift.TBaseHelper.copyBinary(wav);
  }

  public Sound setWav(byte[] wav) {
    this.wav = wav == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(wav.clone());
    return this;
  }

  public Sound setWav(java.nio.ByteBuffer wav) {
    this.wav = org.apache.thrift.TBaseHelper.copyBinary(wav);
    return this;
  }

  public void unsetWav() {
    this.wav = null;
  }

  /** Returns true if field wav is set (has been assigned a value) and false otherwise */
  public boolean isSetWav() {
    return this.wav != null;
  }

  public void setWavIsSet(boolean value) {
    if (!value) {
      this.wav = null;
    }
  }

  public byte[] getMp3() {
    setMp3(org.apache.thrift.TBaseHelper.rightSize(mp3));
    return mp3 == null ? null : mp3.array();
  }

  public java.nio.ByteBuffer bufferForMp3() {
    return org.apache.thrift.TBaseHelper.copyBinary(mp3);
  }

  public Sound setMp3(byte[] mp3) {
    this.mp3 = mp3 == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(mp3.clone());
    return this;
  }

  public Sound setMp3(java.nio.ByteBuffer mp3) {
    this.mp3 = org.apache.thrift.TBaseHelper.copyBinary(mp3);
    return this;
  }

  public void unsetMp3() {
    this.mp3 = null;
  }

  /** Returns true if field mp3 is set (has been assigned a value) and false otherwise */
  public boolean isSetMp3() {
    return this.mp3 != null;
  }

  public void setMp3IsSet(boolean value) {
    if (!value) {
      this.mp3 = null;
    }
  }

  public byte[] getSph() {
    setSph(org.apache.thrift.TBaseHelper.rightSize(sph));
    return sph == null ? null : sph.array();
  }

  public java.nio.ByteBuffer bufferForSph() {
    return org.apache.thrift.TBaseHelper.copyBinary(sph);
  }

  public Sound setSph(byte[] sph) {
    this.sph = sph == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(sph.clone());
    return this;
  }

  public Sound setSph(java.nio.ByteBuffer sph) {
    this.sph = org.apache.thrift.TBaseHelper.copyBinary(sph);
    return this;
  }

  public void unsetSph() {
    this.sph = null;
  }

  /** Returns true if field sph is set (has been assigned a value) and false otherwise */
  public boolean isSetSph() {
    return this.sph != null;
  }

  public void setSphIsSet(boolean value) {
    if (!value) {
      this.sph = null;
    }
  }

  /**
   * An absolute path to a file on disk where the sound file can be
   * found. It is assumed that this path will be accessable from any
   * machine that the system is run on (i.e., it should be a shared
   * disk, or possibly a mirrored directory).
   */
  public java.lang.String getPath() {
    return this.path;
  }

  /**
   * An absolute path to a file on disk where the sound file can be
   * found. It is assumed that this path will be accessable from any
   * machine that the system is run on (i.e., it should be a shared
   * disk, or possibly a mirrored directory).
   */
  public Sound setPath(java.lang.String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case WAV:
      if (value == null) {
        unsetWav();
      } else {
        if (value instanceof byte[]) {
          setWav((byte[])value);
        } else {
          setWav((java.nio.ByteBuffer)value);
        }
      }
      break;

    case MP3:
      if (value == null) {
        unsetMp3();
      } else {
        if (value instanceof byte[]) {
          setMp3((byte[])value);
        } else {
          setMp3((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SPH:
      if (value == null) {
        unsetSph();
      } else {
        if (value instanceof byte[]) {
          setSph((byte[])value);
        } else {
          setSph((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WAV:
      return getWav();

    case MP3:
      return getMp3();

    case SPH:
      return getSph();

    case PATH:
      return getPath();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WAV:
      return isSetWav();
    case MP3:
      return isSetMp3();
    case SPH:
      return isSetSph();
    case PATH:
      return isSetPath();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Sound)
      return this.equals((Sound)that);
    return false;
  }

  public boolean equals(Sound that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_wav = true && this.isSetWav();
    boolean that_present_wav = true && that.isSetWav();
    if (this_present_wav || that_present_wav) {
      if (!(this_present_wav && that_present_wav))
        return false;
      if (!this.wav.equals(that.wav))
        return false;
    }

    boolean this_present_mp3 = true && this.isSetMp3();
    boolean that_present_mp3 = true && that.isSetMp3();
    if (this_present_mp3 || that_present_mp3) {
      if (!(this_present_mp3 && that_present_mp3))
        return false;
      if (!this.mp3.equals(that.mp3))
        return false;
    }

    boolean this_present_sph = true && this.isSetSph();
    boolean that_present_sph = true && that.isSetSph();
    if (this_present_sph || that_present_sph) {
      if (!(this_present_sph && that_present_sph))
        return false;
      if (!this.sph.equals(that.sph))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetWav()) ? 131071 : 524287);
    if (isSetWav())
      hashCode = hashCode * 8191 + wav.hashCode();

    hashCode = hashCode * 8191 + ((isSetMp3()) ? 131071 : 524287);
    if (isSetMp3())
      hashCode = hashCode * 8191 + mp3.hashCode();

    hashCode = hashCode * 8191 + ((isSetSph()) ? 131071 : 524287);
    if (isSetSph())
      hashCode = hashCode * 8191 + sph.hashCode();

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Sound other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetWav()).compareTo(other.isSetWav());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWav()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wav, other.wav);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMp3()).compareTo(other.isSetMp3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMp3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mp3, other.mp3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSph()).compareTo(other.isSetSph());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSph()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sph, other.sph);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Sound(");
    boolean first = true;

    if (isSetWav()) {
      sb.append("wav:");
      if (this.wav == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.wav, sb);
      }
      first = false;
    }
    if (isSetMp3()) {
      if (!first) sb.append(", ");
      sb.append("mp3:");
      if (this.mp3 == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.mp3, sb);
      }
      first = false;
    }
    if (isSetSph()) {
      if (!first) sb.append(", ");
      sb.append("sph:");
      if (this.sph == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.sph, sb);
      }
      first = false;
    }
    if (isSetPath()) {
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SoundStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SoundStandardScheme getScheme() {
      return new SoundStandardScheme();
    }
  }

  private static class SoundStandardScheme extends org.apache.thrift.scheme.StandardScheme<Sound> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Sound struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WAV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wav = iprot.readBinary();
              struct.setWavIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MP3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mp3 = iprot.readBinary();
              struct.setMp3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sph = iprot.readBinary();
              struct.setSphIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Sound struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.wav != null) {
        if (struct.isSetWav()) {
          oprot.writeFieldBegin(WAV_FIELD_DESC);
          oprot.writeBinary(struct.wav);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mp3 != null) {
        if (struct.isSetMp3()) {
          oprot.writeFieldBegin(MP3_FIELD_DESC);
          oprot.writeBinary(struct.mp3);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sph != null) {
        if (struct.isSetSph()) {
          oprot.writeFieldBegin(SPH_FIELD_DESC);
          oprot.writeBinary(struct.sph);
          oprot.writeFieldEnd();
        }
      }
      if (struct.path != null) {
        if (struct.isSetPath()) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SoundTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SoundTupleScheme getScheme() {
      return new SoundTupleScheme();
    }
  }

  private static class SoundTupleScheme extends org.apache.thrift.scheme.TupleScheme<Sound> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Sound struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWav()) {
        optionals.set(0);
      }
      if (struct.isSetMp3()) {
        optionals.set(1);
      }
      if (struct.isSetSph()) {
        optionals.set(2);
      }
      if (struct.isSetPath()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetWav()) {
        oprot.writeBinary(struct.wav);
      }
      if (struct.isSetMp3()) {
        oprot.writeBinary(struct.mp3);
      }
      if (struct.isSetSph()) {
        oprot.writeBinary(struct.sph);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Sound struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.wav = iprot.readBinary();
        struct.setWavIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mp3 = iprot.readBinary();
        struct.setMp3IsSet(true);
      }
      if (incoming.get(2)) {
        struct.sph = iprot.readBinary();
        struct.setSphIsSet(true);
      }
      if (incoming.get(3)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

