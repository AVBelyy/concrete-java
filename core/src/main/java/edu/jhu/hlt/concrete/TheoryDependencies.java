/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A struct that holds UUIDs for all theories that a particular
 * annotation was based upon (and presumably requires).
 * 
 * Producers of TheoryDependencies should list all stages that they
 * used in constructing their particular annotation. They do not,
 * however, need to explicitly label *each* stage; they can label
 * only the immediate stage before them.
 * 
 * Examples:
 * 
 * If you are producing a Tokenization, and only used the
 * SentenceSegmentation in order to produce that Tokenization, list
 * only the single SentenceSegmentation UUID in sentenceTheoryList.
 * 
 * In this example, even though the SentenceSegmentation will have
 * a dependency on some SectionSegmentation, it is not necessary
 * for the Tokenization to list the SectionSegmentation UUID as a
 * dependency.
 * 
 * If you are a producer of EntityMentions, and you use two
 * POSTokenTagging and one NERTokenTagging objects, add the UUIDs for
 * the POSTokenTagging objects to posTagTheoryList, and the UUID of
 * the NER TokenTagging to the nerTagTheoryList.
 * 
 * In this example, because multiple annotations influenced the
 * new annotation, they should all be listed as dependencies.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class TheoryDependencies implements org.apache.thrift.TBase<TheoryDependencies, TheoryDependencies._Fields>, java.io.Serializable, Cloneable, Comparable<TheoryDependencies> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TheoryDependencies");

  private static final org.apache.thrift.protocol.TField SECTION_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sectionTheoryList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SENTENCE_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sentenceTheoryList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOKENIZATION_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenizationTheoryList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField POS_TAG_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("posTagTheoryList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField NER_TAG_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("nerTagTheoryList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField LEMMA_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("lemmaTheoryList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField LANG_ID_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("langIdTheoryList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PARSE_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("parseTheoryList", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DEPENDENCY_PARSE_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dependencyParseTheoryList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField TOKEN_ANNOTATION_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenAnnotationTheoryList", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ENTITY_MENTION_SET_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("entityMentionSetTheoryList", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField ENTITY_SET_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("entitySetTheoryList", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField SITUATION_MENTION_SET_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("situationMentionSetTheoryList", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField SITUATION_SET_THEORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("situationSetTheoryList", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField COMMUNICATIONS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("communicationsList", org.apache.thrift.protocol.TType.LIST, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TheoryDependenciesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TheoryDependenciesTupleSchemeFactory());
  }

  private List<edu.jhu.hlt.concrete.UUID> sectionTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> sentenceTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> tokenizationTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> posTagTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> nerTagTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> lemmaTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> langIdTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> parseTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> dependencyParseTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> tokenAnnotationTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> entityMentionSetTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> entitySetTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> situationMentionSetTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> situationSetTheoryList; // optional
  private List<edu.jhu.hlt.concrete.UUID> communicationsList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SECTION_THEORY_LIST((short)1, "sectionTheoryList"),
    SENTENCE_THEORY_LIST((short)2, "sentenceTheoryList"),
    TOKENIZATION_THEORY_LIST((short)3, "tokenizationTheoryList"),
    POS_TAG_THEORY_LIST((short)4, "posTagTheoryList"),
    NER_TAG_THEORY_LIST((short)5, "nerTagTheoryList"),
    LEMMA_THEORY_LIST((short)6, "lemmaTheoryList"),
    LANG_ID_THEORY_LIST((short)7, "langIdTheoryList"),
    PARSE_THEORY_LIST((short)8, "parseTheoryList"),
    DEPENDENCY_PARSE_THEORY_LIST((short)9, "dependencyParseTheoryList"),
    TOKEN_ANNOTATION_THEORY_LIST((short)10, "tokenAnnotationTheoryList"),
    ENTITY_MENTION_SET_THEORY_LIST((short)11, "entityMentionSetTheoryList"),
    ENTITY_SET_THEORY_LIST((short)12, "entitySetTheoryList"),
    SITUATION_MENTION_SET_THEORY_LIST((short)13, "situationMentionSetTheoryList"),
    SITUATION_SET_THEORY_LIST((short)14, "situationSetTheoryList"),
    COMMUNICATIONS_LIST((short)15, "communicationsList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SECTION_THEORY_LIST
          return SECTION_THEORY_LIST;
        case 2: // SENTENCE_THEORY_LIST
          return SENTENCE_THEORY_LIST;
        case 3: // TOKENIZATION_THEORY_LIST
          return TOKENIZATION_THEORY_LIST;
        case 4: // POS_TAG_THEORY_LIST
          return POS_TAG_THEORY_LIST;
        case 5: // NER_TAG_THEORY_LIST
          return NER_TAG_THEORY_LIST;
        case 6: // LEMMA_THEORY_LIST
          return LEMMA_THEORY_LIST;
        case 7: // LANG_ID_THEORY_LIST
          return LANG_ID_THEORY_LIST;
        case 8: // PARSE_THEORY_LIST
          return PARSE_THEORY_LIST;
        case 9: // DEPENDENCY_PARSE_THEORY_LIST
          return DEPENDENCY_PARSE_THEORY_LIST;
        case 10: // TOKEN_ANNOTATION_THEORY_LIST
          return TOKEN_ANNOTATION_THEORY_LIST;
        case 11: // ENTITY_MENTION_SET_THEORY_LIST
          return ENTITY_MENTION_SET_THEORY_LIST;
        case 12: // ENTITY_SET_THEORY_LIST
          return ENTITY_SET_THEORY_LIST;
        case 13: // SITUATION_MENTION_SET_THEORY_LIST
          return SITUATION_MENTION_SET_THEORY_LIST;
        case 14: // SITUATION_SET_THEORY_LIST
          return SITUATION_SET_THEORY_LIST;
        case 15: // COMMUNICATIONS_LIST
          return COMMUNICATIONS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SECTION_THEORY_LIST,_Fields.SENTENCE_THEORY_LIST,_Fields.TOKENIZATION_THEORY_LIST,_Fields.POS_TAG_THEORY_LIST,_Fields.NER_TAG_THEORY_LIST,_Fields.LEMMA_THEORY_LIST,_Fields.LANG_ID_THEORY_LIST,_Fields.PARSE_THEORY_LIST,_Fields.DEPENDENCY_PARSE_THEORY_LIST,_Fields.TOKEN_ANNOTATION_THEORY_LIST,_Fields.ENTITY_MENTION_SET_THEORY_LIST,_Fields.ENTITY_SET_THEORY_LIST,_Fields.SITUATION_MENTION_SET_THEORY_LIST,_Fields.SITUATION_SET_THEORY_LIST,_Fields.COMMUNICATIONS_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SECTION_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("sectionTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.SENTENCE_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("sentenceTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.TOKENIZATION_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("tokenizationTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.POS_TAG_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("posTagTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.NER_TAG_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("nerTagTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.LEMMA_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("lemmaTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.LANG_ID_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("langIdTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.PARSE_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("parseTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.DEPENDENCY_PARSE_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("dependencyParseTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.TOKEN_ANNOTATION_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("tokenAnnotationTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.ENTITY_MENTION_SET_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("entityMentionSetTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.ENTITY_SET_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("entitySetTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.SITUATION_MENTION_SET_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("situationMentionSetTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.SITUATION_SET_THEORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("situationSetTheoryList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.COMMUNICATIONS_LIST, new org.apache.thrift.meta_data.FieldMetaData("communicationsList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TheoryDependencies.class, metaDataMap);
  }

  public TheoryDependencies() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TheoryDependencies(TheoryDependencies other) {
    if (other.isSetSectionTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__sectionTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.sectionTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.sectionTheoryList) {
        __this__sectionTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.sectionTheoryList = __this__sectionTheoryList;
    }
    if (other.isSetSentenceTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__sentenceTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.sentenceTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.sentenceTheoryList) {
        __this__sentenceTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.sentenceTheoryList = __this__sentenceTheoryList;
    }
    if (other.isSetTokenizationTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__tokenizationTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.tokenizationTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.tokenizationTheoryList) {
        __this__tokenizationTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.tokenizationTheoryList = __this__tokenizationTheoryList;
    }
    if (other.isSetPosTagTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__posTagTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.posTagTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.posTagTheoryList) {
        __this__posTagTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.posTagTheoryList = __this__posTagTheoryList;
    }
    if (other.isSetNerTagTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__nerTagTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.nerTagTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.nerTagTheoryList) {
        __this__nerTagTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.nerTagTheoryList = __this__nerTagTheoryList;
    }
    if (other.isSetLemmaTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__lemmaTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.lemmaTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.lemmaTheoryList) {
        __this__lemmaTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.lemmaTheoryList = __this__lemmaTheoryList;
    }
    if (other.isSetLangIdTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__langIdTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.langIdTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.langIdTheoryList) {
        __this__langIdTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.langIdTheoryList = __this__langIdTheoryList;
    }
    if (other.isSetParseTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__parseTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.parseTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.parseTheoryList) {
        __this__parseTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.parseTheoryList = __this__parseTheoryList;
    }
    if (other.isSetDependencyParseTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__dependencyParseTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.dependencyParseTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.dependencyParseTheoryList) {
        __this__dependencyParseTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.dependencyParseTheoryList = __this__dependencyParseTheoryList;
    }
    if (other.isSetTokenAnnotationTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__tokenAnnotationTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.tokenAnnotationTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.tokenAnnotationTheoryList) {
        __this__tokenAnnotationTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.tokenAnnotationTheoryList = __this__tokenAnnotationTheoryList;
    }
    if (other.isSetEntityMentionSetTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__entityMentionSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.entityMentionSetTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.entityMentionSetTheoryList) {
        __this__entityMentionSetTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.entityMentionSetTheoryList = __this__entityMentionSetTheoryList;
    }
    if (other.isSetEntitySetTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__entitySetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.entitySetTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.entitySetTheoryList) {
        __this__entitySetTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.entitySetTheoryList = __this__entitySetTheoryList;
    }
    if (other.isSetSituationMentionSetTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__situationMentionSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.situationMentionSetTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.situationMentionSetTheoryList) {
        __this__situationMentionSetTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.situationMentionSetTheoryList = __this__situationMentionSetTheoryList;
    }
    if (other.isSetSituationSetTheoryList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__situationSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.situationSetTheoryList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.situationSetTheoryList) {
        __this__situationSetTheoryList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.situationSetTheoryList = __this__situationSetTheoryList;
    }
    if (other.isSetCommunicationsList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__communicationsList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.communicationsList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.communicationsList) {
        __this__communicationsList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.communicationsList = __this__communicationsList;
    }
  }

  public TheoryDependencies deepCopy() {
    return new TheoryDependencies(this);
  }

  @Override
  public void clear() {
    this.sectionTheoryList = null;
    this.sentenceTheoryList = null;
    this.tokenizationTheoryList = null;
    this.posTagTheoryList = null;
    this.nerTagTheoryList = null;
    this.lemmaTheoryList = null;
    this.langIdTheoryList = null;
    this.parseTheoryList = null;
    this.dependencyParseTheoryList = null;
    this.tokenAnnotationTheoryList = null;
    this.entityMentionSetTheoryList = null;
    this.entitySetTheoryList = null;
    this.situationMentionSetTheoryList = null;
    this.situationSetTheoryList = null;
    this.communicationsList = null;
  }

  public int getSectionTheoryListSize() {
    return (this.sectionTheoryList == null) ? 0 : this.sectionTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getSectionTheoryListIterator() {
    return (this.sectionTheoryList == null) ? null : this.sectionTheoryList.iterator();
  }

  public void addToSectionTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.sectionTheoryList == null) {
      this.sectionTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.sectionTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getSectionTheoryList() {
    return this.sectionTheoryList;
  }

  public TheoryDependencies setSectionTheoryList(List<edu.jhu.hlt.concrete.UUID> sectionTheoryList) {
    this.sectionTheoryList = sectionTheoryList;
    return this;
  }

  public void unsetSectionTheoryList() {
    this.sectionTheoryList = null;
  }

  /** Returns true if field sectionTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetSectionTheoryList() {
    return this.sectionTheoryList != null;
  }

  public void setSectionTheoryListIsSet(boolean value) {
    if (!value) {
      this.sectionTheoryList = null;
    }
  }

  public int getSentenceTheoryListSize() {
    return (this.sentenceTheoryList == null) ? 0 : this.sentenceTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getSentenceTheoryListIterator() {
    return (this.sentenceTheoryList == null) ? null : this.sentenceTheoryList.iterator();
  }

  public void addToSentenceTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.sentenceTheoryList == null) {
      this.sentenceTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.sentenceTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getSentenceTheoryList() {
    return this.sentenceTheoryList;
  }

  public TheoryDependencies setSentenceTheoryList(List<edu.jhu.hlt.concrete.UUID> sentenceTheoryList) {
    this.sentenceTheoryList = sentenceTheoryList;
    return this;
  }

  public void unsetSentenceTheoryList() {
    this.sentenceTheoryList = null;
  }

  /** Returns true if field sentenceTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetSentenceTheoryList() {
    return this.sentenceTheoryList != null;
  }

  public void setSentenceTheoryListIsSet(boolean value) {
    if (!value) {
      this.sentenceTheoryList = null;
    }
  }

  public int getTokenizationTheoryListSize() {
    return (this.tokenizationTheoryList == null) ? 0 : this.tokenizationTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getTokenizationTheoryListIterator() {
    return (this.tokenizationTheoryList == null) ? null : this.tokenizationTheoryList.iterator();
  }

  public void addToTokenizationTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.tokenizationTheoryList == null) {
      this.tokenizationTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.tokenizationTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getTokenizationTheoryList() {
    return this.tokenizationTheoryList;
  }

  public TheoryDependencies setTokenizationTheoryList(List<edu.jhu.hlt.concrete.UUID> tokenizationTheoryList) {
    this.tokenizationTheoryList = tokenizationTheoryList;
    return this;
  }

  public void unsetTokenizationTheoryList() {
    this.tokenizationTheoryList = null;
  }

  /** Returns true if field tokenizationTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenizationTheoryList() {
    return this.tokenizationTheoryList != null;
  }

  public void setTokenizationTheoryListIsSet(boolean value) {
    if (!value) {
      this.tokenizationTheoryList = null;
    }
  }

  public int getPosTagTheoryListSize() {
    return (this.posTagTheoryList == null) ? 0 : this.posTagTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getPosTagTheoryListIterator() {
    return (this.posTagTheoryList == null) ? null : this.posTagTheoryList.iterator();
  }

  public void addToPosTagTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.posTagTheoryList == null) {
      this.posTagTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.posTagTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getPosTagTheoryList() {
    return this.posTagTheoryList;
  }

  public TheoryDependencies setPosTagTheoryList(List<edu.jhu.hlt.concrete.UUID> posTagTheoryList) {
    this.posTagTheoryList = posTagTheoryList;
    return this;
  }

  public void unsetPosTagTheoryList() {
    this.posTagTheoryList = null;
  }

  /** Returns true if field posTagTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetPosTagTheoryList() {
    return this.posTagTheoryList != null;
  }

  public void setPosTagTheoryListIsSet(boolean value) {
    if (!value) {
      this.posTagTheoryList = null;
    }
  }

  public int getNerTagTheoryListSize() {
    return (this.nerTagTheoryList == null) ? 0 : this.nerTagTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getNerTagTheoryListIterator() {
    return (this.nerTagTheoryList == null) ? null : this.nerTagTheoryList.iterator();
  }

  public void addToNerTagTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.nerTagTheoryList == null) {
      this.nerTagTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.nerTagTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getNerTagTheoryList() {
    return this.nerTagTheoryList;
  }

  public TheoryDependencies setNerTagTheoryList(List<edu.jhu.hlt.concrete.UUID> nerTagTheoryList) {
    this.nerTagTheoryList = nerTagTheoryList;
    return this;
  }

  public void unsetNerTagTheoryList() {
    this.nerTagTheoryList = null;
  }

  /** Returns true if field nerTagTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetNerTagTheoryList() {
    return this.nerTagTheoryList != null;
  }

  public void setNerTagTheoryListIsSet(boolean value) {
    if (!value) {
      this.nerTagTheoryList = null;
    }
  }

  public int getLemmaTheoryListSize() {
    return (this.lemmaTheoryList == null) ? 0 : this.lemmaTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getLemmaTheoryListIterator() {
    return (this.lemmaTheoryList == null) ? null : this.lemmaTheoryList.iterator();
  }

  public void addToLemmaTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.lemmaTheoryList == null) {
      this.lemmaTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.lemmaTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getLemmaTheoryList() {
    return this.lemmaTheoryList;
  }

  public TheoryDependencies setLemmaTheoryList(List<edu.jhu.hlt.concrete.UUID> lemmaTheoryList) {
    this.lemmaTheoryList = lemmaTheoryList;
    return this;
  }

  public void unsetLemmaTheoryList() {
    this.lemmaTheoryList = null;
  }

  /** Returns true if field lemmaTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetLemmaTheoryList() {
    return this.lemmaTheoryList != null;
  }

  public void setLemmaTheoryListIsSet(boolean value) {
    if (!value) {
      this.lemmaTheoryList = null;
    }
  }

  public int getLangIdTheoryListSize() {
    return (this.langIdTheoryList == null) ? 0 : this.langIdTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getLangIdTheoryListIterator() {
    return (this.langIdTheoryList == null) ? null : this.langIdTheoryList.iterator();
  }

  public void addToLangIdTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.langIdTheoryList == null) {
      this.langIdTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.langIdTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getLangIdTheoryList() {
    return this.langIdTheoryList;
  }

  public TheoryDependencies setLangIdTheoryList(List<edu.jhu.hlt.concrete.UUID> langIdTheoryList) {
    this.langIdTheoryList = langIdTheoryList;
    return this;
  }

  public void unsetLangIdTheoryList() {
    this.langIdTheoryList = null;
  }

  /** Returns true if field langIdTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetLangIdTheoryList() {
    return this.langIdTheoryList != null;
  }

  public void setLangIdTheoryListIsSet(boolean value) {
    if (!value) {
      this.langIdTheoryList = null;
    }
  }

  public int getParseTheoryListSize() {
    return (this.parseTheoryList == null) ? 0 : this.parseTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getParseTheoryListIterator() {
    return (this.parseTheoryList == null) ? null : this.parseTheoryList.iterator();
  }

  public void addToParseTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.parseTheoryList == null) {
      this.parseTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.parseTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getParseTheoryList() {
    return this.parseTheoryList;
  }

  public TheoryDependencies setParseTheoryList(List<edu.jhu.hlt.concrete.UUID> parseTheoryList) {
    this.parseTheoryList = parseTheoryList;
    return this;
  }

  public void unsetParseTheoryList() {
    this.parseTheoryList = null;
  }

  /** Returns true if field parseTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetParseTheoryList() {
    return this.parseTheoryList != null;
  }

  public void setParseTheoryListIsSet(boolean value) {
    if (!value) {
      this.parseTheoryList = null;
    }
  }

  public int getDependencyParseTheoryListSize() {
    return (this.dependencyParseTheoryList == null) ? 0 : this.dependencyParseTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getDependencyParseTheoryListIterator() {
    return (this.dependencyParseTheoryList == null) ? null : this.dependencyParseTheoryList.iterator();
  }

  public void addToDependencyParseTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.dependencyParseTheoryList == null) {
      this.dependencyParseTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.dependencyParseTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getDependencyParseTheoryList() {
    return this.dependencyParseTheoryList;
  }

  public TheoryDependencies setDependencyParseTheoryList(List<edu.jhu.hlt.concrete.UUID> dependencyParseTheoryList) {
    this.dependencyParseTheoryList = dependencyParseTheoryList;
    return this;
  }

  public void unsetDependencyParseTheoryList() {
    this.dependencyParseTheoryList = null;
  }

  /** Returns true if field dependencyParseTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetDependencyParseTheoryList() {
    return this.dependencyParseTheoryList != null;
  }

  public void setDependencyParseTheoryListIsSet(boolean value) {
    if (!value) {
      this.dependencyParseTheoryList = null;
    }
  }

  public int getTokenAnnotationTheoryListSize() {
    return (this.tokenAnnotationTheoryList == null) ? 0 : this.tokenAnnotationTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getTokenAnnotationTheoryListIterator() {
    return (this.tokenAnnotationTheoryList == null) ? null : this.tokenAnnotationTheoryList.iterator();
  }

  public void addToTokenAnnotationTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.tokenAnnotationTheoryList == null) {
      this.tokenAnnotationTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.tokenAnnotationTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getTokenAnnotationTheoryList() {
    return this.tokenAnnotationTheoryList;
  }

  public TheoryDependencies setTokenAnnotationTheoryList(List<edu.jhu.hlt.concrete.UUID> tokenAnnotationTheoryList) {
    this.tokenAnnotationTheoryList = tokenAnnotationTheoryList;
    return this;
  }

  public void unsetTokenAnnotationTheoryList() {
    this.tokenAnnotationTheoryList = null;
  }

  /** Returns true if field tokenAnnotationTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenAnnotationTheoryList() {
    return this.tokenAnnotationTheoryList != null;
  }

  public void setTokenAnnotationTheoryListIsSet(boolean value) {
    if (!value) {
      this.tokenAnnotationTheoryList = null;
    }
  }

  public int getEntityMentionSetTheoryListSize() {
    return (this.entityMentionSetTheoryList == null) ? 0 : this.entityMentionSetTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getEntityMentionSetTheoryListIterator() {
    return (this.entityMentionSetTheoryList == null) ? null : this.entityMentionSetTheoryList.iterator();
  }

  public void addToEntityMentionSetTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.entityMentionSetTheoryList == null) {
      this.entityMentionSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.entityMentionSetTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getEntityMentionSetTheoryList() {
    return this.entityMentionSetTheoryList;
  }

  public TheoryDependencies setEntityMentionSetTheoryList(List<edu.jhu.hlt.concrete.UUID> entityMentionSetTheoryList) {
    this.entityMentionSetTheoryList = entityMentionSetTheoryList;
    return this;
  }

  public void unsetEntityMentionSetTheoryList() {
    this.entityMentionSetTheoryList = null;
  }

  /** Returns true if field entityMentionSetTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetEntityMentionSetTheoryList() {
    return this.entityMentionSetTheoryList != null;
  }

  public void setEntityMentionSetTheoryListIsSet(boolean value) {
    if (!value) {
      this.entityMentionSetTheoryList = null;
    }
  }

  public int getEntitySetTheoryListSize() {
    return (this.entitySetTheoryList == null) ? 0 : this.entitySetTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getEntitySetTheoryListIterator() {
    return (this.entitySetTheoryList == null) ? null : this.entitySetTheoryList.iterator();
  }

  public void addToEntitySetTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.entitySetTheoryList == null) {
      this.entitySetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.entitySetTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getEntitySetTheoryList() {
    return this.entitySetTheoryList;
  }

  public TheoryDependencies setEntitySetTheoryList(List<edu.jhu.hlt.concrete.UUID> entitySetTheoryList) {
    this.entitySetTheoryList = entitySetTheoryList;
    return this;
  }

  public void unsetEntitySetTheoryList() {
    this.entitySetTheoryList = null;
  }

  /** Returns true if field entitySetTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetEntitySetTheoryList() {
    return this.entitySetTheoryList != null;
  }

  public void setEntitySetTheoryListIsSet(boolean value) {
    if (!value) {
      this.entitySetTheoryList = null;
    }
  }

  public int getSituationMentionSetTheoryListSize() {
    return (this.situationMentionSetTheoryList == null) ? 0 : this.situationMentionSetTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getSituationMentionSetTheoryListIterator() {
    return (this.situationMentionSetTheoryList == null) ? null : this.situationMentionSetTheoryList.iterator();
  }

  public void addToSituationMentionSetTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.situationMentionSetTheoryList == null) {
      this.situationMentionSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.situationMentionSetTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getSituationMentionSetTheoryList() {
    return this.situationMentionSetTheoryList;
  }

  public TheoryDependencies setSituationMentionSetTheoryList(List<edu.jhu.hlt.concrete.UUID> situationMentionSetTheoryList) {
    this.situationMentionSetTheoryList = situationMentionSetTheoryList;
    return this;
  }

  public void unsetSituationMentionSetTheoryList() {
    this.situationMentionSetTheoryList = null;
  }

  /** Returns true if field situationMentionSetTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetSituationMentionSetTheoryList() {
    return this.situationMentionSetTheoryList != null;
  }

  public void setSituationMentionSetTheoryListIsSet(boolean value) {
    if (!value) {
      this.situationMentionSetTheoryList = null;
    }
  }

  public int getSituationSetTheoryListSize() {
    return (this.situationSetTheoryList == null) ? 0 : this.situationSetTheoryList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getSituationSetTheoryListIterator() {
    return (this.situationSetTheoryList == null) ? null : this.situationSetTheoryList.iterator();
  }

  public void addToSituationSetTheoryList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.situationSetTheoryList == null) {
      this.situationSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.situationSetTheoryList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getSituationSetTheoryList() {
    return this.situationSetTheoryList;
  }

  public TheoryDependencies setSituationSetTheoryList(List<edu.jhu.hlt.concrete.UUID> situationSetTheoryList) {
    this.situationSetTheoryList = situationSetTheoryList;
    return this;
  }

  public void unsetSituationSetTheoryList() {
    this.situationSetTheoryList = null;
  }

  /** Returns true if field situationSetTheoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetSituationSetTheoryList() {
    return this.situationSetTheoryList != null;
  }

  public void setSituationSetTheoryListIsSet(boolean value) {
    if (!value) {
      this.situationSetTheoryList = null;
    }
  }

  public int getCommunicationsListSize() {
    return (this.communicationsList == null) ? 0 : this.communicationsList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getCommunicationsListIterator() {
    return (this.communicationsList == null) ? null : this.communicationsList.iterator();
  }

  public void addToCommunicationsList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.communicationsList == null) {
      this.communicationsList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.communicationsList.add(elem);
  }

  public List<edu.jhu.hlt.concrete.UUID> getCommunicationsList() {
    return this.communicationsList;
  }

  public TheoryDependencies setCommunicationsList(List<edu.jhu.hlt.concrete.UUID> communicationsList) {
    this.communicationsList = communicationsList;
    return this;
  }

  public void unsetCommunicationsList() {
    this.communicationsList = null;
  }

  /** Returns true if field communicationsList is set (has been assigned a value) and false otherwise */
  public boolean isSetCommunicationsList() {
    return this.communicationsList != null;
  }

  public void setCommunicationsListIsSet(boolean value) {
    if (!value) {
      this.communicationsList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SECTION_THEORY_LIST:
      if (value == null) {
        unsetSectionTheoryList();
      } else {
        setSectionTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case SENTENCE_THEORY_LIST:
      if (value == null) {
        unsetSentenceTheoryList();
      } else {
        setSentenceTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case TOKENIZATION_THEORY_LIST:
      if (value == null) {
        unsetTokenizationTheoryList();
      } else {
        setTokenizationTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case POS_TAG_THEORY_LIST:
      if (value == null) {
        unsetPosTagTheoryList();
      } else {
        setPosTagTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case NER_TAG_THEORY_LIST:
      if (value == null) {
        unsetNerTagTheoryList();
      } else {
        setNerTagTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case LEMMA_THEORY_LIST:
      if (value == null) {
        unsetLemmaTheoryList();
      } else {
        setLemmaTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case LANG_ID_THEORY_LIST:
      if (value == null) {
        unsetLangIdTheoryList();
      } else {
        setLangIdTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case PARSE_THEORY_LIST:
      if (value == null) {
        unsetParseTheoryList();
      } else {
        setParseTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case DEPENDENCY_PARSE_THEORY_LIST:
      if (value == null) {
        unsetDependencyParseTheoryList();
      } else {
        setDependencyParseTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case TOKEN_ANNOTATION_THEORY_LIST:
      if (value == null) {
        unsetTokenAnnotationTheoryList();
      } else {
        setTokenAnnotationTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case ENTITY_MENTION_SET_THEORY_LIST:
      if (value == null) {
        unsetEntityMentionSetTheoryList();
      } else {
        setEntityMentionSetTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case ENTITY_SET_THEORY_LIST:
      if (value == null) {
        unsetEntitySetTheoryList();
      } else {
        setEntitySetTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case SITUATION_MENTION_SET_THEORY_LIST:
      if (value == null) {
        unsetSituationMentionSetTheoryList();
      } else {
        setSituationMentionSetTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case SITUATION_SET_THEORY_LIST:
      if (value == null) {
        unsetSituationSetTheoryList();
      } else {
        setSituationSetTheoryList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case COMMUNICATIONS_LIST:
      if (value == null) {
        unsetCommunicationsList();
      } else {
        setCommunicationsList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SECTION_THEORY_LIST:
      return getSectionTheoryList();

    case SENTENCE_THEORY_LIST:
      return getSentenceTheoryList();

    case TOKENIZATION_THEORY_LIST:
      return getTokenizationTheoryList();

    case POS_TAG_THEORY_LIST:
      return getPosTagTheoryList();

    case NER_TAG_THEORY_LIST:
      return getNerTagTheoryList();

    case LEMMA_THEORY_LIST:
      return getLemmaTheoryList();

    case LANG_ID_THEORY_LIST:
      return getLangIdTheoryList();

    case PARSE_THEORY_LIST:
      return getParseTheoryList();

    case DEPENDENCY_PARSE_THEORY_LIST:
      return getDependencyParseTheoryList();

    case TOKEN_ANNOTATION_THEORY_LIST:
      return getTokenAnnotationTheoryList();

    case ENTITY_MENTION_SET_THEORY_LIST:
      return getEntityMentionSetTheoryList();

    case ENTITY_SET_THEORY_LIST:
      return getEntitySetTheoryList();

    case SITUATION_MENTION_SET_THEORY_LIST:
      return getSituationMentionSetTheoryList();

    case SITUATION_SET_THEORY_LIST:
      return getSituationSetTheoryList();

    case COMMUNICATIONS_LIST:
      return getCommunicationsList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SECTION_THEORY_LIST:
      return isSetSectionTheoryList();
    case SENTENCE_THEORY_LIST:
      return isSetSentenceTheoryList();
    case TOKENIZATION_THEORY_LIST:
      return isSetTokenizationTheoryList();
    case POS_TAG_THEORY_LIST:
      return isSetPosTagTheoryList();
    case NER_TAG_THEORY_LIST:
      return isSetNerTagTheoryList();
    case LEMMA_THEORY_LIST:
      return isSetLemmaTheoryList();
    case LANG_ID_THEORY_LIST:
      return isSetLangIdTheoryList();
    case PARSE_THEORY_LIST:
      return isSetParseTheoryList();
    case DEPENDENCY_PARSE_THEORY_LIST:
      return isSetDependencyParseTheoryList();
    case TOKEN_ANNOTATION_THEORY_LIST:
      return isSetTokenAnnotationTheoryList();
    case ENTITY_MENTION_SET_THEORY_LIST:
      return isSetEntityMentionSetTheoryList();
    case ENTITY_SET_THEORY_LIST:
      return isSetEntitySetTheoryList();
    case SITUATION_MENTION_SET_THEORY_LIST:
      return isSetSituationMentionSetTheoryList();
    case SITUATION_SET_THEORY_LIST:
      return isSetSituationSetTheoryList();
    case COMMUNICATIONS_LIST:
      return isSetCommunicationsList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TheoryDependencies)
      return this.equals((TheoryDependencies)that);
    return false;
  }

  public boolean equals(TheoryDependencies that) {
    if (that == null)
      return false;

    boolean this_present_sectionTheoryList = true && this.isSetSectionTheoryList();
    boolean that_present_sectionTheoryList = true && that.isSetSectionTheoryList();
    if (this_present_sectionTheoryList || that_present_sectionTheoryList) {
      if (!(this_present_sectionTheoryList && that_present_sectionTheoryList))
        return false;
      if (!this.sectionTheoryList.equals(that.sectionTheoryList))
        return false;
    }

    boolean this_present_sentenceTheoryList = true && this.isSetSentenceTheoryList();
    boolean that_present_sentenceTheoryList = true && that.isSetSentenceTheoryList();
    if (this_present_sentenceTheoryList || that_present_sentenceTheoryList) {
      if (!(this_present_sentenceTheoryList && that_present_sentenceTheoryList))
        return false;
      if (!this.sentenceTheoryList.equals(that.sentenceTheoryList))
        return false;
    }

    boolean this_present_tokenizationTheoryList = true && this.isSetTokenizationTheoryList();
    boolean that_present_tokenizationTheoryList = true && that.isSetTokenizationTheoryList();
    if (this_present_tokenizationTheoryList || that_present_tokenizationTheoryList) {
      if (!(this_present_tokenizationTheoryList && that_present_tokenizationTheoryList))
        return false;
      if (!this.tokenizationTheoryList.equals(that.tokenizationTheoryList))
        return false;
    }

    boolean this_present_posTagTheoryList = true && this.isSetPosTagTheoryList();
    boolean that_present_posTagTheoryList = true && that.isSetPosTagTheoryList();
    if (this_present_posTagTheoryList || that_present_posTagTheoryList) {
      if (!(this_present_posTagTheoryList && that_present_posTagTheoryList))
        return false;
      if (!this.posTagTheoryList.equals(that.posTagTheoryList))
        return false;
    }

    boolean this_present_nerTagTheoryList = true && this.isSetNerTagTheoryList();
    boolean that_present_nerTagTheoryList = true && that.isSetNerTagTheoryList();
    if (this_present_nerTagTheoryList || that_present_nerTagTheoryList) {
      if (!(this_present_nerTagTheoryList && that_present_nerTagTheoryList))
        return false;
      if (!this.nerTagTheoryList.equals(that.nerTagTheoryList))
        return false;
    }

    boolean this_present_lemmaTheoryList = true && this.isSetLemmaTheoryList();
    boolean that_present_lemmaTheoryList = true && that.isSetLemmaTheoryList();
    if (this_present_lemmaTheoryList || that_present_lemmaTheoryList) {
      if (!(this_present_lemmaTheoryList && that_present_lemmaTheoryList))
        return false;
      if (!this.lemmaTheoryList.equals(that.lemmaTheoryList))
        return false;
    }

    boolean this_present_langIdTheoryList = true && this.isSetLangIdTheoryList();
    boolean that_present_langIdTheoryList = true && that.isSetLangIdTheoryList();
    if (this_present_langIdTheoryList || that_present_langIdTheoryList) {
      if (!(this_present_langIdTheoryList && that_present_langIdTheoryList))
        return false;
      if (!this.langIdTheoryList.equals(that.langIdTheoryList))
        return false;
    }

    boolean this_present_parseTheoryList = true && this.isSetParseTheoryList();
    boolean that_present_parseTheoryList = true && that.isSetParseTheoryList();
    if (this_present_parseTheoryList || that_present_parseTheoryList) {
      if (!(this_present_parseTheoryList && that_present_parseTheoryList))
        return false;
      if (!this.parseTheoryList.equals(that.parseTheoryList))
        return false;
    }

    boolean this_present_dependencyParseTheoryList = true && this.isSetDependencyParseTheoryList();
    boolean that_present_dependencyParseTheoryList = true && that.isSetDependencyParseTheoryList();
    if (this_present_dependencyParseTheoryList || that_present_dependencyParseTheoryList) {
      if (!(this_present_dependencyParseTheoryList && that_present_dependencyParseTheoryList))
        return false;
      if (!this.dependencyParseTheoryList.equals(that.dependencyParseTheoryList))
        return false;
    }

    boolean this_present_tokenAnnotationTheoryList = true && this.isSetTokenAnnotationTheoryList();
    boolean that_present_tokenAnnotationTheoryList = true && that.isSetTokenAnnotationTheoryList();
    if (this_present_tokenAnnotationTheoryList || that_present_tokenAnnotationTheoryList) {
      if (!(this_present_tokenAnnotationTheoryList && that_present_tokenAnnotationTheoryList))
        return false;
      if (!this.tokenAnnotationTheoryList.equals(that.tokenAnnotationTheoryList))
        return false;
    }

    boolean this_present_entityMentionSetTheoryList = true && this.isSetEntityMentionSetTheoryList();
    boolean that_present_entityMentionSetTheoryList = true && that.isSetEntityMentionSetTheoryList();
    if (this_present_entityMentionSetTheoryList || that_present_entityMentionSetTheoryList) {
      if (!(this_present_entityMentionSetTheoryList && that_present_entityMentionSetTheoryList))
        return false;
      if (!this.entityMentionSetTheoryList.equals(that.entityMentionSetTheoryList))
        return false;
    }

    boolean this_present_entitySetTheoryList = true && this.isSetEntitySetTheoryList();
    boolean that_present_entitySetTheoryList = true && that.isSetEntitySetTheoryList();
    if (this_present_entitySetTheoryList || that_present_entitySetTheoryList) {
      if (!(this_present_entitySetTheoryList && that_present_entitySetTheoryList))
        return false;
      if (!this.entitySetTheoryList.equals(that.entitySetTheoryList))
        return false;
    }

    boolean this_present_situationMentionSetTheoryList = true && this.isSetSituationMentionSetTheoryList();
    boolean that_present_situationMentionSetTheoryList = true && that.isSetSituationMentionSetTheoryList();
    if (this_present_situationMentionSetTheoryList || that_present_situationMentionSetTheoryList) {
      if (!(this_present_situationMentionSetTheoryList && that_present_situationMentionSetTheoryList))
        return false;
      if (!this.situationMentionSetTheoryList.equals(that.situationMentionSetTheoryList))
        return false;
    }

    boolean this_present_situationSetTheoryList = true && this.isSetSituationSetTheoryList();
    boolean that_present_situationSetTheoryList = true && that.isSetSituationSetTheoryList();
    if (this_present_situationSetTheoryList || that_present_situationSetTheoryList) {
      if (!(this_present_situationSetTheoryList && that_present_situationSetTheoryList))
        return false;
      if (!this.situationSetTheoryList.equals(that.situationSetTheoryList))
        return false;
    }

    boolean this_present_communicationsList = true && this.isSetCommunicationsList();
    boolean that_present_communicationsList = true && that.isSetCommunicationsList();
    if (this_present_communicationsList || that_present_communicationsList) {
      if (!(this_present_communicationsList && that_present_communicationsList))
        return false;
      if (!this.communicationsList.equals(that.communicationsList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sectionTheoryList = true && (isSetSectionTheoryList());
    list.add(present_sectionTheoryList);
    if (present_sectionTheoryList)
      list.add(sectionTheoryList);

    boolean present_sentenceTheoryList = true && (isSetSentenceTheoryList());
    list.add(present_sentenceTheoryList);
    if (present_sentenceTheoryList)
      list.add(sentenceTheoryList);

    boolean present_tokenizationTheoryList = true && (isSetTokenizationTheoryList());
    list.add(present_tokenizationTheoryList);
    if (present_tokenizationTheoryList)
      list.add(tokenizationTheoryList);

    boolean present_posTagTheoryList = true && (isSetPosTagTheoryList());
    list.add(present_posTagTheoryList);
    if (present_posTagTheoryList)
      list.add(posTagTheoryList);

    boolean present_nerTagTheoryList = true && (isSetNerTagTheoryList());
    list.add(present_nerTagTheoryList);
    if (present_nerTagTheoryList)
      list.add(nerTagTheoryList);

    boolean present_lemmaTheoryList = true && (isSetLemmaTheoryList());
    list.add(present_lemmaTheoryList);
    if (present_lemmaTheoryList)
      list.add(lemmaTheoryList);

    boolean present_langIdTheoryList = true && (isSetLangIdTheoryList());
    list.add(present_langIdTheoryList);
    if (present_langIdTheoryList)
      list.add(langIdTheoryList);

    boolean present_parseTheoryList = true && (isSetParseTheoryList());
    list.add(present_parseTheoryList);
    if (present_parseTheoryList)
      list.add(parseTheoryList);

    boolean present_dependencyParseTheoryList = true && (isSetDependencyParseTheoryList());
    list.add(present_dependencyParseTheoryList);
    if (present_dependencyParseTheoryList)
      list.add(dependencyParseTheoryList);

    boolean present_tokenAnnotationTheoryList = true && (isSetTokenAnnotationTheoryList());
    list.add(present_tokenAnnotationTheoryList);
    if (present_tokenAnnotationTheoryList)
      list.add(tokenAnnotationTheoryList);

    boolean present_entityMentionSetTheoryList = true && (isSetEntityMentionSetTheoryList());
    list.add(present_entityMentionSetTheoryList);
    if (present_entityMentionSetTheoryList)
      list.add(entityMentionSetTheoryList);

    boolean present_entitySetTheoryList = true && (isSetEntitySetTheoryList());
    list.add(present_entitySetTheoryList);
    if (present_entitySetTheoryList)
      list.add(entitySetTheoryList);

    boolean present_situationMentionSetTheoryList = true && (isSetSituationMentionSetTheoryList());
    list.add(present_situationMentionSetTheoryList);
    if (present_situationMentionSetTheoryList)
      list.add(situationMentionSetTheoryList);

    boolean present_situationSetTheoryList = true && (isSetSituationSetTheoryList());
    list.add(present_situationSetTheoryList);
    if (present_situationSetTheoryList)
      list.add(situationSetTheoryList);

    boolean present_communicationsList = true && (isSetCommunicationsList());
    list.add(present_communicationsList);
    if (present_communicationsList)
      list.add(communicationsList);

    return list.hashCode();
  }

  @Override
  public int compareTo(TheoryDependencies other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSectionTheoryList()).compareTo(other.isSetSectionTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSectionTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sectionTheoryList, other.sectionTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentenceTheoryList()).compareTo(other.isSetSentenceTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentenceTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentenceTheoryList, other.sentenceTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenizationTheoryList()).compareTo(other.isSetTokenizationTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenizationTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenizationTheoryList, other.tokenizationTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosTagTheoryList()).compareTo(other.isSetPosTagTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosTagTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posTagTheoryList, other.posTagTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNerTagTheoryList()).compareTo(other.isSetNerTagTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNerTagTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nerTagTheoryList, other.nerTagTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLemmaTheoryList()).compareTo(other.isSetLemmaTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLemmaTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lemmaTheoryList, other.lemmaTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLangIdTheoryList()).compareTo(other.isSetLangIdTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLangIdTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.langIdTheoryList, other.langIdTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParseTheoryList()).compareTo(other.isSetParseTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParseTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parseTheoryList, other.parseTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDependencyParseTheoryList()).compareTo(other.isSetDependencyParseTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDependencyParseTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependencyParseTheoryList, other.dependencyParseTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokenAnnotationTheoryList()).compareTo(other.isSetTokenAnnotationTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenAnnotationTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenAnnotationTheoryList, other.tokenAnnotationTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntityMentionSetTheoryList()).compareTo(other.isSetEntityMentionSetTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntityMentionSetTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entityMentionSetTheoryList, other.entityMentionSetTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntitySetTheoryList()).compareTo(other.isSetEntitySetTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntitySetTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entitySetTheoryList, other.entitySetTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSituationMentionSetTheoryList()).compareTo(other.isSetSituationMentionSetTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSituationMentionSetTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.situationMentionSetTheoryList, other.situationMentionSetTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSituationSetTheoryList()).compareTo(other.isSetSituationSetTheoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSituationSetTheoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.situationSetTheoryList, other.situationSetTheoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommunicationsList()).compareTo(other.isSetCommunicationsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommunicationsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communicationsList, other.communicationsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TheoryDependencies(");
    boolean first = true;

    if (isSetSectionTheoryList()) {
      sb.append("sectionTheoryList:");
      if (this.sectionTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.sectionTheoryList);
      }
      first = false;
    }
    if (isSetSentenceTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("sentenceTheoryList:");
      if (this.sentenceTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.sentenceTheoryList);
      }
      first = false;
    }
    if (isSetTokenizationTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("tokenizationTheoryList:");
      if (this.tokenizationTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenizationTheoryList);
      }
      first = false;
    }
    if (isSetPosTagTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("posTagTheoryList:");
      if (this.posTagTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.posTagTheoryList);
      }
      first = false;
    }
    if (isSetNerTagTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("nerTagTheoryList:");
      if (this.nerTagTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.nerTagTheoryList);
      }
      first = false;
    }
    if (isSetLemmaTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("lemmaTheoryList:");
      if (this.lemmaTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.lemmaTheoryList);
      }
      first = false;
    }
    if (isSetLangIdTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("langIdTheoryList:");
      if (this.langIdTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.langIdTheoryList);
      }
      first = false;
    }
    if (isSetParseTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("parseTheoryList:");
      if (this.parseTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.parseTheoryList);
      }
      first = false;
    }
    if (isSetDependencyParseTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("dependencyParseTheoryList:");
      if (this.dependencyParseTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.dependencyParseTheoryList);
      }
      first = false;
    }
    if (isSetTokenAnnotationTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("tokenAnnotationTheoryList:");
      if (this.tokenAnnotationTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenAnnotationTheoryList);
      }
      first = false;
    }
    if (isSetEntityMentionSetTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("entityMentionSetTheoryList:");
      if (this.entityMentionSetTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.entityMentionSetTheoryList);
      }
      first = false;
    }
    if (isSetEntitySetTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("entitySetTheoryList:");
      if (this.entitySetTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.entitySetTheoryList);
      }
      first = false;
    }
    if (isSetSituationMentionSetTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("situationMentionSetTheoryList:");
      if (this.situationMentionSetTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.situationMentionSetTheoryList);
      }
      first = false;
    }
    if (isSetSituationSetTheoryList()) {
      if (!first) sb.append(", ");
      sb.append("situationSetTheoryList:");
      if (this.situationSetTheoryList == null) {
        sb.append("null");
      } else {
        sb.append(this.situationSetTheoryList);
      }
      first = false;
    }
    if (isSetCommunicationsList()) {
      if (!first) sb.append(", ");
      sb.append("communicationsList:");
      if (this.communicationsList == null) {
        sb.append("null");
      } else {
        sb.append(this.communicationsList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TheoryDependenciesStandardSchemeFactory implements SchemeFactory {
    public TheoryDependenciesStandardScheme getScheme() {
      return new TheoryDependenciesStandardScheme();
    }
  }

  private static class TheoryDependenciesStandardScheme extends StandardScheme<TheoryDependencies> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TheoryDependencies struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SECTION_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.sectionTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list0.size);
                edu.jhu.hlt.concrete.UUID _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new edu.jhu.hlt.concrete.UUID();
                  _elem1.read(iprot);
                  struct.sectionTheoryList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setSectionTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENTENCE_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.sentenceTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list3.size);
                edu.jhu.hlt.concrete.UUID _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new edu.jhu.hlt.concrete.UUID();
                  _elem4.read(iprot);
                  struct.sentenceTheoryList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setSentenceTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKENIZATION_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.tokenizationTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list6.size);
                edu.jhu.hlt.concrete.UUID _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new edu.jhu.hlt.concrete.UUID();
                  _elem7.read(iprot);
                  struct.tokenizationTheoryList.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setTokenizationTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POS_TAG_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.posTagTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list9.size);
                edu.jhu.hlt.concrete.UUID _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new edu.jhu.hlt.concrete.UUID();
                  _elem10.read(iprot);
                  struct.posTagTheoryList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setPosTagTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NER_TAG_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.nerTagTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list12.size);
                edu.jhu.hlt.concrete.UUID _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = new edu.jhu.hlt.concrete.UUID();
                  _elem13.read(iprot);
                  struct.nerTagTheoryList.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setNerTagTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LEMMA_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.lemmaTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list15.size);
                edu.jhu.hlt.concrete.UUID _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = new edu.jhu.hlt.concrete.UUID();
                  _elem16.read(iprot);
                  struct.lemmaTheoryList.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setLemmaTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LANG_ID_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.langIdTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list18.size);
                edu.jhu.hlt.concrete.UUID _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new edu.jhu.hlt.concrete.UUID();
                  _elem19.read(iprot);
                  struct.langIdTheoryList.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setLangIdTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARSE_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.parseTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list21.size);
                edu.jhu.hlt.concrete.UUID _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = new edu.jhu.hlt.concrete.UUID();
                  _elem22.read(iprot);
                  struct.parseTheoryList.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setParseTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEPENDENCY_PARSE_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.dependencyParseTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list24.size);
                edu.jhu.hlt.concrete.UUID _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new edu.jhu.hlt.concrete.UUID();
                  _elem25.read(iprot);
                  struct.dependencyParseTheoryList.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setDependencyParseTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOKEN_ANNOTATION_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.tokenAnnotationTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list27.size);
                edu.jhu.hlt.concrete.UUID _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = new edu.jhu.hlt.concrete.UUID();
                  _elem28.read(iprot);
                  struct.tokenAnnotationTheoryList.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setTokenAnnotationTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ENTITY_MENTION_SET_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.entityMentionSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list30.size);
                edu.jhu.hlt.concrete.UUID _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = new edu.jhu.hlt.concrete.UUID();
                  _elem31.read(iprot);
                  struct.entityMentionSetTheoryList.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setEntityMentionSetTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ENTITY_SET_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.entitySetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list33.size);
                edu.jhu.hlt.concrete.UUID _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = new edu.jhu.hlt.concrete.UUID();
                  _elem34.read(iprot);
                  struct.entitySetTheoryList.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setEntitySetTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SITUATION_MENTION_SET_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.situationMentionSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list36.size);
                edu.jhu.hlt.concrete.UUID _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = new edu.jhu.hlt.concrete.UUID();
                  _elem37.read(iprot);
                  struct.situationMentionSetTheoryList.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setSituationMentionSetTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SITUATION_SET_THEORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.situationSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list39.size);
                edu.jhu.hlt.concrete.UUID _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = new edu.jhu.hlt.concrete.UUID();
                  _elem40.read(iprot);
                  struct.situationSetTheoryList.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setSituationSetTheoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMMUNICATIONS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.communicationsList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list42.size);
                edu.jhu.hlt.concrete.UUID _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = new edu.jhu.hlt.concrete.UUID();
                  _elem43.read(iprot);
                  struct.communicationsList.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setCommunicationsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TheoryDependencies struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sectionTheoryList != null) {
        if (struct.isSetSectionTheoryList()) {
          oprot.writeFieldBegin(SECTION_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sectionTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter45 : struct.sectionTheoryList)
            {
              _iter45.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sentenceTheoryList != null) {
        if (struct.isSetSentenceTheoryList()) {
          oprot.writeFieldBegin(SENTENCE_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sentenceTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter46 : struct.sentenceTheoryList)
            {
              _iter46.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tokenizationTheoryList != null) {
        if (struct.isSetTokenizationTheoryList()) {
          oprot.writeFieldBegin(TOKENIZATION_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tokenizationTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter47 : struct.tokenizationTheoryList)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.posTagTheoryList != null) {
        if (struct.isSetPosTagTheoryList()) {
          oprot.writeFieldBegin(POS_TAG_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.posTagTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter48 : struct.posTagTheoryList)
            {
              _iter48.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.nerTagTheoryList != null) {
        if (struct.isSetNerTagTheoryList()) {
          oprot.writeFieldBegin(NER_TAG_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nerTagTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter49 : struct.nerTagTheoryList)
            {
              _iter49.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.lemmaTheoryList != null) {
        if (struct.isSetLemmaTheoryList()) {
          oprot.writeFieldBegin(LEMMA_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lemmaTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter50 : struct.lemmaTheoryList)
            {
              _iter50.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.langIdTheoryList != null) {
        if (struct.isSetLangIdTheoryList()) {
          oprot.writeFieldBegin(LANG_ID_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.langIdTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter51 : struct.langIdTheoryList)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.parseTheoryList != null) {
        if (struct.isSetParseTheoryList()) {
          oprot.writeFieldBegin(PARSE_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parseTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter52 : struct.parseTheoryList)
            {
              _iter52.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dependencyParseTheoryList != null) {
        if (struct.isSetDependencyParseTheoryList()) {
          oprot.writeFieldBegin(DEPENDENCY_PARSE_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dependencyParseTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter53 : struct.dependencyParseTheoryList)
            {
              _iter53.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tokenAnnotationTheoryList != null) {
        if (struct.isSetTokenAnnotationTheoryList()) {
          oprot.writeFieldBegin(TOKEN_ANNOTATION_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tokenAnnotationTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter54 : struct.tokenAnnotationTheoryList)
            {
              _iter54.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.entityMentionSetTheoryList != null) {
        if (struct.isSetEntityMentionSetTheoryList()) {
          oprot.writeFieldBegin(ENTITY_MENTION_SET_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entityMentionSetTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter55 : struct.entityMentionSetTheoryList)
            {
              _iter55.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.entitySetTheoryList != null) {
        if (struct.isSetEntitySetTheoryList()) {
          oprot.writeFieldBegin(ENTITY_SET_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entitySetTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter56 : struct.entitySetTheoryList)
            {
              _iter56.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.situationMentionSetTheoryList != null) {
        if (struct.isSetSituationMentionSetTheoryList()) {
          oprot.writeFieldBegin(SITUATION_MENTION_SET_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.situationMentionSetTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter57 : struct.situationMentionSetTheoryList)
            {
              _iter57.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.situationSetTheoryList != null) {
        if (struct.isSetSituationSetTheoryList()) {
          oprot.writeFieldBegin(SITUATION_SET_THEORY_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.situationSetTheoryList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter58 : struct.situationSetTheoryList)
            {
              _iter58.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.communicationsList != null) {
        if (struct.isSetCommunicationsList()) {
          oprot.writeFieldBegin(COMMUNICATIONS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.communicationsList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter59 : struct.communicationsList)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TheoryDependenciesTupleSchemeFactory implements SchemeFactory {
    public TheoryDependenciesTupleScheme getScheme() {
      return new TheoryDependenciesTupleScheme();
    }
  }

  private static class TheoryDependenciesTupleScheme extends TupleScheme<TheoryDependencies> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TheoryDependencies struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSectionTheoryList()) {
        optionals.set(0);
      }
      if (struct.isSetSentenceTheoryList()) {
        optionals.set(1);
      }
      if (struct.isSetTokenizationTheoryList()) {
        optionals.set(2);
      }
      if (struct.isSetPosTagTheoryList()) {
        optionals.set(3);
      }
      if (struct.isSetNerTagTheoryList()) {
        optionals.set(4);
      }
      if (struct.isSetLemmaTheoryList()) {
        optionals.set(5);
      }
      if (struct.isSetLangIdTheoryList()) {
        optionals.set(6);
      }
      if (struct.isSetParseTheoryList()) {
        optionals.set(7);
      }
      if (struct.isSetDependencyParseTheoryList()) {
        optionals.set(8);
      }
      if (struct.isSetTokenAnnotationTheoryList()) {
        optionals.set(9);
      }
      if (struct.isSetEntityMentionSetTheoryList()) {
        optionals.set(10);
      }
      if (struct.isSetEntitySetTheoryList()) {
        optionals.set(11);
      }
      if (struct.isSetSituationMentionSetTheoryList()) {
        optionals.set(12);
      }
      if (struct.isSetSituationSetTheoryList()) {
        optionals.set(13);
      }
      if (struct.isSetCommunicationsList()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetSectionTheoryList()) {
        {
          oprot.writeI32(struct.sectionTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter60 : struct.sectionTheoryList)
          {
            _iter60.write(oprot);
          }
        }
      }
      if (struct.isSetSentenceTheoryList()) {
        {
          oprot.writeI32(struct.sentenceTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter61 : struct.sentenceTheoryList)
          {
            _iter61.write(oprot);
          }
        }
      }
      if (struct.isSetTokenizationTheoryList()) {
        {
          oprot.writeI32(struct.tokenizationTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter62 : struct.tokenizationTheoryList)
          {
            _iter62.write(oprot);
          }
        }
      }
      if (struct.isSetPosTagTheoryList()) {
        {
          oprot.writeI32(struct.posTagTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter63 : struct.posTagTheoryList)
          {
            _iter63.write(oprot);
          }
        }
      }
      if (struct.isSetNerTagTheoryList()) {
        {
          oprot.writeI32(struct.nerTagTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter64 : struct.nerTagTheoryList)
          {
            _iter64.write(oprot);
          }
        }
      }
      if (struct.isSetLemmaTheoryList()) {
        {
          oprot.writeI32(struct.lemmaTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter65 : struct.lemmaTheoryList)
          {
            _iter65.write(oprot);
          }
        }
      }
      if (struct.isSetLangIdTheoryList()) {
        {
          oprot.writeI32(struct.langIdTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter66 : struct.langIdTheoryList)
          {
            _iter66.write(oprot);
          }
        }
      }
      if (struct.isSetParseTheoryList()) {
        {
          oprot.writeI32(struct.parseTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter67 : struct.parseTheoryList)
          {
            _iter67.write(oprot);
          }
        }
      }
      if (struct.isSetDependencyParseTheoryList()) {
        {
          oprot.writeI32(struct.dependencyParseTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter68 : struct.dependencyParseTheoryList)
          {
            _iter68.write(oprot);
          }
        }
      }
      if (struct.isSetTokenAnnotationTheoryList()) {
        {
          oprot.writeI32(struct.tokenAnnotationTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter69 : struct.tokenAnnotationTheoryList)
          {
            _iter69.write(oprot);
          }
        }
      }
      if (struct.isSetEntityMentionSetTheoryList()) {
        {
          oprot.writeI32(struct.entityMentionSetTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter70 : struct.entityMentionSetTheoryList)
          {
            _iter70.write(oprot);
          }
        }
      }
      if (struct.isSetEntitySetTheoryList()) {
        {
          oprot.writeI32(struct.entitySetTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter71 : struct.entitySetTheoryList)
          {
            _iter71.write(oprot);
          }
        }
      }
      if (struct.isSetSituationMentionSetTheoryList()) {
        {
          oprot.writeI32(struct.situationMentionSetTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter72 : struct.situationMentionSetTheoryList)
          {
            _iter72.write(oprot);
          }
        }
      }
      if (struct.isSetSituationSetTheoryList()) {
        {
          oprot.writeI32(struct.situationSetTheoryList.size());
          for (edu.jhu.hlt.concrete.UUID _iter73 : struct.situationSetTheoryList)
          {
            _iter73.write(oprot);
          }
        }
      }
      if (struct.isSetCommunicationsList()) {
        {
          oprot.writeI32(struct.communicationsList.size());
          for (edu.jhu.hlt.concrete.UUID _iter74 : struct.communicationsList)
          {
            _iter74.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TheoryDependencies struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sectionTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list75.size);
          edu.jhu.hlt.concrete.UUID _elem76;
          for (int _i77 = 0; _i77 < _list75.size; ++_i77)
          {
            _elem76 = new edu.jhu.hlt.concrete.UUID();
            _elem76.read(iprot);
            struct.sectionTheoryList.add(_elem76);
          }
        }
        struct.setSectionTheoryListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sentenceTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list78.size);
          edu.jhu.hlt.concrete.UUID _elem79;
          for (int _i80 = 0; _i80 < _list78.size; ++_i80)
          {
            _elem79 = new edu.jhu.hlt.concrete.UUID();
            _elem79.read(iprot);
            struct.sentenceTheoryList.add(_elem79);
          }
        }
        struct.setSentenceTheoryListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tokenizationTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list81.size);
          edu.jhu.hlt.concrete.UUID _elem82;
          for (int _i83 = 0; _i83 < _list81.size; ++_i83)
          {
            _elem82 = new edu.jhu.hlt.concrete.UUID();
            _elem82.read(iprot);
            struct.tokenizationTheoryList.add(_elem82);
          }
        }
        struct.setTokenizationTheoryListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list84 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.posTagTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list84.size);
          edu.jhu.hlt.concrete.UUID _elem85;
          for (int _i86 = 0; _i86 < _list84.size; ++_i86)
          {
            _elem85 = new edu.jhu.hlt.concrete.UUID();
            _elem85.read(iprot);
            struct.posTagTheoryList.add(_elem85);
          }
        }
        struct.setPosTagTheoryListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nerTagTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list87.size);
          edu.jhu.hlt.concrete.UUID _elem88;
          for (int _i89 = 0; _i89 < _list87.size; ++_i89)
          {
            _elem88 = new edu.jhu.hlt.concrete.UUID();
            _elem88.read(iprot);
            struct.nerTagTheoryList.add(_elem88);
          }
        }
        struct.setNerTagTheoryListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lemmaTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list90.size);
          edu.jhu.hlt.concrete.UUID _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = new edu.jhu.hlt.concrete.UUID();
            _elem91.read(iprot);
            struct.lemmaTheoryList.add(_elem91);
          }
        }
        struct.setLemmaTheoryListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.langIdTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list93.size);
          edu.jhu.hlt.concrete.UUID _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = new edu.jhu.hlt.concrete.UUID();
            _elem94.read(iprot);
            struct.langIdTheoryList.add(_elem94);
          }
        }
        struct.setLangIdTheoryListIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list96 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.parseTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list96.size);
          edu.jhu.hlt.concrete.UUID _elem97;
          for (int _i98 = 0; _i98 < _list96.size; ++_i98)
          {
            _elem97 = new edu.jhu.hlt.concrete.UUID();
            _elem97.read(iprot);
            struct.parseTheoryList.add(_elem97);
          }
        }
        struct.setParseTheoryListIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list99 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dependencyParseTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list99.size);
          edu.jhu.hlt.concrete.UUID _elem100;
          for (int _i101 = 0; _i101 < _list99.size; ++_i101)
          {
            _elem100 = new edu.jhu.hlt.concrete.UUID();
            _elem100.read(iprot);
            struct.dependencyParseTheoryList.add(_elem100);
          }
        }
        struct.setDependencyParseTheoryListIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list102 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tokenAnnotationTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list102.size);
          edu.jhu.hlt.concrete.UUID _elem103;
          for (int _i104 = 0; _i104 < _list102.size; ++_i104)
          {
            _elem103 = new edu.jhu.hlt.concrete.UUID();
            _elem103.read(iprot);
            struct.tokenAnnotationTheoryList.add(_elem103);
          }
        }
        struct.setTokenAnnotationTheoryListIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list105 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.entityMentionSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list105.size);
          edu.jhu.hlt.concrete.UUID _elem106;
          for (int _i107 = 0; _i107 < _list105.size; ++_i107)
          {
            _elem106 = new edu.jhu.hlt.concrete.UUID();
            _elem106.read(iprot);
            struct.entityMentionSetTheoryList.add(_elem106);
          }
        }
        struct.setEntityMentionSetTheoryListIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list108 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.entitySetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list108.size);
          edu.jhu.hlt.concrete.UUID _elem109;
          for (int _i110 = 0; _i110 < _list108.size; ++_i110)
          {
            _elem109 = new edu.jhu.hlt.concrete.UUID();
            _elem109.read(iprot);
            struct.entitySetTheoryList.add(_elem109);
          }
        }
        struct.setEntitySetTheoryListIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.situationMentionSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list111.size);
          edu.jhu.hlt.concrete.UUID _elem112;
          for (int _i113 = 0; _i113 < _list111.size; ++_i113)
          {
            _elem112 = new edu.jhu.hlt.concrete.UUID();
            _elem112.read(iprot);
            struct.situationMentionSetTheoryList.add(_elem112);
          }
        }
        struct.setSituationMentionSetTheoryListIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list114 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.situationSetTheoryList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list114.size);
          edu.jhu.hlt.concrete.UUID _elem115;
          for (int _i116 = 0; _i116 < _list114.size; ++_i116)
          {
            _elem115 = new edu.jhu.hlt.concrete.UUID();
            _elem115.read(iprot);
            struct.situationSetTheoryList.add(_elem115);
          }
        }
        struct.setSituationSetTheoryListIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.communicationsList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list117.size);
          edu.jhu.hlt.concrete.UUID _elem118;
          for (int _i119 = 0; _i119 < _list117.size; ++_i119)
          {
            _elem118 = new edu.jhu.hlt.concrete.UUID();
            _elem118.read(iprot);
            struct.communicationsList.add(_elem118);
          }
        }
        struct.setCommunicationsListIsSet(true);
      }
    }
  }

}

