/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Information about a Twitter user.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class TwitterUser implements org.apache.thrift.TBase<TwitterUser, TwitterUser._Fields>, java.io.Serializable, Cloneable, Comparable<TwitterUser> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TwitterUser");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SCREEN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("screenName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GEO_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("geoEnabled", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FRIENDS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("friendsCount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STATUSES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("statusesCount", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField VERIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField("verified", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField LISTED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("listedCount", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FAVOURITES_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("favouritesCount", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField FOLLOWERS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("followersCount", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TIME_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeZone", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField UTC_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("utcOffset", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TwitterUserStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TwitterUserTupleSchemeFactory();

  private long id; // optional
  private java.lang.String name; // optional
  private java.lang.String screenName; // optional
  private java.lang.String lang; // optional
  private boolean geoEnabled; // optional
  private java.lang.String createdAt; // optional
  private int friendsCount; // optional
  private int statusesCount; // optional
  private boolean verified; // optional
  private int listedCount; // optional
  private int favouritesCount; // optional
  private int followersCount; // optional
  private java.lang.String location; // optional
  private java.lang.String timeZone; // optional
  private java.lang.String description; // optional
  private int utcOffset; // optional
  private java.lang.String url; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)3, "name"),
    SCREEN_NAME((short)4, "screenName"),
    LANG((short)5, "lang"),
    GEO_ENABLED((short)6, "geoEnabled"),
    CREATED_AT((short)7, "createdAt"),
    FRIENDS_COUNT((short)8, "friendsCount"),
    STATUSES_COUNT((short)9, "statusesCount"),
    VERIFIED((short)10, "verified"),
    LISTED_COUNT((short)11, "listedCount"),
    FAVOURITES_COUNT((short)12, "favouritesCount"),
    FOLLOWERS_COUNT((short)13, "followersCount"),
    LOCATION((short)14, "location"),
    TIME_ZONE((short)15, "timeZone"),
    DESCRIPTION((short)16, "description"),
    UTC_OFFSET((short)18, "utcOffset"),
    URL((short)19, "url");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 3: // NAME
          return NAME;
        case 4: // SCREEN_NAME
          return SCREEN_NAME;
        case 5: // LANG
          return LANG;
        case 6: // GEO_ENABLED
          return GEO_ENABLED;
        case 7: // CREATED_AT
          return CREATED_AT;
        case 8: // FRIENDS_COUNT
          return FRIENDS_COUNT;
        case 9: // STATUSES_COUNT
          return STATUSES_COUNT;
        case 10: // VERIFIED
          return VERIFIED;
        case 11: // LISTED_COUNT
          return LISTED_COUNT;
        case 12: // FAVOURITES_COUNT
          return FAVOURITES_COUNT;
        case 13: // FOLLOWERS_COUNT
          return FOLLOWERS_COUNT;
        case 14: // LOCATION
          return LOCATION;
        case 15: // TIME_ZONE
          return TIME_ZONE;
        case 16: // DESCRIPTION
          return DESCRIPTION;
        case 18: // UTC_OFFSET
          return UTC_OFFSET;
        case 19: // URL
          return URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __GEOENABLED_ISSET_ID = 1;
  private static final int __FRIENDSCOUNT_ISSET_ID = 2;
  private static final int __STATUSESCOUNT_ISSET_ID = 3;
  private static final int __VERIFIED_ISSET_ID = 4;
  private static final int __LISTEDCOUNT_ISSET_ID = 5;
  private static final int __FAVOURITESCOUNT_ISSET_ID = 6;
  private static final int __FOLLOWERSCOUNT_ISSET_ID = 7;
  private static final int __UTCOFFSET_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.NAME,_Fields.SCREEN_NAME,_Fields.LANG,_Fields.GEO_ENABLED,_Fields.CREATED_AT,_Fields.FRIENDS_COUNT,_Fields.STATUSES_COUNT,_Fields.VERIFIED,_Fields.LISTED_COUNT,_Fields.FAVOURITES_COUNT,_Fields.FOLLOWERS_COUNT,_Fields.LOCATION,_Fields.TIME_ZONE,_Fields.DESCRIPTION,_Fields.UTC_OFFSET,_Fields.URL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCREEN_NAME, new org.apache.thrift.meta_data.FieldMetaData("screenName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEO_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("geoEnabled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FRIENDS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("friendsCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUSES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("statusesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERIFIED, new org.apache.thrift.meta_data.FieldMetaData("verified", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LISTED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("listedCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAVOURITES_COUNT, new org.apache.thrift.meta_data.FieldMetaData("favouritesCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FOLLOWERS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("followersCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_ZONE, new org.apache.thrift.meta_data.FieldMetaData("timeZone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UTC_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("utcOffset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TwitterUser.class, metaDataMap);
  }

  public TwitterUser() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TwitterUser(TwitterUser other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetScreenName()) {
      this.screenName = other.screenName;
    }
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
    this.geoEnabled = other.geoEnabled;
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }
    this.friendsCount = other.friendsCount;
    this.statusesCount = other.statusesCount;
    this.verified = other.verified;
    this.listedCount = other.listedCount;
    this.favouritesCount = other.favouritesCount;
    this.followersCount = other.followersCount;
    if (other.isSetLocation()) {
      this.location = other.location;
    }
    if (other.isSetTimeZone()) {
      this.timeZone = other.timeZone;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.utcOffset = other.utcOffset;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
  }

  public TwitterUser deepCopy() {
    return new TwitterUser(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.screenName = null;
    this.lang = null;
    setGeoEnabledIsSet(false);
    this.geoEnabled = false;
    this.createdAt = null;
    setFriendsCountIsSet(false);
    this.friendsCount = 0;
    setStatusesCountIsSet(false);
    this.statusesCount = 0;
    setVerifiedIsSet(false);
    this.verified = false;
    setListedCountIsSet(false);
    this.listedCount = 0;
    setFavouritesCountIsSet(false);
    this.favouritesCount = 0;
    setFollowersCountIsSet(false);
    this.followersCount = 0;
    this.location = null;
    this.timeZone = null;
    this.description = null;
    setUtcOffsetIsSet(false);
    this.utcOffset = 0;
    this.url = null;
  }

  public long getId() {
    return this.id;
  }

  public TwitterUser setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public TwitterUser setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getScreenName() {
    return this.screenName;
  }

  public TwitterUser setScreenName(java.lang.String screenName) {
    this.screenName = screenName;
    return this;
  }

  public void unsetScreenName() {
    this.screenName = null;
  }

  /** Returns true if field screenName is set (has been assigned a value) and false otherwise */
  public boolean isSetScreenName() {
    return this.screenName != null;
  }

  public void setScreenNameIsSet(boolean value) {
    if (!value) {
      this.screenName = null;
    }
  }

  public java.lang.String getLang() {
    return this.lang;
  }

  public TwitterUser setLang(java.lang.String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been assigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  public boolean isGeoEnabled() {
    return this.geoEnabled;
  }

  public TwitterUser setGeoEnabled(boolean geoEnabled) {
    this.geoEnabled = geoEnabled;
    setGeoEnabledIsSet(true);
    return this;
  }

  public void unsetGeoEnabled() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GEOENABLED_ISSET_ID);
  }

  /** Returns true if field geoEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetGeoEnabled() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GEOENABLED_ISSET_ID);
  }

  public void setGeoEnabledIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GEOENABLED_ISSET_ID, value);
  }

  public java.lang.String getCreatedAt() {
    return this.createdAt;
  }

  public TwitterUser setCreatedAt(java.lang.String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public int getFriendsCount() {
    return this.friendsCount;
  }

  public TwitterUser setFriendsCount(int friendsCount) {
    this.friendsCount = friendsCount;
    setFriendsCountIsSet(true);
    return this;
  }

  public void unsetFriendsCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRIENDSCOUNT_ISSET_ID);
  }

  /** Returns true if field friendsCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFriendsCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRIENDSCOUNT_ISSET_ID);
  }

  public void setFriendsCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRIENDSCOUNT_ISSET_ID, value);
  }

  public int getStatusesCount() {
    return this.statusesCount;
  }

  public TwitterUser setStatusesCount(int statusesCount) {
    this.statusesCount = statusesCount;
    setStatusesCountIsSet(true);
    return this;
  }

  public void unsetStatusesCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSESCOUNT_ISSET_ID);
  }

  /** Returns true if field statusesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusesCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSESCOUNT_ISSET_ID);
  }

  public void setStatusesCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSESCOUNT_ISSET_ID, value);
  }

  public boolean isVerified() {
    return this.verified;
  }

  public TwitterUser setVerified(boolean verified) {
    this.verified = verified;
    setVerifiedIsSet(true);
    return this;
  }

  public void unsetVerified() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERIFIED_ISSET_ID);
  }

  /** Returns true if field verified is set (has been assigned a value) and false otherwise */
  public boolean isSetVerified() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERIFIED_ISSET_ID);
  }

  public void setVerifiedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERIFIED_ISSET_ID, value);
  }

  public int getListedCount() {
    return this.listedCount;
  }

  public TwitterUser setListedCount(int listedCount) {
    this.listedCount = listedCount;
    setListedCountIsSet(true);
    return this;
  }

  public void unsetListedCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LISTEDCOUNT_ISSET_ID);
  }

  /** Returns true if field listedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetListedCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LISTEDCOUNT_ISSET_ID);
  }

  public void setListedCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LISTEDCOUNT_ISSET_ID, value);
  }

  public int getFavouritesCount() {
    return this.favouritesCount;
  }

  public TwitterUser setFavouritesCount(int favouritesCount) {
    this.favouritesCount = favouritesCount;
    setFavouritesCountIsSet(true);
    return this;
  }

  public void unsetFavouritesCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAVOURITESCOUNT_ISSET_ID);
  }

  /** Returns true if field favouritesCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFavouritesCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAVOURITESCOUNT_ISSET_ID);
  }

  public void setFavouritesCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAVOURITESCOUNT_ISSET_ID, value);
  }

  public int getFollowersCount() {
    return this.followersCount;
  }

  public TwitterUser setFollowersCount(int followersCount) {
    this.followersCount = followersCount;
    setFollowersCountIsSet(true);
    return this;
  }

  public void unsetFollowersCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOLLOWERSCOUNT_ISSET_ID);
  }

  /** Returns true if field followersCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFollowersCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOLLOWERSCOUNT_ISSET_ID);
  }

  public void setFollowersCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOLLOWERSCOUNT_ISSET_ID, value);
  }

  public java.lang.String getLocation() {
    return this.location;
  }

  public TwitterUser setLocation(java.lang.String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public java.lang.String getTimeZone() {
    return this.timeZone;
  }

  public TwitterUser setTimeZone(java.lang.String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  public void unsetTimeZone() {
    this.timeZone = null;
  }

  /** Returns true if field timeZone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeZone() {
    return this.timeZone != null;
  }

  public void setTimeZoneIsSet(boolean value) {
    if (!value) {
      this.timeZone = null;
    }
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public TwitterUser setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getUtcOffset() {
    return this.utcOffset;
  }

  public TwitterUser setUtcOffset(int utcOffset) {
    this.utcOffset = utcOffset;
    setUtcOffsetIsSet(true);
    return this;
  }

  public void unsetUtcOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UTCOFFSET_ISSET_ID);
  }

  /** Returns true if field utcOffset is set (has been assigned a value) and false otherwise */
  public boolean isSetUtcOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UTCOFFSET_ISSET_ID);
  }

  public void setUtcOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UTCOFFSET_ISSET_ID, value);
  }

  public java.lang.String getUrl() {
    return this.url;
  }

  public TwitterUser setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case SCREEN_NAME:
      if (value == null) {
        unsetScreenName();
      } else {
        setScreenName((java.lang.String)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((java.lang.String)value);
      }
      break;

    case GEO_ENABLED:
      if (value == null) {
        unsetGeoEnabled();
      } else {
        setGeoEnabled((java.lang.Boolean)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((java.lang.String)value);
      }
      break;

    case FRIENDS_COUNT:
      if (value == null) {
        unsetFriendsCount();
      } else {
        setFriendsCount((java.lang.Integer)value);
      }
      break;

    case STATUSES_COUNT:
      if (value == null) {
        unsetStatusesCount();
      } else {
        setStatusesCount((java.lang.Integer)value);
      }
      break;

    case VERIFIED:
      if (value == null) {
        unsetVerified();
      } else {
        setVerified((java.lang.Boolean)value);
      }
      break;

    case LISTED_COUNT:
      if (value == null) {
        unsetListedCount();
      } else {
        setListedCount((java.lang.Integer)value);
      }
      break;

    case FAVOURITES_COUNT:
      if (value == null) {
        unsetFavouritesCount();
      } else {
        setFavouritesCount((java.lang.Integer)value);
      }
      break;

    case FOLLOWERS_COUNT:
      if (value == null) {
        unsetFollowersCount();
      } else {
        setFollowersCount((java.lang.Integer)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((java.lang.String)value);
      }
      break;

    case TIME_ZONE:
      if (value == null) {
        unsetTimeZone();
      } else {
        setTimeZone((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case UTC_OFFSET:
      if (value == null) {
        unsetUtcOffset();
      } else {
        setUtcOffset((java.lang.Integer)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case SCREEN_NAME:
      return getScreenName();

    case LANG:
      return getLang();

    case GEO_ENABLED:
      return isGeoEnabled();

    case CREATED_AT:
      return getCreatedAt();

    case FRIENDS_COUNT:
      return getFriendsCount();

    case STATUSES_COUNT:
      return getStatusesCount();

    case VERIFIED:
      return isVerified();

    case LISTED_COUNT:
      return getListedCount();

    case FAVOURITES_COUNT:
      return getFavouritesCount();

    case FOLLOWERS_COUNT:
      return getFollowersCount();

    case LOCATION:
      return getLocation();

    case TIME_ZONE:
      return getTimeZone();

    case DESCRIPTION:
      return getDescription();

    case UTC_OFFSET:
      return getUtcOffset();

    case URL:
      return getUrl();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case SCREEN_NAME:
      return isSetScreenName();
    case LANG:
      return isSetLang();
    case GEO_ENABLED:
      return isSetGeoEnabled();
    case CREATED_AT:
      return isSetCreatedAt();
    case FRIENDS_COUNT:
      return isSetFriendsCount();
    case STATUSES_COUNT:
      return isSetStatusesCount();
    case VERIFIED:
      return isSetVerified();
    case LISTED_COUNT:
      return isSetListedCount();
    case FAVOURITES_COUNT:
      return isSetFavouritesCount();
    case FOLLOWERS_COUNT:
      return isSetFollowersCount();
    case LOCATION:
      return isSetLocation();
    case TIME_ZONE:
      return isSetTimeZone();
    case DESCRIPTION:
      return isSetDescription();
    case UTC_OFFSET:
      return isSetUtcOffset();
    case URL:
      return isSetUrl();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TwitterUser)
      return this.equals((TwitterUser)that);
    return false;
  }

  public boolean equals(TwitterUser that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_screenName = true && this.isSetScreenName();
    boolean that_present_screenName = true && that.isSetScreenName();
    if (this_present_screenName || that_present_screenName) {
      if (!(this_present_screenName && that_present_screenName))
        return false;
      if (!this.screenName.equals(that.screenName))
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    boolean this_present_geoEnabled = true && this.isSetGeoEnabled();
    boolean that_present_geoEnabled = true && that.isSetGeoEnabled();
    if (this_present_geoEnabled || that_present_geoEnabled) {
      if (!(this_present_geoEnabled && that_present_geoEnabled))
        return false;
      if (this.geoEnabled != that.geoEnabled)
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    boolean this_present_friendsCount = true && this.isSetFriendsCount();
    boolean that_present_friendsCount = true && that.isSetFriendsCount();
    if (this_present_friendsCount || that_present_friendsCount) {
      if (!(this_present_friendsCount && that_present_friendsCount))
        return false;
      if (this.friendsCount != that.friendsCount)
        return false;
    }

    boolean this_present_statusesCount = true && this.isSetStatusesCount();
    boolean that_present_statusesCount = true && that.isSetStatusesCount();
    if (this_present_statusesCount || that_present_statusesCount) {
      if (!(this_present_statusesCount && that_present_statusesCount))
        return false;
      if (this.statusesCount != that.statusesCount)
        return false;
    }

    boolean this_present_verified = true && this.isSetVerified();
    boolean that_present_verified = true && that.isSetVerified();
    if (this_present_verified || that_present_verified) {
      if (!(this_present_verified && that_present_verified))
        return false;
      if (this.verified != that.verified)
        return false;
    }

    boolean this_present_listedCount = true && this.isSetListedCount();
    boolean that_present_listedCount = true && that.isSetListedCount();
    if (this_present_listedCount || that_present_listedCount) {
      if (!(this_present_listedCount && that_present_listedCount))
        return false;
      if (this.listedCount != that.listedCount)
        return false;
    }

    boolean this_present_favouritesCount = true && this.isSetFavouritesCount();
    boolean that_present_favouritesCount = true && that.isSetFavouritesCount();
    if (this_present_favouritesCount || that_present_favouritesCount) {
      if (!(this_present_favouritesCount && that_present_favouritesCount))
        return false;
      if (this.favouritesCount != that.favouritesCount)
        return false;
    }

    boolean this_present_followersCount = true && this.isSetFollowersCount();
    boolean that_present_followersCount = true && that.isSetFollowersCount();
    if (this_present_followersCount || that_present_followersCount) {
      if (!(this_present_followersCount && that_present_followersCount))
        return false;
      if (this.followersCount != that.followersCount)
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_timeZone = true && this.isSetTimeZone();
    boolean that_present_timeZone = true && that.isSetTimeZone();
    if (this_present_timeZone || that_present_timeZone) {
      if (!(this_present_timeZone && that_present_timeZone))
        return false;
      if (!this.timeZone.equals(that.timeZone))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_utcOffset = true && this.isSetUtcOffset();
    boolean that_present_utcOffset = true && that.isSetUtcOffset();
    if (this_present_utcOffset || that_present_utcOffset) {
      if (!(this_present_utcOffset && that_present_utcOffset))
        return false;
      if (this.utcOffset != that.utcOffset)
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetScreenName()) ? 131071 : 524287);
    if (isSetScreenName())
      hashCode = hashCode * 8191 + screenName.hashCode();

    hashCode = hashCode * 8191 + ((isSetLang()) ? 131071 : 524287);
    if (isSetLang())
      hashCode = hashCode * 8191 + lang.hashCode();

    hashCode = hashCode * 8191 + ((isSetGeoEnabled()) ? 131071 : 524287);
    if (isSetGeoEnabled())
      hashCode = hashCode * 8191 + ((geoEnabled) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCreatedAt()) ? 131071 : 524287);
    if (isSetCreatedAt())
      hashCode = hashCode * 8191 + createdAt.hashCode();

    hashCode = hashCode * 8191 + ((isSetFriendsCount()) ? 131071 : 524287);
    if (isSetFriendsCount())
      hashCode = hashCode * 8191 + friendsCount;

    hashCode = hashCode * 8191 + ((isSetStatusesCount()) ? 131071 : 524287);
    if (isSetStatusesCount())
      hashCode = hashCode * 8191 + statusesCount;

    hashCode = hashCode * 8191 + ((isSetVerified()) ? 131071 : 524287);
    if (isSetVerified())
      hashCode = hashCode * 8191 + ((verified) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetListedCount()) ? 131071 : 524287);
    if (isSetListedCount())
      hashCode = hashCode * 8191 + listedCount;

    hashCode = hashCode * 8191 + ((isSetFavouritesCount()) ? 131071 : 524287);
    if (isSetFavouritesCount())
      hashCode = hashCode * 8191 + favouritesCount;

    hashCode = hashCode * 8191 + ((isSetFollowersCount()) ? 131071 : 524287);
    if (isSetFollowersCount())
      hashCode = hashCode * 8191 + followersCount;

    hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
    if (isSetLocation())
      hashCode = hashCode * 8191 + location.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimeZone()) ? 131071 : 524287);
    if (isSetTimeZone())
      hashCode = hashCode * 8191 + timeZone.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetUtcOffset()) ? 131071 : 524287);
    if (isSetUtcOffset())
      hashCode = hashCode * 8191 + utcOffset;

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TwitterUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScreenName()).compareTo(other.isSetScreenName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScreenName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.screenName, other.screenName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLang()).compareTo(other.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, other.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGeoEnabled()).compareTo(other.isSetGeoEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeoEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geoEnabled, other.geoEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreatedAt()).compareTo(other.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, other.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFriendsCount()).compareTo(other.isSetFriendsCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFriendsCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friendsCount, other.friendsCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatusesCount()).compareTo(other.isSetStatusesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusesCount, other.statusesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVerified()).compareTo(other.isSetVerified());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerified()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verified, other.verified);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetListedCount()).compareTo(other.isSetListedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listedCount, other.listedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFavouritesCount()).compareTo(other.isSetFavouritesCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFavouritesCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.favouritesCount, other.favouritesCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFollowersCount()).compareTo(other.isSetFollowersCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFollowersCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followersCount, other.followersCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeZone()).compareTo(other.isSetTimeZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeZone, other.timeZone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUtcOffset()).compareTo(other.isSetUtcOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUtcOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.utcOffset, other.utcOffset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TwitterUser(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetScreenName()) {
      if (!first) sb.append(", ");
      sb.append("screenName:");
      if (this.screenName == null) {
        sb.append("null");
      } else {
        sb.append(this.screenName);
      }
      first = false;
    }
    if (isSetLang()) {
      if (!first) sb.append(", ");
      sb.append("lang:");
      if (this.lang == null) {
        sb.append("null");
      } else {
        sb.append(this.lang);
      }
      first = false;
    }
    if (isSetGeoEnabled()) {
      if (!first) sb.append(", ");
      sb.append("geoEnabled:");
      sb.append(this.geoEnabled);
      first = false;
    }
    if (isSetCreatedAt()) {
      if (!first) sb.append(", ");
      sb.append("createdAt:");
      if (this.createdAt == null) {
        sb.append("null");
      } else {
        sb.append(this.createdAt);
      }
      first = false;
    }
    if (isSetFriendsCount()) {
      if (!first) sb.append(", ");
      sb.append("friendsCount:");
      sb.append(this.friendsCount);
      first = false;
    }
    if (isSetStatusesCount()) {
      if (!first) sb.append(", ");
      sb.append("statusesCount:");
      sb.append(this.statusesCount);
      first = false;
    }
    if (isSetVerified()) {
      if (!first) sb.append(", ");
      sb.append("verified:");
      sb.append(this.verified);
      first = false;
    }
    if (isSetListedCount()) {
      if (!first) sb.append(", ");
      sb.append("listedCount:");
      sb.append(this.listedCount);
      first = false;
    }
    if (isSetFavouritesCount()) {
      if (!first) sb.append(", ");
      sb.append("favouritesCount:");
      sb.append(this.favouritesCount);
      first = false;
    }
    if (isSetFollowersCount()) {
      if (!first) sb.append(", ");
      sb.append("followersCount:");
      sb.append(this.followersCount);
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetTimeZone()) {
      if (!first) sb.append(", ");
      sb.append("timeZone:");
      if (this.timeZone == null) {
        sb.append("null");
      } else {
        sb.append(this.timeZone);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetUtcOffset()) {
      if (!first) sb.append(", ");
      sb.append("utcOffset:");
      sb.append(this.utcOffset);
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TwitterUserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TwitterUserStandardScheme getScheme() {
      return new TwitterUserStandardScheme();
    }
  }

  private static class TwitterUserStandardScheme extends org.apache.thrift.scheme.StandardScheme<TwitterUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TwitterUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCREEN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.screenName = iprot.readString();
              struct.setScreenNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lang = iprot.readString();
              struct.setLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GEO_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.geoEnabled = iprot.readBool();
              struct.setGeoEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FRIENDS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.friendsCount = iprot.readI32();
              struct.setFriendsCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUSES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statusesCount = iprot.readI32();
              struct.setStatusesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VERIFIED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.verified = iprot.readBool();
              struct.setVerifiedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LISTED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.listedCount = iprot.readI32();
              struct.setListedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FAVOURITES_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.favouritesCount = iprot.readI32();
              struct.setFavouritesCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FOLLOWERS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.followersCount = iprot.readI32();
              struct.setFollowersCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TIME_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeZone = iprot.readString();
              struct.setTimeZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // UTC_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.utcOffset = iprot.readI32();
              struct.setUtcOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TwitterUser struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.screenName != null) {
        if (struct.isSetScreenName()) {
          oprot.writeFieldBegin(SCREEN_NAME_FIELD_DESC);
          oprot.writeString(struct.screenName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.lang != null) {
        if (struct.isSetLang()) {
          oprot.writeFieldBegin(LANG_FIELD_DESC);
          oprot.writeString(struct.lang);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGeoEnabled()) {
        oprot.writeFieldBegin(GEO_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.geoEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.createdAt != null) {
        if (struct.isSetCreatedAt()) {
          oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
          oprot.writeString(struct.createdAt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFriendsCount()) {
        oprot.writeFieldBegin(FRIENDS_COUNT_FIELD_DESC);
        oprot.writeI32(struct.friendsCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatusesCount()) {
        oprot.writeFieldBegin(STATUSES_COUNT_FIELD_DESC);
        oprot.writeI32(struct.statusesCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVerified()) {
        oprot.writeFieldBegin(VERIFIED_FIELD_DESC);
        oprot.writeBool(struct.verified);
        oprot.writeFieldEnd();
      }
      if (struct.isSetListedCount()) {
        oprot.writeFieldBegin(LISTED_COUNT_FIELD_DESC);
        oprot.writeI32(struct.listedCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFavouritesCount()) {
        oprot.writeFieldBegin(FAVOURITES_COUNT_FIELD_DESC);
        oprot.writeI32(struct.favouritesCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFollowersCount()) {
        oprot.writeFieldBegin(FOLLOWERS_COUNT_FIELD_DESC);
        oprot.writeI32(struct.followersCount);
        oprot.writeFieldEnd();
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          oprot.writeString(struct.location);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeZone != null) {
        if (struct.isSetTimeZone()) {
          oprot.writeFieldBegin(TIME_ZONE_FIELD_DESC);
          oprot.writeString(struct.timeZone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUtcOffset()) {
        oprot.writeFieldBegin(UTC_OFFSET_FIELD_DESC);
        oprot.writeI32(struct.utcOffset);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TwitterUserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TwitterUserTupleScheme getScheme() {
      return new TwitterUserTupleScheme();
    }
  }

  private static class TwitterUserTupleScheme extends org.apache.thrift.scheme.TupleScheme<TwitterUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TwitterUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetScreenName()) {
        optionals.set(2);
      }
      if (struct.isSetLang()) {
        optionals.set(3);
      }
      if (struct.isSetGeoEnabled()) {
        optionals.set(4);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(5);
      }
      if (struct.isSetFriendsCount()) {
        optionals.set(6);
      }
      if (struct.isSetStatusesCount()) {
        optionals.set(7);
      }
      if (struct.isSetVerified()) {
        optionals.set(8);
      }
      if (struct.isSetListedCount()) {
        optionals.set(9);
      }
      if (struct.isSetFavouritesCount()) {
        optionals.set(10);
      }
      if (struct.isSetFollowersCount()) {
        optionals.set(11);
      }
      if (struct.isSetLocation()) {
        optionals.set(12);
      }
      if (struct.isSetTimeZone()) {
        optionals.set(13);
      }
      if (struct.isSetDescription()) {
        optionals.set(14);
      }
      if (struct.isSetUtcOffset()) {
        optionals.set(15);
      }
      if (struct.isSetUrl()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetScreenName()) {
        oprot.writeString(struct.screenName);
      }
      if (struct.isSetLang()) {
        oprot.writeString(struct.lang);
      }
      if (struct.isSetGeoEnabled()) {
        oprot.writeBool(struct.geoEnabled);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeString(struct.createdAt);
      }
      if (struct.isSetFriendsCount()) {
        oprot.writeI32(struct.friendsCount);
      }
      if (struct.isSetStatusesCount()) {
        oprot.writeI32(struct.statusesCount);
      }
      if (struct.isSetVerified()) {
        oprot.writeBool(struct.verified);
      }
      if (struct.isSetListedCount()) {
        oprot.writeI32(struct.listedCount);
      }
      if (struct.isSetFavouritesCount()) {
        oprot.writeI32(struct.favouritesCount);
      }
      if (struct.isSetFollowersCount()) {
        oprot.writeI32(struct.followersCount);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.location);
      }
      if (struct.isSetTimeZone()) {
        oprot.writeString(struct.timeZone);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetUtcOffset()) {
        oprot.writeI32(struct.utcOffset);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TwitterUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.screenName = iprot.readString();
        struct.setScreenNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lang = iprot.readString();
        struct.setLangIsSet(true);
      }
      if (incoming.get(4)) {
        struct.geoEnabled = iprot.readBool();
        struct.setGeoEnabledIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createdAt = iprot.readString();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.friendsCount = iprot.readI32();
        struct.setFriendsCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.statusesCount = iprot.readI32();
        struct.setStatusesCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.verified = iprot.readBool();
        struct.setVerifiedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.listedCount = iprot.readI32();
        struct.setListedCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.favouritesCount = iprot.readI32();
        struct.setFavouritesCountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.followersCount = iprot.readI32();
        struct.setFollowersCountIsSet(true);
      }
      if (incoming.get(12)) {
        struct.location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(13)) {
        struct.timeZone = iprot.readString();
        struct.setTimeZoneIsSet(true);
      }
      if (incoming.get(14)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(15)) {
        struct.utcOffset = iprot.readI32();
        struct.setUtcOffsetIsSet(true);
      }
      if (incoming.get(16)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

