/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A reference to a Constituent within a Parse.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class ConstituentRef implements org.apache.thrift.TBase<ConstituentRef, ConstituentRef._Fields>, java.io.Serializable, Cloneable, Comparable<ConstituentRef> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConstituentRef");

  private static final org.apache.thrift.protocol.TField PARSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parseId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CONSTITUENT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("constituentIndex", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConstituentRefStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConstituentRefTupleSchemeFactory();

  private edu.jhu.hlt.concrete.UUID parseId; // required
  private int constituentIndex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The UUID of the Parse that this Constituent belongs to.
     */
    PARSE_ID((short)1, "parseId"),
    /**
     * The index in the constituent list of this Constituent.
     */
    CONSTITUENT_INDEX((short)2, "constituentIndex");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARSE_ID
          return PARSE_ID;
        case 2: // CONSTITUENT_INDEX
          return CONSTITUENT_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONSTITUENTINDEX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARSE_ID, new org.apache.thrift.meta_data.FieldMetaData("parseId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.CONSTITUENT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("constituentIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConstituentRef.class, metaDataMap);
  }

  public ConstituentRef() {
  }

  public ConstituentRef(
    edu.jhu.hlt.concrete.UUID parseId,
    int constituentIndex)
  {
    this();
    this.parseId = parseId;
    this.constituentIndex = constituentIndex;
    setConstituentIndexIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConstituentRef(ConstituentRef other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetParseId()) {
      this.parseId = new edu.jhu.hlt.concrete.UUID(other.parseId);
    }
    this.constituentIndex = other.constituentIndex;
  }

  public ConstituentRef deepCopy() {
    return new ConstituentRef(this);
  }

  @Override
  public void clear() {
    this.parseId = null;
    setConstituentIndexIsSet(false);
    this.constituentIndex = 0;
  }

  /**
   * The UUID of the Parse that this Constituent belongs to.
   */
  public edu.jhu.hlt.concrete.UUID getParseId() {
    return this.parseId;
  }

  /**
   * The UUID of the Parse that this Constituent belongs to.
   */
  public ConstituentRef setParseId(edu.jhu.hlt.concrete.UUID parseId) {
    this.parseId = parseId;
    return this;
  }

  public void unsetParseId() {
    this.parseId = null;
  }

  /** Returns true if field parseId is set (has been assigned a value) and false otherwise */
  public boolean isSetParseId() {
    return this.parseId != null;
  }

  public void setParseIdIsSet(boolean value) {
    if (!value) {
      this.parseId = null;
    }
  }

  /**
   * The index in the constituent list of this Constituent.
   */
  public int getConstituentIndex() {
    return this.constituentIndex;
  }

  /**
   * The index in the constituent list of this Constituent.
   */
  public ConstituentRef setConstituentIndex(int constituentIndex) {
    this.constituentIndex = constituentIndex;
    setConstituentIndexIsSet(true);
    return this;
  }

  public void unsetConstituentIndex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONSTITUENTINDEX_ISSET_ID);
  }

  /** Returns true if field constituentIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetConstituentIndex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONSTITUENTINDEX_ISSET_ID);
  }

  public void setConstituentIndexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONSTITUENTINDEX_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PARSE_ID:
      if (value == null) {
        unsetParseId();
      } else {
        setParseId((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case CONSTITUENT_INDEX:
      if (value == null) {
        unsetConstituentIndex();
      } else {
        setConstituentIndex((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PARSE_ID:
      return getParseId();

    case CONSTITUENT_INDEX:
      return getConstituentIndex();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PARSE_ID:
      return isSetParseId();
    case CONSTITUENT_INDEX:
      return isSetConstituentIndex();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ConstituentRef)
      return this.equals((ConstituentRef)that);
    return false;
  }

  public boolean equals(ConstituentRef that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_parseId = true && this.isSetParseId();
    boolean that_present_parseId = true && that.isSetParseId();
    if (this_present_parseId || that_present_parseId) {
      if (!(this_present_parseId && that_present_parseId))
        return false;
      if (!this.parseId.equals(that.parseId))
        return false;
    }

    boolean this_present_constituentIndex = true;
    boolean that_present_constituentIndex = true;
    if (this_present_constituentIndex || that_present_constituentIndex) {
      if (!(this_present_constituentIndex && that_present_constituentIndex))
        return false;
      if (this.constituentIndex != that.constituentIndex)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetParseId()) ? 131071 : 524287);
    if (isSetParseId())
      hashCode = hashCode * 8191 + parseId.hashCode();

    hashCode = hashCode * 8191 + constituentIndex;

    return hashCode;
  }

  @Override
  public int compareTo(ConstituentRef other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetParseId()).compareTo(other.isSetParseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parseId, other.parseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConstituentIndex()).compareTo(other.isSetConstituentIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstituentIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constituentIndex, other.constituentIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ConstituentRef(");
    boolean first = true;

    sb.append("parseId:");
    if (this.parseId == null) {
      sb.append("null");
    } else {
      sb.append(this.parseId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("constituentIndex:");
    sb.append(this.constituentIndex);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (parseId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'parseId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'constituentIndex' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (parseId != null) {
      parseId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConstituentRefStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConstituentRefStandardScheme getScheme() {
      return new ConstituentRefStandardScheme();
    }
  }

  private static class ConstituentRefStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConstituentRef> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConstituentRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.parseId = new edu.jhu.hlt.concrete.UUID();
              struct.parseId.read(iprot);
              struct.setParseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONSTITUENT_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.constituentIndex = iprot.readI32();
              struct.setConstituentIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetConstituentIndex()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'constituentIndex' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConstituentRef struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.parseId != null) {
        oprot.writeFieldBegin(PARSE_ID_FIELD_DESC);
        struct.parseId.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONSTITUENT_INDEX_FIELD_DESC);
      oprot.writeI32(struct.constituentIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConstituentRefTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ConstituentRefTupleScheme getScheme() {
      return new ConstituentRefTupleScheme();
    }
  }

  private static class ConstituentRefTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConstituentRef> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConstituentRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.parseId.write(oprot);
      oprot.writeI32(struct.constituentIndex);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConstituentRef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.parseId = new edu.jhu.hlt.concrete.UUID();
      struct.parseId.read(iprot);
      struct.setParseIdIsSet(true);
      struct.constituentIndex = iprot.readI32();
      struct.setConstituentIndexIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

