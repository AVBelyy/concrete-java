/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class TaggedToken implements org.apache.thrift.TBase<TaggedToken, TaggedToken._Fields>, java.io.Serializable, Cloneable, Comparable<TaggedToken> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaggedToken");

  private static final org.apache.thrift.protocol.TField TOKEN_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("tokenIndex", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField TAG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tagList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("confidenceList", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TaggedTokenStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TaggedTokenTupleSchemeFactory();

  private int tokenIndex; // optional
  private java.lang.String tag; // optional
  private double confidence; // optional
  private java.util.List<java.lang.String> tagList; // optional
  private java.util.List<java.lang.Double> confidenceList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * A pointer to the token being tagged.
     * 
     * Token indices are 0-based. These indices are also 0-based.
     */
    TOKEN_INDEX((short)1, "tokenIndex"),
    /**
     * A string containing the annotation.
     * If the tag set you are using is not case sensitive,
     * then all part of speech tags should be normalized to upper case.
     */
    TAG((short)2, "tag"),
    /**
     * Confidence of the annotation.
     */
    CONFIDENCE((short)3, "confidence"),
    /**
     * A list of strings that represent a distribution of possible
     * tags for this token.
     * 
     * If populated, the 'tag' field should also be populated
     * with the "best" value from this list.
     */
    TAG_LIST((short)4, "tagList"),
    /**
     * A list of doubles that represent confidences associated with
     * the tags in the 'tagList' field.
     * 
     * If populated, the 'confidence' field should also be populated
     * with the confidence associated with the "best" tag in 'tagList'.
     */
    CONFIDENCE_LIST((short)5, "confidenceList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKEN_INDEX
          return TOKEN_INDEX;
        case 2: // TAG
          return TAG;
        case 3: // CONFIDENCE
          return CONFIDENCE;
        case 4: // TAG_LIST
          return TAG_LIST;
        case 5: // CONFIDENCE_LIST
          return CONFIDENCE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOKENINDEX_ISSET_ID = 0;
  private static final int __CONFIDENCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TOKEN_INDEX,_Fields.TAG,_Fields.CONFIDENCE,_Fields.TAG_LIST,_Fields.CONFIDENCE_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKEN_INDEX, new org.apache.thrift.meta_data.FieldMetaData("tokenIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TAG_LIST, new org.apache.thrift.meta_data.FieldMetaData("tagList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CONFIDENCE_LIST, new org.apache.thrift.meta_data.FieldMetaData("confidenceList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaggedToken.class, metaDataMap);
  }

  public TaggedToken() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaggedToken(TaggedToken other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tokenIndex = other.tokenIndex;
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    this.confidence = other.confidence;
    if (other.isSetTagList()) {
      java.util.List<java.lang.String> __this__tagList = new java.util.ArrayList<java.lang.String>(other.tagList);
      this.tagList = __this__tagList;
    }
    if (other.isSetConfidenceList()) {
      java.util.List<java.lang.Double> __this__confidenceList = new java.util.ArrayList<java.lang.Double>(other.confidenceList);
      this.confidenceList = __this__confidenceList;
    }
  }

  public TaggedToken deepCopy() {
    return new TaggedToken(this);
  }

  @Override
  public void clear() {
    setTokenIndexIsSet(false);
    this.tokenIndex = 0;
    this.tag = null;
    setConfidenceIsSet(false);
    this.confidence = 0.0;
    this.tagList = null;
    this.confidenceList = null;
  }

  /**
   * A pointer to the token being tagged.
   * 
   * Token indices are 0-based. These indices are also 0-based.
   */
  public int getTokenIndex() {
    return this.tokenIndex;
  }

  /**
   * A pointer to the token being tagged.
   * 
   * Token indices are 0-based. These indices are also 0-based.
   */
  public TaggedToken setTokenIndex(int tokenIndex) {
    this.tokenIndex = tokenIndex;
    setTokenIndexIsSet(true);
    return this;
  }

  public void unsetTokenIndex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOKENINDEX_ISSET_ID);
  }

  /** Returns true if field tokenIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenIndex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOKENINDEX_ISSET_ID);
  }

  public void setTokenIndexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOKENINDEX_ISSET_ID, value);
  }

  /**
   * A string containing the annotation.
   * If the tag set you are using is not case sensitive,
   * then all part of speech tags should be normalized to upper case.
   */
  public java.lang.String getTag() {
    return this.tag;
  }

  /**
   * A string containing the annotation.
   * If the tag set you are using is not case sensitive,
   * then all part of speech tags should be normalized to upper case.
   */
  public TaggedToken setTag(java.lang.String tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  /**
   * Confidence of the annotation.
   */
  public double getConfidence() {
    return this.confidence;
  }

  /**
   * Confidence of the annotation.
   */
  public TaggedToken setConfidence(double confidence) {
    this.confidence = confidence;
    setConfidenceIsSet(true);
    return this;
  }

  public void unsetConfidence() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  public void setConfidenceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
  }

  public int getTagListSize() {
    return (this.tagList == null) ? 0 : this.tagList.size();
  }

  public java.util.Iterator<java.lang.String> getTagListIterator() {
    return (this.tagList == null) ? null : this.tagList.iterator();
  }

  public void addToTagList(java.lang.String elem) {
    if (this.tagList == null) {
      this.tagList = new java.util.ArrayList<java.lang.String>();
    }
    this.tagList.add(elem);
  }

  /**
   * A list of strings that represent a distribution of possible
   * tags for this token.
   * 
   * If populated, the 'tag' field should also be populated
   * with the "best" value from this list.
   */
  public java.util.List<java.lang.String> getTagList() {
    return this.tagList;
  }

  /**
   * A list of strings that represent a distribution of possible
   * tags for this token.
   * 
   * If populated, the 'tag' field should also be populated
   * with the "best" value from this list.
   */
  public TaggedToken setTagList(java.util.List<java.lang.String> tagList) {
    this.tagList = tagList;
    return this;
  }

  public void unsetTagList() {
    this.tagList = null;
  }

  /** Returns true if field tagList is set (has been assigned a value) and false otherwise */
  public boolean isSetTagList() {
    return this.tagList != null;
  }

  public void setTagListIsSet(boolean value) {
    if (!value) {
      this.tagList = null;
    }
  }

  public int getConfidenceListSize() {
    return (this.confidenceList == null) ? 0 : this.confidenceList.size();
  }

  public java.util.Iterator<java.lang.Double> getConfidenceListIterator() {
    return (this.confidenceList == null) ? null : this.confidenceList.iterator();
  }

  public void addToConfidenceList(double elem) {
    if (this.confidenceList == null) {
      this.confidenceList = new java.util.ArrayList<java.lang.Double>();
    }
    this.confidenceList.add(elem);
  }

  /**
   * A list of doubles that represent confidences associated with
   * the tags in the 'tagList' field.
   * 
   * If populated, the 'confidence' field should also be populated
   * with the confidence associated with the "best" tag in 'tagList'.
   */
  public java.util.List<java.lang.Double> getConfidenceList() {
    return this.confidenceList;
  }

  /**
   * A list of doubles that represent confidences associated with
   * the tags in the 'tagList' field.
   * 
   * If populated, the 'confidence' field should also be populated
   * with the confidence associated with the "best" tag in 'tagList'.
   */
  public TaggedToken setConfidenceList(java.util.List<java.lang.Double> confidenceList) {
    this.confidenceList = confidenceList;
    return this;
  }

  public void unsetConfidenceList() {
    this.confidenceList = null;
  }

  /** Returns true if field confidenceList is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidenceList() {
    return this.confidenceList != null;
  }

  public void setConfidenceListIsSet(boolean value) {
    if (!value) {
      this.confidenceList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TOKEN_INDEX:
      if (value == null) {
        unsetTokenIndex();
      } else {
        setTokenIndex((java.lang.Integer)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((java.lang.String)value);
      }
      break;

    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((java.lang.Double)value);
      }
      break;

    case TAG_LIST:
      if (value == null) {
        unsetTagList();
      } else {
        setTagList((java.util.List<java.lang.String>)value);
      }
      break;

    case CONFIDENCE_LIST:
      if (value == null) {
        unsetConfidenceList();
      } else {
        setConfidenceList((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKEN_INDEX:
      return getTokenIndex();

    case TAG:
      return getTag();

    case CONFIDENCE:
      return getConfidence();

    case TAG_LIST:
      return getTagList();

    case CONFIDENCE_LIST:
      return getConfidenceList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TOKEN_INDEX:
      return isSetTokenIndex();
    case TAG:
      return isSetTag();
    case CONFIDENCE:
      return isSetConfidence();
    case TAG_LIST:
      return isSetTagList();
    case CONFIDENCE_LIST:
      return isSetConfidenceList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TaggedToken)
      return this.equals((TaggedToken)that);
    return false;
  }

  public boolean equals(TaggedToken that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tokenIndex = true && this.isSetTokenIndex();
    boolean that_present_tokenIndex = true && that.isSetTokenIndex();
    if (this_present_tokenIndex || that_present_tokenIndex) {
      if (!(this_present_tokenIndex && that_present_tokenIndex))
        return false;
      if (this.tokenIndex != that.tokenIndex)
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_confidence = true && this.isSetConfidence();
    boolean that_present_confidence = true && that.isSetConfidence();
    if (this_present_confidence || that_present_confidence) {
      if (!(this_present_confidence && that_present_confidence))
        return false;
      if (this.confidence != that.confidence)
        return false;
    }

    boolean this_present_tagList = true && this.isSetTagList();
    boolean that_present_tagList = true && that.isSetTagList();
    if (this_present_tagList || that_present_tagList) {
      if (!(this_present_tagList && that_present_tagList))
        return false;
      if (!this.tagList.equals(that.tagList))
        return false;
    }

    boolean this_present_confidenceList = true && this.isSetConfidenceList();
    boolean that_present_confidenceList = true && that.isSetConfidenceList();
    if (this_present_confidenceList || that_present_confidenceList) {
      if (!(this_present_confidenceList && that_present_confidenceList))
        return false;
      if (!this.confidenceList.equals(that.confidenceList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTokenIndex()) ? 131071 : 524287);
    if (isSetTokenIndex())
      hashCode = hashCode * 8191 + tokenIndex;

    hashCode = hashCode * 8191 + ((isSetTag()) ? 131071 : 524287);
    if (isSetTag())
      hashCode = hashCode * 8191 + tag.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfidence()) ? 131071 : 524287);
    if (isSetConfidence())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(confidence);

    hashCode = hashCode * 8191 + ((isSetTagList()) ? 131071 : 524287);
    if (isSetTagList())
      hashCode = hashCode * 8191 + tagList.hashCode();

    hashCode = hashCode * 8191 + ((isSetConfidenceList()) ? 131071 : 524287);
    if (isSetConfidenceList())
      hashCode = hashCode * 8191 + confidenceList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TaggedToken other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTokenIndex()).compareTo(other.isSetTokenIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokenIndex, other.tokenIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfidence()).compareTo(other.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, other.confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTagList()).compareTo(other.isSetTagList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagList, other.tagList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConfidenceList()).compareTo(other.isSetConfidenceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidenceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidenceList, other.confidenceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TaggedToken(");
    boolean first = true;

    if (isSetTokenIndex()) {
      sb.append("tokenIndex:");
      sb.append(this.tokenIndex);
      first = false;
    }
    if (isSetTag()) {
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
    }
    if (isSetConfidence()) {
      if (!first) sb.append(", ");
      sb.append("confidence:");
      sb.append(this.confidence);
      first = false;
    }
    if (isSetTagList()) {
      if (!first) sb.append(", ");
      sb.append("tagList:");
      if (this.tagList == null) {
        sb.append("null");
      } else {
        sb.append(this.tagList);
      }
      first = false;
    }
    if (isSetConfidenceList()) {
      if (!first) sb.append(", ");
      sb.append("confidenceList:");
      if (this.confidenceList == null) {
        sb.append("null");
      } else {
        sb.append(this.confidenceList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaggedTokenStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaggedTokenStandardScheme getScheme() {
      return new TaggedTokenStandardScheme();
    }
  }

  private static class TaggedTokenStandardScheme extends org.apache.thrift.scheme.StandardScheme<TaggedToken> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaggedToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKEN_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tokenIndex = iprot.readI32();
              struct.setTokenIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tag = iprot.readString();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence = iprot.readDouble();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TAG_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.tagList = new java.util.ArrayList<java.lang.String>(_list40.size);
                java.lang.String _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readString();
                  struct.tagList.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setTagListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONFIDENCE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.confidenceList = new java.util.ArrayList<java.lang.Double>(_list43.size);
                double _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = iprot.readDouble();
                  struct.confidenceList.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setConfidenceListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaggedToken struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTokenIndex()) {
        oprot.writeFieldBegin(TOKEN_INDEX_FIELD_DESC);
        oprot.writeI32(struct.tokenIndex);
        oprot.writeFieldEnd();
      }
      if (struct.tag != null) {
        if (struct.isSetTag()) {
          oprot.writeFieldBegin(TAG_FIELD_DESC);
          oprot.writeString(struct.tag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConfidence()) {
        oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.confidence);
        oprot.writeFieldEnd();
      }
      if (struct.tagList != null) {
        if (struct.isSetTagList()) {
          oprot.writeFieldBegin(TAG_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tagList.size()));
            for (java.lang.String _iter46 : struct.tagList)
            {
              oprot.writeString(_iter46);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.confidenceList != null) {
        if (struct.isSetConfidenceList()) {
          oprot.writeFieldBegin(CONFIDENCE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.confidenceList.size()));
            for (double _iter47 : struct.confidenceList)
            {
              oprot.writeDouble(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaggedTokenTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaggedTokenTupleScheme getScheme() {
      return new TaggedTokenTupleScheme();
    }
  }

  private static class TaggedTokenTupleScheme extends org.apache.thrift.scheme.TupleScheme<TaggedToken> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaggedToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTokenIndex()) {
        optionals.set(0);
      }
      if (struct.isSetTag()) {
        optionals.set(1);
      }
      if (struct.isSetConfidence()) {
        optionals.set(2);
      }
      if (struct.isSetTagList()) {
        optionals.set(3);
      }
      if (struct.isSetConfidenceList()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTokenIndex()) {
        oprot.writeI32(struct.tokenIndex);
      }
      if (struct.isSetTag()) {
        oprot.writeString(struct.tag);
      }
      if (struct.isSetConfidence()) {
        oprot.writeDouble(struct.confidence);
      }
      if (struct.isSetTagList()) {
        {
          oprot.writeI32(struct.tagList.size());
          for (java.lang.String _iter48 : struct.tagList)
          {
            oprot.writeString(_iter48);
          }
        }
      }
      if (struct.isSetConfidenceList()) {
        {
          oprot.writeI32(struct.confidenceList.size());
          for (double _iter49 : struct.confidenceList)
          {
            oprot.writeDouble(_iter49);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaggedToken struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.tokenIndex = iprot.readI32();
        struct.setTokenIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tag = iprot.readString();
        struct.setTagIsSet(true);
      }
      if (incoming.get(2)) {
        struct.confidence = iprot.readDouble();
        struct.setConfidenceIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tagList = new java.util.ArrayList<java.lang.String>(_list50.size);
          java.lang.String _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = iprot.readString();
            struct.tagList.add(_elem51);
          }
        }
        struct.setTagListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.confidenceList = new java.util.ArrayList<java.lang.Double>(_list53.size);
          double _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = iprot.readDouble();
            struct.confidenceList.add(_elem54);
          }
        }
        struct.setConfidenceListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

