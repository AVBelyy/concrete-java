/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A single situation, along with pointers to situation mentions that
 * provide evidence for the situation. "Situations" include events,
 * relations, facts, sentiments, and beliefs. Each situation has a
 * core type (such as EVENT or SENTIMENT), along with an optional
 * subtype based on its core type (e.g., event_type=CONTACT_MEET), and
 * a set of zero or more unordered arguments.
 * 
 * This struct may be used for a variety of "processed" Situations such
 * as (but not limited to):
 * - SituationMentions which have been collapsed into a coreferential cluster
 * - Situations which are inferred and not directly supported by a textual mention
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-13")
public class Situation implements org.apache.thrift.TBase<Situation, Situation._Fields>, java.io.Serializable, Cloneable, Comparable<Situation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Situation");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SITUATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("situationType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SITUATION_KIND_FIELD_DESC = new org.apache.thrift.protocol.TField("situationKind", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField ARGUMENT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("argumentList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField MENTION_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mentionIdList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField JUSTIFICATION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("justificationList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField TIME_ML_FIELD_DESC = new org.apache.thrift.protocol.TField("timeML", org.apache.thrift.protocol.TType.STRUCT, (short)54);
  private static final org.apache.thrift.protocol.TField INTENSITY_FIELD_DESC = new org.apache.thrift.protocol.TField("intensity", org.apache.thrift.protocol.TType.DOUBLE, (short)100);
  private static final org.apache.thrift.protocol.TField POLARITY_FIELD_DESC = new org.apache.thrift.protocol.TField("polarity", org.apache.thrift.protocol.TType.STRING, (short)101);
  private static final org.apache.thrift.protocol.TField CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)200);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SituationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SituationTupleSchemeFactory());
  }

  private edu.jhu.hlt.concrete.UUID uuid; // required
  private String situationType; // required
  private String situationKind; // optional
  private List<Argument> argumentList; // optional
  private List<edu.jhu.hlt.concrete.UUID> mentionIdList; // optional
  private List<Justification> justificationList; // optional
  private TimeML timeML; // optional
  private double intensity; // optional
  private String polarity; // optional
  private double confidence; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Unique identifier for this situation.
     */
    UUID((short)1, "uuid"),
    /**
     * The core type of this situation (eg EVENT or SENTIMENT),
     * or a coarse grain situation type.
     */
    SITUATION_TYPE((short)2, "situationType"),
    /**
     * A fine grain situation type that specifically describes the
     * situation based on situationType above. It allows for more
     * detailed description of the situation.
     * 
     * Some examples:
     * 
     * if situationType == EVENT, the event type for the situation
     * if situationType == STATE, the state type
     * if situationType == TEMPORAL_FACT, the temporal fact type
     * 
     * For Propbank, this field should be the predicate lemma and id,
     * e.g. "strike.02". For FrameNet, this should be the frame name,
     * e.g. "Commerce_buy".
     * 
     * Different and more varied situationTypes may be added
     * in the future.
     */
    SITUATION_KIND((short)50, "situationKind"),
    /**
     * The arguments for this situation. Each argument consists of a
     * role and a value. It is possible for an situation to have
     * multiple arguments with the same role. Arguments are
     * unordered.
     */
    ARGUMENT_LIST((short)3, "argumentList"),
    /**
     * Ids of the mentions of this situation in a communication
     * (type=SituationMention)
     */
    MENTION_ID_LIST((short)4, "mentionIdList"),
    /**
     * An list of pointers to SituationMentions that provide
     * justification for this situation. These mentions may be either
     * direct mentions of the situation, or indirect evidence.
     */
    JUSTIFICATION_LIST((short)5, "justificationList"),
    /**
     * A wrapper for TimeML annotations.
     */
    TIME_ML((short)54, "timeML"),
    /**
     * An "intensity" rating for this situation, typically ranging from
     * 0-1. In the case of SENTIMENT situations, this is used to record
     * the intensity of the sentiment.
     */
    INTENSITY((short)100, "intensity"),
    /**
     * The polarity of this situation. In the case of SENTIMENT
     * situations, this is used to record the polarity of the
     * sentiment.
     */
    POLARITY((short)101, "polarity"),
    /**
     * A confidence score for this individual situation. You can also
     * set a confidence score for an entire SituationSet using the
     * SituationSet's metadata.
     */
    CONFIDENCE((short)200, "confidence");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // SITUATION_TYPE
          return SITUATION_TYPE;
        case 50: // SITUATION_KIND
          return SITUATION_KIND;
        case 3: // ARGUMENT_LIST
          return ARGUMENT_LIST;
        case 4: // MENTION_ID_LIST
          return MENTION_ID_LIST;
        case 5: // JUSTIFICATION_LIST
          return JUSTIFICATION_LIST;
        case 54: // TIME_ML
          return TIME_ML;
        case 100: // INTENSITY
          return INTENSITY;
        case 101: // POLARITY
          return POLARITY;
        case 200: // CONFIDENCE
          return CONFIDENCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTENSITY_ISSET_ID = 0;
  private static final int __CONFIDENCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SITUATION_KIND,_Fields.ARGUMENT_LIST,_Fields.MENTION_ID_LIST,_Fields.JUSTIFICATION_LIST,_Fields.TIME_ML,_Fields.INTENSITY,_Fields.POLARITY,_Fields.CONFIDENCE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.SITUATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("situationType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITUATION_KIND, new org.apache.thrift.meta_data.FieldMetaData("situationKind", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARGUMENT_LIST, new org.apache.thrift.meta_data.FieldMetaData("argumentList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Argument.class))));
    tmpMap.put(_Fields.MENTION_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("mentionIdList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class))));
    tmpMap.put(_Fields.JUSTIFICATION_LIST, new org.apache.thrift.meta_data.FieldMetaData("justificationList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Justification.class))));
    tmpMap.put(_Fields.TIME_ML, new org.apache.thrift.meta_data.FieldMetaData("timeML", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeML.class)));
    tmpMap.put(_Fields.INTENSITY, new org.apache.thrift.meta_data.FieldMetaData("intensity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POLARITY, new org.apache.thrift.meta_data.FieldMetaData("polarity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("confidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Situation.class, metaDataMap);
  }

  public Situation() {
  }

  public Situation(
    edu.jhu.hlt.concrete.UUID uuid,
    String situationType)
  {
    this();
    this.uuid = uuid;
    this.situationType = situationType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Situation(Situation other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuid()) {
      this.uuid = new edu.jhu.hlt.concrete.UUID(other.uuid);
    }
    if (other.isSetSituationType()) {
      this.situationType = other.situationType;
    }
    if (other.isSetSituationKind()) {
      this.situationKind = other.situationKind;
    }
    if (other.isSetArgumentList()) {
      List<Argument> __this__argumentList = new ArrayList<Argument>(other.argumentList.size());
      for (Argument other_element : other.argumentList) {
        __this__argumentList.add(new Argument(other_element));
      }
      this.argumentList = __this__argumentList;
    }
    if (other.isSetMentionIdList()) {
      List<edu.jhu.hlt.concrete.UUID> __this__mentionIdList = new ArrayList<edu.jhu.hlt.concrete.UUID>(other.mentionIdList.size());
      for (edu.jhu.hlt.concrete.UUID other_element : other.mentionIdList) {
        __this__mentionIdList.add(new edu.jhu.hlt.concrete.UUID(other_element));
      }
      this.mentionIdList = __this__mentionIdList;
    }
    if (other.isSetJustificationList()) {
      List<Justification> __this__justificationList = new ArrayList<Justification>(other.justificationList.size());
      for (Justification other_element : other.justificationList) {
        __this__justificationList.add(new Justification(other_element));
      }
      this.justificationList = __this__justificationList;
    }
    if (other.isSetTimeML()) {
      this.timeML = new TimeML(other.timeML);
    }
    this.intensity = other.intensity;
    if (other.isSetPolarity()) {
      this.polarity = other.polarity;
    }
    this.confidence = other.confidence;
  }

  public Situation deepCopy() {
    return new Situation(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.situationType = null;
    this.situationKind = null;
    this.argumentList = null;
    this.mentionIdList = null;
    this.justificationList = null;
    this.timeML = null;
    setIntensityIsSet(false);
    this.intensity = 0.0;
    this.polarity = null;
    setConfidenceIsSet(false);
    this.confidence = 0.0;
  }

  /**
   * Unique identifier for this situation.
   */
  public edu.jhu.hlt.concrete.UUID getUuid() {
    return this.uuid;
  }

  /**
   * Unique identifier for this situation.
   */
  public Situation setUuid(edu.jhu.hlt.concrete.UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  /**
   * The core type of this situation (eg EVENT or SENTIMENT),
   * or a coarse grain situation type.
   */
  public String getSituationType() {
    return this.situationType;
  }

  /**
   * The core type of this situation (eg EVENT or SENTIMENT),
   * or a coarse grain situation type.
   */
  public Situation setSituationType(String situationType) {
    this.situationType = situationType;
    return this;
  }

  public void unsetSituationType() {
    this.situationType = null;
  }

  /** Returns true if field situationType is set (has been assigned a value) and false otherwise */
  public boolean isSetSituationType() {
    return this.situationType != null;
  }

  public void setSituationTypeIsSet(boolean value) {
    if (!value) {
      this.situationType = null;
    }
  }

  /**
   * A fine grain situation type that specifically describes the
   * situation based on situationType above. It allows for more
   * detailed description of the situation.
   * 
   * Some examples:
   * 
   * if situationType == EVENT, the event type for the situation
   * if situationType == STATE, the state type
   * if situationType == TEMPORAL_FACT, the temporal fact type
   * 
   * For Propbank, this field should be the predicate lemma and id,
   * e.g. "strike.02". For FrameNet, this should be the frame name,
   * e.g. "Commerce_buy".
   * 
   * Different and more varied situationTypes may be added
   * in the future.
   */
  public String getSituationKind() {
    return this.situationKind;
  }

  /**
   * A fine grain situation type that specifically describes the
   * situation based on situationType above. It allows for more
   * detailed description of the situation.
   * 
   * Some examples:
   * 
   * if situationType == EVENT, the event type for the situation
   * if situationType == STATE, the state type
   * if situationType == TEMPORAL_FACT, the temporal fact type
   * 
   * For Propbank, this field should be the predicate lemma and id,
   * e.g. "strike.02". For FrameNet, this should be the frame name,
   * e.g. "Commerce_buy".
   * 
   * Different and more varied situationTypes may be added
   * in the future.
   */
  public Situation setSituationKind(String situationKind) {
    this.situationKind = situationKind;
    return this;
  }

  public void unsetSituationKind() {
    this.situationKind = null;
  }

  /** Returns true if field situationKind is set (has been assigned a value) and false otherwise */
  public boolean isSetSituationKind() {
    return this.situationKind != null;
  }

  public void setSituationKindIsSet(boolean value) {
    if (!value) {
      this.situationKind = null;
    }
  }

  public int getArgumentListSize() {
    return (this.argumentList == null) ? 0 : this.argumentList.size();
  }

  public java.util.Iterator<Argument> getArgumentListIterator() {
    return (this.argumentList == null) ? null : this.argumentList.iterator();
  }

  public void addToArgumentList(Argument elem) {
    if (this.argumentList == null) {
      this.argumentList = new ArrayList<Argument>();
    }
    this.argumentList.add(elem);
  }

  /**
   * The arguments for this situation. Each argument consists of a
   * role and a value. It is possible for an situation to have
   * multiple arguments with the same role. Arguments are
   * unordered.
   */
  public List<Argument> getArgumentList() {
    return this.argumentList;
  }

  /**
   * The arguments for this situation. Each argument consists of a
   * role and a value. It is possible for an situation to have
   * multiple arguments with the same role. Arguments are
   * unordered.
   */
  public Situation setArgumentList(List<Argument> argumentList) {
    this.argumentList = argumentList;
    return this;
  }

  public void unsetArgumentList() {
    this.argumentList = null;
  }

  /** Returns true if field argumentList is set (has been assigned a value) and false otherwise */
  public boolean isSetArgumentList() {
    return this.argumentList != null;
  }

  public void setArgumentListIsSet(boolean value) {
    if (!value) {
      this.argumentList = null;
    }
  }

  public int getMentionIdListSize() {
    return (this.mentionIdList == null) ? 0 : this.mentionIdList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.UUID> getMentionIdListIterator() {
    return (this.mentionIdList == null) ? null : this.mentionIdList.iterator();
  }

  public void addToMentionIdList(edu.jhu.hlt.concrete.UUID elem) {
    if (this.mentionIdList == null) {
      this.mentionIdList = new ArrayList<edu.jhu.hlt.concrete.UUID>();
    }
    this.mentionIdList.add(elem);
  }

  /**
   * Ids of the mentions of this situation in a communication
   * (type=SituationMention)
   */
  public List<edu.jhu.hlt.concrete.UUID> getMentionIdList() {
    return this.mentionIdList;
  }

  /**
   * Ids of the mentions of this situation in a communication
   * (type=SituationMention)
   */
  public Situation setMentionIdList(List<edu.jhu.hlt.concrete.UUID> mentionIdList) {
    this.mentionIdList = mentionIdList;
    return this;
  }

  public void unsetMentionIdList() {
    this.mentionIdList = null;
  }

  /** Returns true if field mentionIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetMentionIdList() {
    return this.mentionIdList != null;
  }

  public void setMentionIdListIsSet(boolean value) {
    if (!value) {
      this.mentionIdList = null;
    }
  }

  public int getJustificationListSize() {
    return (this.justificationList == null) ? 0 : this.justificationList.size();
  }

  public java.util.Iterator<Justification> getJustificationListIterator() {
    return (this.justificationList == null) ? null : this.justificationList.iterator();
  }

  public void addToJustificationList(Justification elem) {
    if (this.justificationList == null) {
      this.justificationList = new ArrayList<Justification>();
    }
    this.justificationList.add(elem);
  }

  /**
   * An list of pointers to SituationMentions that provide
   * justification for this situation. These mentions may be either
   * direct mentions of the situation, or indirect evidence.
   */
  public List<Justification> getJustificationList() {
    return this.justificationList;
  }

  /**
   * An list of pointers to SituationMentions that provide
   * justification for this situation. These mentions may be either
   * direct mentions of the situation, or indirect evidence.
   */
  public Situation setJustificationList(List<Justification> justificationList) {
    this.justificationList = justificationList;
    return this;
  }

  public void unsetJustificationList() {
    this.justificationList = null;
  }

  /** Returns true if field justificationList is set (has been assigned a value) and false otherwise */
  public boolean isSetJustificationList() {
    return this.justificationList != null;
  }

  public void setJustificationListIsSet(boolean value) {
    if (!value) {
      this.justificationList = null;
    }
  }

  /**
   * A wrapper for TimeML annotations.
   */
  public TimeML getTimeML() {
    return this.timeML;
  }

  /**
   * A wrapper for TimeML annotations.
   */
  public Situation setTimeML(TimeML timeML) {
    this.timeML = timeML;
    return this;
  }

  public void unsetTimeML() {
    this.timeML = null;
  }

  /** Returns true if field timeML is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeML() {
    return this.timeML != null;
  }

  public void setTimeMLIsSet(boolean value) {
    if (!value) {
      this.timeML = null;
    }
  }

  /**
   * An "intensity" rating for this situation, typically ranging from
   * 0-1. In the case of SENTIMENT situations, this is used to record
   * the intensity of the sentiment.
   */
  public double getIntensity() {
    return this.intensity;
  }

  /**
   * An "intensity" rating for this situation, typically ranging from
   * 0-1. In the case of SENTIMENT situations, this is used to record
   * the intensity of the sentiment.
   */
  public Situation setIntensity(double intensity) {
    this.intensity = intensity;
    setIntensityIsSet(true);
    return this;
  }

  public void unsetIntensity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTENSITY_ISSET_ID);
  }

  /** Returns true if field intensity is set (has been assigned a value) and false otherwise */
  public boolean isSetIntensity() {
    return EncodingUtils.testBit(__isset_bitfield, __INTENSITY_ISSET_ID);
  }

  public void setIntensityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTENSITY_ISSET_ID, value);
  }

  /**
   * The polarity of this situation. In the case of SENTIMENT
   * situations, this is used to record the polarity of the
   * sentiment.
   */
  public String getPolarity() {
    return this.polarity;
  }

  /**
   * The polarity of this situation. In the case of SENTIMENT
   * situations, this is used to record the polarity of the
   * sentiment.
   */
  public Situation setPolarity(String polarity) {
    this.polarity = polarity;
    return this;
  }

  public void unsetPolarity() {
    this.polarity = null;
  }

  /** Returns true if field polarity is set (has been assigned a value) and false otherwise */
  public boolean isSetPolarity() {
    return this.polarity != null;
  }

  public void setPolarityIsSet(boolean value) {
    if (!value) {
      this.polarity = null;
    }
  }

  /**
   * A confidence score for this individual situation. You can also
   * set a confidence score for an entire SituationSet using the
   * SituationSet's metadata.
   */
  public double getConfidence() {
    return this.confidence;
  }

  /**
   * A confidence score for this individual situation. You can also
   * set a confidence score for an entire SituationSet using the
   * SituationSet's metadata.
   */
  public Situation setConfidence(double confidence) {
    this.confidence = confidence;
    setConfidenceIsSet(true);
    return this;
  }

  public void unsetConfidence() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidence() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIDENCE_ISSET_ID);
  }

  public void setConfidenceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIDENCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case SITUATION_TYPE:
      if (value == null) {
        unsetSituationType();
      } else {
        setSituationType((String)value);
      }
      break;

    case SITUATION_KIND:
      if (value == null) {
        unsetSituationKind();
      } else {
        setSituationKind((String)value);
      }
      break;

    case ARGUMENT_LIST:
      if (value == null) {
        unsetArgumentList();
      } else {
        setArgumentList((List<Argument>)value);
      }
      break;

    case MENTION_ID_LIST:
      if (value == null) {
        unsetMentionIdList();
      } else {
        setMentionIdList((List<edu.jhu.hlt.concrete.UUID>)value);
      }
      break;

    case JUSTIFICATION_LIST:
      if (value == null) {
        unsetJustificationList();
      } else {
        setJustificationList((List<Justification>)value);
      }
      break;

    case TIME_ML:
      if (value == null) {
        unsetTimeML();
      } else {
        setTimeML((TimeML)value);
      }
      break;

    case INTENSITY:
      if (value == null) {
        unsetIntensity();
      } else {
        setIntensity((Double)value);
      }
      break;

    case POLARITY:
      if (value == null) {
        unsetPolarity();
      } else {
        setPolarity((String)value);
      }
      break;

    case CONFIDENCE:
      if (value == null) {
        unsetConfidence();
      } else {
        setConfidence((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case SITUATION_TYPE:
      return getSituationType();

    case SITUATION_KIND:
      return getSituationKind();

    case ARGUMENT_LIST:
      return getArgumentList();

    case MENTION_ID_LIST:
      return getMentionIdList();

    case JUSTIFICATION_LIST:
      return getJustificationList();

    case TIME_ML:
      return getTimeML();

    case INTENSITY:
      return getIntensity();

    case POLARITY:
      return getPolarity();

    case CONFIDENCE:
      return getConfidence();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case SITUATION_TYPE:
      return isSetSituationType();
    case SITUATION_KIND:
      return isSetSituationKind();
    case ARGUMENT_LIST:
      return isSetArgumentList();
    case MENTION_ID_LIST:
      return isSetMentionIdList();
    case JUSTIFICATION_LIST:
      return isSetJustificationList();
    case TIME_ML:
      return isSetTimeML();
    case INTENSITY:
      return isSetIntensity();
    case POLARITY:
      return isSetPolarity();
    case CONFIDENCE:
      return isSetConfidence();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Situation)
      return this.equals((Situation)that);
    return false;
  }

  public boolean equals(Situation that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_situationType = true && this.isSetSituationType();
    boolean that_present_situationType = true && that.isSetSituationType();
    if (this_present_situationType || that_present_situationType) {
      if (!(this_present_situationType && that_present_situationType))
        return false;
      if (!this.situationType.equals(that.situationType))
        return false;
    }

    boolean this_present_situationKind = true && this.isSetSituationKind();
    boolean that_present_situationKind = true && that.isSetSituationKind();
    if (this_present_situationKind || that_present_situationKind) {
      if (!(this_present_situationKind && that_present_situationKind))
        return false;
      if (!this.situationKind.equals(that.situationKind))
        return false;
    }

    boolean this_present_argumentList = true && this.isSetArgumentList();
    boolean that_present_argumentList = true && that.isSetArgumentList();
    if (this_present_argumentList || that_present_argumentList) {
      if (!(this_present_argumentList && that_present_argumentList))
        return false;
      if (!this.argumentList.equals(that.argumentList))
        return false;
    }

    boolean this_present_mentionIdList = true && this.isSetMentionIdList();
    boolean that_present_mentionIdList = true && that.isSetMentionIdList();
    if (this_present_mentionIdList || that_present_mentionIdList) {
      if (!(this_present_mentionIdList && that_present_mentionIdList))
        return false;
      if (!this.mentionIdList.equals(that.mentionIdList))
        return false;
    }

    boolean this_present_justificationList = true && this.isSetJustificationList();
    boolean that_present_justificationList = true && that.isSetJustificationList();
    if (this_present_justificationList || that_present_justificationList) {
      if (!(this_present_justificationList && that_present_justificationList))
        return false;
      if (!this.justificationList.equals(that.justificationList))
        return false;
    }

    boolean this_present_timeML = true && this.isSetTimeML();
    boolean that_present_timeML = true && that.isSetTimeML();
    if (this_present_timeML || that_present_timeML) {
      if (!(this_present_timeML && that_present_timeML))
        return false;
      if (!this.timeML.equals(that.timeML))
        return false;
    }

    boolean this_present_intensity = true && this.isSetIntensity();
    boolean that_present_intensity = true && that.isSetIntensity();
    if (this_present_intensity || that_present_intensity) {
      if (!(this_present_intensity && that_present_intensity))
        return false;
      if (this.intensity != that.intensity)
        return false;
    }

    boolean this_present_polarity = true && this.isSetPolarity();
    boolean that_present_polarity = true && that.isSetPolarity();
    if (this_present_polarity || that_present_polarity) {
      if (!(this_present_polarity && that_present_polarity))
        return false;
      if (!this.polarity.equals(that.polarity))
        return false;
    }

    boolean this_present_confidence = true && this.isSetConfidence();
    boolean that_present_confidence = true && that.isSetConfidence();
    if (this_present_confidence || that_present_confidence) {
      if (!(this_present_confidence && that_present_confidence))
        return false;
      if (this.confidence != that.confidence)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uuid = true && (isSetUuid());
    list.add(present_uuid);
    if (present_uuid)
      list.add(uuid);

    boolean present_situationType = true && (isSetSituationType());
    list.add(present_situationType);
    if (present_situationType)
      list.add(situationType);

    boolean present_situationKind = true && (isSetSituationKind());
    list.add(present_situationKind);
    if (present_situationKind)
      list.add(situationKind);

    boolean present_argumentList = true && (isSetArgumentList());
    list.add(present_argumentList);
    if (present_argumentList)
      list.add(argumentList);

    boolean present_mentionIdList = true && (isSetMentionIdList());
    list.add(present_mentionIdList);
    if (present_mentionIdList)
      list.add(mentionIdList);

    boolean present_justificationList = true && (isSetJustificationList());
    list.add(present_justificationList);
    if (present_justificationList)
      list.add(justificationList);

    boolean present_timeML = true && (isSetTimeML());
    list.add(present_timeML);
    if (present_timeML)
      list.add(timeML);

    boolean present_intensity = true && (isSetIntensity());
    list.add(present_intensity);
    if (present_intensity)
      list.add(intensity);

    boolean present_polarity = true && (isSetPolarity());
    list.add(present_polarity);
    if (present_polarity)
      list.add(polarity);

    boolean present_confidence = true && (isSetConfidence());
    list.add(present_confidence);
    if (present_confidence)
      list.add(confidence);

    return list.hashCode();
  }

  @Override
  public int compareTo(Situation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSituationType()).compareTo(other.isSetSituationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSituationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.situationType, other.situationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSituationKind()).compareTo(other.isSetSituationKind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSituationKind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.situationKind, other.situationKind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgumentList()).compareTo(other.isSetArgumentList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgumentList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argumentList, other.argumentList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMentionIdList()).compareTo(other.isSetMentionIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMentionIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mentionIdList, other.mentionIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJustificationList()).compareTo(other.isSetJustificationList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJustificationList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.justificationList, other.justificationList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeML()).compareTo(other.isSetTimeML());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeML()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeML, other.timeML);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntensity()).compareTo(other.isSetIntensity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntensity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intensity, other.intensity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPolarity()).compareTo(other.isSetPolarity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPolarity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.polarity, other.polarity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfidence()).compareTo(other.isSetConfidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confidence, other.confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Situation(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("situationType:");
    if (this.situationType == null) {
      sb.append("null");
    } else {
      sb.append(this.situationType);
    }
    first = false;
    if (isSetSituationKind()) {
      if (!first) sb.append(", ");
      sb.append("situationKind:");
      if (this.situationKind == null) {
        sb.append("null");
      } else {
        sb.append(this.situationKind);
      }
      first = false;
    }
    if (isSetArgumentList()) {
      if (!first) sb.append(", ");
      sb.append("argumentList:");
      if (this.argumentList == null) {
        sb.append("null");
      } else {
        sb.append(this.argumentList);
      }
      first = false;
    }
    if (isSetMentionIdList()) {
      if (!first) sb.append(", ");
      sb.append("mentionIdList:");
      if (this.mentionIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.mentionIdList);
      }
      first = false;
    }
    if (isSetJustificationList()) {
      if (!first) sb.append(", ");
      sb.append("justificationList:");
      if (this.justificationList == null) {
        sb.append("null");
      } else {
        sb.append(this.justificationList);
      }
      first = false;
    }
    if (isSetTimeML()) {
      if (!first) sb.append(", ");
      sb.append("timeML:");
      if (this.timeML == null) {
        sb.append("null");
      } else {
        sb.append(this.timeML);
      }
      first = false;
    }
    if (isSetIntensity()) {
      if (!first) sb.append(", ");
      sb.append("intensity:");
      sb.append(this.intensity);
      first = false;
    }
    if (isSetPolarity()) {
      if (!first) sb.append(", ");
      sb.append("polarity:");
      if (this.polarity == null) {
        sb.append("null");
      } else {
        sb.append(this.polarity);
      }
      first = false;
    }
    if (isSetConfidence()) {
      if (!first) sb.append(", ");
      sb.append("confidence:");
      sb.append(this.confidence);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (situationType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'situationType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uuid != null) {
      uuid.validate();
    }
    if (timeML != null) {
      timeML.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SituationStandardSchemeFactory implements SchemeFactory {
    public SituationStandardScheme getScheme() {
      return new SituationStandardScheme();
    }
  }

  private static class SituationStandardScheme extends StandardScheme<Situation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Situation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uuid = new edu.jhu.hlt.concrete.UUID();
              struct.uuid.read(iprot);
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SITUATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.situationType = iprot.readString();
              struct.setSituationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // SITUATION_KIND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.situationKind = iprot.readString();
              struct.setSituationKindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARGUMENT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.argumentList = new ArrayList<Argument>(_list16.size);
                Argument _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new Argument();
                  _elem17.read(iprot);
                  struct.argumentList.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setArgumentListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MENTION_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.mentionIdList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list19.size);
                edu.jhu.hlt.concrete.UUID _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new edu.jhu.hlt.concrete.UUID();
                  _elem20.read(iprot);
                  struct.mentionIdList.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setMentionIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JUSTIFICATION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.justificationList = new ArrayList<Justification>(_list22.size);
                Justification _elem23;
                for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                {
                  _elem23 = new Justification();
                  _elem23.read(iprot);
                  struct.justificationList.add(_elem23);
                }
                iprot.readListEnd();
              }
              struct.setJustificationListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // TIME_ML
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timeML = new TimeML();
              struct.timeML.read(iprot);
              struct.setTimeMLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // INTENSITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.intensity = iprot.readDouble();
              struct.setIntensityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // POLARITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.polarity = iprot.readString();
              struct.setPolarityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 200: // CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confidence = iprot.readDouble();
              struct.setConfidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Situation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        struct.uuid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.situationType != null) {
        oprot.writeFieldBegin(SITUATION_TYPE_FIELD_DESC);
        oprot.writeString(struct.situationType);
        oprot.writeFieldEnd();
      }
      if (struct.argumentList != null) {
        if (struct.isSetArgumentList()) {
          oprot.writeFieldBegin(ARGUMENT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.argumentList.size()));
            for (Argument _iter25 : struct.argumentList)
            {
              _iter25.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.mentionIdList != null) {
        if (struct.isSetMentionIdList()) {
          oprot.writeFieldBegin(MENTION_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mentionIdList.size()));
            for (edu.jhu.hlt.concrete.UUID _iter26 : struct.mentionIdList)
            {
              _iter26.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.justificationList != null) {
        if (struct.isSetJustificationList()) {
          oprot.writeFieldBegin(JUSTIFICATION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.justificationList.size()));
            for (Justification _iter27 : struct.justificationList)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.situationKind != null) {
        if (struct.isSetSituationKind()) {
          oprot.writeFieldBegin(SITUATION_KIND_FIELD_DESC);
          oprot.writeString(struct.situationKind);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeML != null) {
        if (struct.isSetTimeML()) {
          oprot.writeFieldBegin(TIME_ML_FIELD_DESC);
          struct.timeML.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIntensity()) {
        oprot.writeFieldBegin(INTENSITY_FIELD_DESC);
        oprot.writeDouble(struct.intensity);
        oprot.writeFieldEnd();
      }
      if (struct.polarity != null) {
        if (struct.isSetPolarity()) {
          oprot.writeFieldBegin(POLARITY_FIELD_DESC);
          oprot.writeString(struct.polarity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConfidence()) {
        oprot.writeFieldBegin(CONFIDENCE_FIELD_DESC);
        oprot.writeDouble(struct.confidence);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SituationTupleSchemeFactory implements SchemeFactory {
    public SituationTupleScheme getScheme() {
      return new SituationTupleScheme();
    }
  }

  private static class SituationTupleScheme extends TupleScheme<Situation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Situation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.uuid.write(oprot);
      oprot.writeString(struct.situationType);
      BitSet optionals = new BitSet();
      if (struct.isSetSituationKind()) {
        optionals.set(0);
      }
      if (struct.isSetArgumentList()) {
        optionals.set(1);
      }
      if (struct.isSetMentionIdList()) {
        optionals.set(2);
      }
      if (struct.isSetJustificationList()) {
        optionals.set(3);
      }
      if (struct.isSetTimeML()) {
        optionals.set(4);
      }
      if (struct.isSetIntensity()) {
        optionals.set(5);
      }
      if (struct.isSetPolarity()) {
        optionals.set(6);
      }
      if (struct.isSetConfidence()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSituationKind()) {
        oprot.writeString(struct.situationKind);
      }
      if (struct.isSetArgumentList()) {
        {
          oprot.writeI32(struct.argumentList.size());
          for (Argument _iter28 : struct.argumentList)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetMentionIdList()) {
        {
          oprot.writeI32(struct.mentionIdList.size());
          for (edu.jhu.hlt.concrete.UUID _iter29 : struct.mentionIdList)
          {
            _iter29.write(oprot);
          }
        }
      }
      if (struct.isSetJustificationList()) {
        {
          oprot.writeI32(struct.justificationList.size());
          for (Justification _iter30 : struct.justificationList)
          {
            _iter30.write(oprot);
          }
        }
      }
      if (struct.isSetTimeML()) {
        struct.timeML.write(oprot);
      }
      if (struct.isSetIntensity()) {
        oprot.writeDouble(struct.intensity);
      }
      if (struct.isSetPolarity()) {
        oprot.writeString(struct.polarity);
      }
      if (struct.isSetConfidence()) {
        oprot.writeDouble(struct.confidence);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Situation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuid = new edu.jhu.hlt.concrete.UUID();
      struct.uuid.read(iprot);
      struct.setUuidIsSet(true);
      struct.situationType = iprot.readString();
      struct.setSituationTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.situationKind = iprot.readString();
        struct.setSituationKindIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.argumentList = new ArrayList<Argument>(_list31.size);
          Argument _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new Argument();
            _elem32.read(iprot);
            struct.argumentList.add(_elem32);
          }
        }
        struct.setArgumentListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.mentionIdList = new ArrayList<edu.jhu.hlt.concrete.UUID>(_list34.size);
          edu.jhu.hlt.concrete.UUID _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = new edu.jhu.hlt.concrete.UUID();
            _elem35.read(iprot);
            struct.mentionIdList.add(_elem35);
          }
        }
        struct.setMentionIdListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.justificationList = new ArrayList<Justification>(_list37.size);
          Justification _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new Justification();
            _elem38.read(iprot);
            struct.justificationList.add(_elem38);
          }
        }
        struct.setJustificationListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.timeML = new TimeML();
        struct.timeML.read(iprot);
        struct.setTimeMLIsSet(true);
      }
      if (incoming.get(5)) {
        struct.intensity = iprot.readDouble();
        struct.setIntensityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.polarity = iprot.readString();
        struct.setPolarityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.confidence = iprot.readDouble();
        struct.setConfidenceIsSet(true);
      }
    }
  }

}

