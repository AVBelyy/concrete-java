/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * A lattice structure that assigns scores to a set of token
 * sequences.  The lattice is encoded as an FSA, where states are
 * identified by integers, and each arc is annotated with an
 * optional tokens and a weight.  (Arcs with no tokens are
 * "epsilon" arcs.)  The lattice has a single start state and a
 * single end state.  (You can use epsilon edges to simulate
 * multiple start states or multiple end states, if desired.)
 * 
 * The score of a path through the lattice is the sum of the weights
 * of the arcs that make up that path.  A path with a lower score
 * is considered "better" than a path with a higher score.
 * 
 * If possible, path scores should be negative log likelihoods
 * (with base e -- e.g. if P=1, then weight=0; and if P=0.5, then
 * weight=0.693).  Furthermore, if possible, the path scores should
 * be globally normalized (i.e., they should encode probabilities).
 * This will allow for them to be combined with other information
 * in a reasonable way when determining confidences for system
 * outputs.
 * 
 * TokenLattices should never contain any paths with cycles.  Every
 * arc in the lattice should be included in some path from the start
 * state to the end state.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)")
public class TokenLattice implements org.apache.thrift.TBase<TokenLattice, TokenLattice._Fields>, java.io.Serializable, Cloneable, Comparable<TokenLattice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TokenLattice");

  private static final org.apache.thrift.protocol.TField START_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startState", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField END_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endState", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ARC_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("arcList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CACHED_BEST_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("cachedBestPath", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TokenLatticeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TokenLatticeTupleSchemeFactory();

  private int startState; // optional
  private int endState; // optional
  private java.util.List<Arc> arcList; // required
  private LatticePath cachedBestPath; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_STATE((short)1, "startState"),
    END_STATE((short)2, "endState"),
    ARC_LIST((short)3, "arcList"),
    CACHED_BEST_PATH((short)4, "cachedBestPath");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_STATE
          return START_STATE;
        case 2: // END_STATE
          return END_STATE;
        case 3: // ARC_LIST
          return ARC_LIST;
        case 4: // CACHED_BEST_PATH
          return CACHED_BEST_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTSTATE_ISSET_ID = 0;
  private static final int __ENDSTATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.START_STATE,_Fields.END_STATE,_Fields.CACHED_BEST_PATH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_STATE, new org.apache.thrift.meta_data.FieldMetaData("startState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_STATE, new org.apache.thrift.meta_data.FieldMetaData("endState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARC_LIST, new org.apache.thrift.meta_data.FieldMetaData("arcList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Arc.class))));
    tmpMap.put(_Fields.CACHED_BEST_PATH, new org.apache.thrift.meta_data.FieldMetaData("cachedBestPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LatticePath.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TokenLattice.class, metaDataMap);
  }

  public TokenLattice() {
    this.startState = 0;

    this.endState = 0;

  }

  public TokenLattice(
    java.util.List<Arc> arcList)
  {
    this();
    this.arcList = arcList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TokenLattice(TokenLattice other) {
    __isset_bitfield = other.__isset_bitfield;
    this.startState = other.startState;
    this.endState = other.endState;
    if (other.isSetArcList()) {
      java.util.List<Arc> __this__arcList = new java.util.ArrayList<Arc>(other.arcList.size());
      for (Arc other_element : other.arcList) {
        __this__arcList.add(new Arc(other_element));
      }
      this.arcList = __this__arcList;
    }
    if (other.isSetCachedBestPath()) {
      this.cachedBestPath = new LatticePath(other.cachedBestPath);
    }
  }

  public TokenLattice deepCopy() {
    return new TokenLattice(this);
  }

  @Override
  public void clear() {
    this.startState = 0;

    this.endState = 0;

    this.arcList = null;
    this.cachedBestPath = null;
  }

  public int getStartState() {
    return this.startState;
  }

  public TokenLattice setStartState(int startState) {
    this.startState = startState;
    setStartStateIsSet(true);
    return this;
  }

  public void unsetStartState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTSTATE_ISSET_ID);
  }

  /** Returns true if field startState is set (has been assigned a value) and false otherwise */
  public boolean isSetStartState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTSTATE_ISSET_ID);
  }

  public void setStartStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTSTATE_ISSET_ID, value);
  }

  public int getEndState() {
    return this.endState;
  }

  public TokenLattice setEndState(int endState) {
    this.endState = endState;
    setEndStateIsSet(true);
    return this;
  }

  public void unsetEndState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDSTATE_ISSET_ID);
  }

  /** Returns true if field endState is set (has been assigned a value) and false otherwise */
  public boolean isSetEndState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDSTATE_ISSET_ID);
  }

  public void setEndStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDSTATE_ISSET_ID, value);
  }

  public int getArcListSize() {
    return (this.arcList == null) ? 0 : this.arcList.size();
  }

  public java.util.Iterator<Arc> getArcListIterator() {
    return (this.arcList == null) ? null : this.arcList.iterator();
  }

  public void addToArcList(Arc elem) {
    if (this.arcList == null) {
      this.arcList = new java.util.ArrayList<Arc>();
    }
    this.arcList.add(elem);
  }

  public java.util.List<Arc> getArcList() {
    return this.arcList;
  }

  public TokenLattice setArcList(java.util.List<Arc> arcList) {
    this.arcList = arcList;
    return this;
  }

  public void unsetArcList() {
    this.arcList = null;
  }

  /** Returns true if field arcList is set (has been assigned a value) and false otherwise */
  public boolean isSetArcList() {
    return this.arcList != null;
  }

  public void setArcListIsSet(boolean value) {
    if (!value) {
      this.arcList = null;
    }
  }

  public LatticePath getCachedBestPath() {
    return this.cachedBestPath;
  }

  public TokenLattice setCachedBestPath(LatticePath cachedBestPath) {
    this.cachedBestPath = cachedBestPath;
    return this;
  }

  public void unsetCachedBestPath() {
    this.cachedBestPath = null;
  }

  /** Returns true if field cachedBestPath is set (has been assigned a value) and false otherwise */
  public boolean isSetCachedBestPath() {
    return this.cachedBestPath != null;
  }

  public void setCachedBestPathIsSet(boolean value) {
    if (!value) {
      this.cachedBestPath = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case START_STATE:
      if (value == null) {
        unsetStartState();
      } else {
        setStartState((java.lang.Integer)value);
      }
      break;

    case END_STATE:
      if (value == null) {
        unsetEndState();
      } else {
        setEndState((java.lang.Integer)value);
      }
      break;

    case ARC_LIST:
      if (value == null) {
        unsetArcList();
      } else {
        setArcList((java.util.List<Arc>)value);
      }
      break;

    case CACHED_BEST_PATH:
      if (value == null) {
        unsetCachedBestPath();
      } else {
        setCachedBestPath((LatticePath)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case START_STATE:
      return getStartState();

    case END_STATE:
      return getEndState();

    case ARC_LIST:
      return getArcList();

    case CACHED_BEST_PATH:
      return getCachedBestPath();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case START_STATE:
      return isSetStartState();
    case END_STATE:
      return isSetEndState();
    case ARC_LIST:
      return isSetArcList();
    case CACHED_BEST_PATH:
      return isSetCachedBestPath();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TokenLattice)
      return this.equals((TokenLattice)that);
    return false;
  }

  public boolean equals(TokenLattice that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_startState = true && this.isSetStartState();
    boolean that_present_startState = true && that.isSetStartState();
    if (this_present_startState || that_present_startState) {
      if (!(this_present_startState && that_present_startState))
        return false;
      if (this.startState != that.startState)
        return false;
    }

    boolean this_present_endState = true && this.isSetEndState();
    boolean that_present_endState = true && that.isSetEndState();
    if (this_present_endState || that_present_endState) {
      if (!(this_present_endState && that_present_endState))
        return false;
      if (this.endState != that.endState)
        return false;
    }

    boolean this_present_arcList = true && this.isSetArcList();
    boolean that_present_arcList = true && that.isSetArcList();
    if (this_present_arcList || that_present_arcList) {
      if (!(this_present_arcList && that_present_arcList))
        return false;
      if (!this.arcList.equals(that.arcList))
        return false;
    }

    boolean this_present_cachedBestPath = true && this.isSetCachedBestPath();
    boolean that_present_cachedBestPath = true && that.isSetCachedBestPath();
    if (this_present_cachedBestPath || that_present_cachedBestPath) {
      if (!(this_present_cachedBestPath && that_present_cachedBestPath))
        return false;
      if (!this.cachedBestPath.equals(that.cachedBestPath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStartState()) ? 131071 : 524287);
    if (isSetStartState())
      hashCode = hashCode * 8191 + startState;

    hashCode = hashCode * 8191 + ((isSetEndState()) ? 131071 : 524287);
    if (isSetEndState())
      hashCode = hashCode * 8191 + endState;

    hashCode = hashCode * 8191 + ((isSetArcList()) ? 131071 : 524287);
    if (isSetArcList())
      hashCode = hashCode * 8191 + arcList.hashCode();

    hashCode = hashCode * 8191 + ((isSetCachedBestPath()) ? 131071 : 524287);
    if (isSetCachedBestPath())
      hashCode = hashCode * 8191 + cachedBestPath.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TokenLattice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStartState()).compareTo(other.isSetStartState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startState, other.startState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndState()).compareTo(other.isSetEndState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endState, other.endState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArcList()).compareTo(other.isSetArcList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArcList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arcList, other.arcList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCachedBestPath()).compareTo(other.isSetCachedBestPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCachedBestPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cachedBestPath, other.cachedBestPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TokenLattice(");
    boolean first = true;

    if (isSetStartState()) {
      sb.append("startState:");
      sb.append(this.startState);
      first = false;
    }
    if (isSetEndState()) {
      if (!first) sb.append(", ");
      sb.append("endState:");
      sb.append(this.endState);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("arcList:");
    if (this.arcList == null) {
      sb.append("null");
    } else {
      sb.append(this.arcList);
    }
    first = false;
    if (isSetCachedBestPath()) {
      if (!first) sb.append(", ");
      sb.append("cachedBestPath:");
      if (this.cachedBestPath == null) {
        sb.append("null");
      } else {
        sb.append(this.cachedBestPath);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (arcList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arcList' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (cachedBestPath != null) {
      cachedBestPath.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenLatticeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TokenLatticeStandardScheme getScheme() {
      return new TokenLatticeStandardScheme();
    }
  }

  private static class TokenLatticeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TokenLattice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TokenLattice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startState = iprot.readI32();
              struct.setStartStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // END_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endState = iprot.readI32();
              struct.setEndStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARC_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.arcList = new java.util.ArrayList<Arc>(_list72.size);
                Arc _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = new Arc();
                  _elem73.read(iprot);
                  struct.arcList.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setArcListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CACHED_BEST_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cachedBestPath = new LatticePath();
              struct.cachedBestPath.read(iprot);
              struct.setCachedBestPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TokenLattice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetStartState()) {
        oprot.writeFieldBegin(START_STATE_FIELD_DESC);
        oprot.writeI32(struct.startState);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndState()) {
        oprot.writeFieldBegin(END_STATE_FIELD_DESC);
        oprot.writeI32(struct.endState);
        oprot.writeFieldEnd();
      }
      if (struct.arcList != null) {
        oprot.writeFieldBegin(ARC_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arcList.size()));
          for (Arc _iter75 : struct.arcList)
          {
            _iter75.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cachedBestPath != null) {
        if (struct.isSetCachedBestPath()) {
          oprot.writeFieldBegin(CACHED_BEST_PATH_FIELD_DESC);
          struct.cachedBestPath.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenLatticeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TokenLatticeTupleScheme getScheme() {
      return new TokenLatticeTupleScheme();
    }
  }

  private static class TokenLatticeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TokenLattice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TokenLattice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.arcList.size());
        for (Arc _iter76 : struct.arcList)
        {
          _iter76.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStartState()) {
        optionals.set(0);
      }
      if (struct.isSetEndState()) {
        optionals.set(1);
      }
      if (struct.isSetCachedBestPath()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStartState()) {
        oprot.writeI32(struct.startState);
      }
      if (struct.isSetEndState()) {
        oprot.writeI32(struct.endState);
      }
      if (struct.isSetCachedBestPath()) {
        struct.cachedBestPath.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TokenLattice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.arcList = new java.util.ArrayList<Arc>(_list77.size);
        Arc _elem78;
        for (int _i79 = 0; _i79 < _list77.size; ++_i79)
        {
          _elem78 = new Arc();
          _elem78.read(iprot);
          struct.arcList.add(_elem78);
        }
      }
      struct.setArcListIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.startState = iprot.readI32();
        struct.setStartStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.endState = iprot.readI32();
        struct.setEndStateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cachedBestPath = new LatticePath();
        struct.cachedBestPath.read(iprot);
        struct.setCachedBestPathIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

