/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete.search;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * An individual element returned from a search.  Most/all methods
 * will return a communicationId, possibly with an associated score.
 * For example if the target element type of the search is Sentence
 * then the sentenceId field should be populated.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class SearchResultItem implements org.apache.thrift.TBase<SearchResultItem, SearchResultItem._Fields>, java.io.Serializable, Cloneable, Comparable<SearchResultItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchResultItem");

  private static final org.apache.thrift.protocol.TField COMMUNICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("communicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SENTENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sentenceId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("tokens", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchResultItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchResultItemTupleSchemeFactory());
  }

  private String communicationId; // optional
  private edu.jhu.hlt.concrete.UUID sentenceId; // optional
  private double score; // optional
  private edu.jhu.hlt.concrete.TokenRefSequence tokens; // optional
  private edu.jhu.hlt.concrete.Entity entity; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMUNICATION_ID((short)1, "communicationId"),
    /**
     * The UUID of the returned sentence, which appears in the
     * communication referenced by communicationId.
     */
    SENTENCE_ID((short)2, "sentenceId"),
    /**
     * Values are not restricted in range (e.g., do not have to be
     * within [0,1]).  Higher is better.
     * 
     */
    SCORE((short)3, "score"),
    /**
     * If SearchType=ENTITY_MENTIONS then this field should be populated.
     * Otherwise, this field may be optionally populated in order to
     * provide a hint to the client as to where to center a
     * visualization, or the extraction of context, etc.
     */
    TOKENS((short)4, "tokens"),
    /**
     * If SearchType=ENTITIES then this field should be populated.
     */
    ENTITY((short)5, "entity");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMUNICATION_ID
          return COMMUNICATION_ID;
        case 2: // SENTENCE_ID
          return SENTENCE_ID;
        case 3: // SCORE
          return SCORE;
        case 4: // TOKENS
          return TOKENS;
        case 5: // ENTITY
          return ENTITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCORE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMMUNICATION_ID,_Fields.SENTENCE_ID,_Fields.SCORE,_Fields.TOKENS,_Fields.ENTITY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMUNICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("communicationId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENTENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sentenceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOKENS, new org.apache.thrift.meta_data.FieldMetaData("tokens", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.TokenRefSequence.class)));
    tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.Entity.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchResultItem.class, metaDataMap);
  }

  public SearchResultItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchResultItem(SearchResultItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCommunicationId()) {
      this.communicationId = other.communicationId;
    }
    if (other.isSetSentenceId()) {
      this.sentenceId = new edu.jhu.hlt.concrete.UUID(other.sentenceId);
    }
    this.score = other.score;
    if (other.isSetTokens()) {
      this.tokens = new edu.jhu.hlt.concrete.TokenRefSequence(other.tokens);
    }
    if (other.isSetEntity()) {
      this.entity = new edu.jhu.hlt.concrete.Entity(other.entity);
    }
  }

  public SearchResultItem deepCopy() {
    return new SearchResultItem(this);
  }

  @Override
  public void clear() {
    this.communicationId = null;
    this.sentenceId = null;
    setScoreIsSet(false);
    this.score = 0.0;
    this.tokens = null;
    this.entity = null;
  }

  public String getCommunicationId() {
    return this.communicationId;
  }

  public SearchResultItem setCommunicationId(String communicationId) {
    this.communicationId = communicationId;
    return this;
  }

  public void unsetCommunicationId() {
    this.communicationId = null;
  }

  /** Returns true if field communicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommunicationId() {
    return this.communicationId != null;
  }

  public void setCommunicationIdIsSet(boolean value) {
    if (!value) {
      this.communicationId = null;
    }
  }

  /**
   * The UUID of the returned sentence, which appears in the
   * communication referenced by communicationId.
   */
  public edu.jhu.hlt.concrete.UUID getSentenceId() {
    return this.sentenceId;
  }

  /**
   * The UUID of the returned sentence, which appears in the
   * communication referenced by communicationId.
   */
  public SearchResultItem setSentenceId(edu.jhu.hlt.concrete.UUID sentenceId) {
    this.sentenceId = sentenceId;
    return this;
  }

  public void unsetSentenceId() {
    this.sentenceId = null;
  }

  /** Returns true if field sentenceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSentenceId() {
    return this.sentenceId != null;
  }

  public void setSentenceIdIsSet(boolean value) {
    if (!value) {
      this.sentenceId = null;
    }
  }

  /**
   * Values are not restricted in range (e.g., do not have to be
   * within [0,1]).  Higher is better.
   * 
   */
  public double getScore() {
    return this.score;
  }

  /**
   * Values are not restricted in range (e.g., do not have to be
   * within [0,1]).  Higher is better.
   * 
   */
  public SearchResultItem setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  /**
   * If SearchType=ENTITY_MENTIONS then this field should be populated.
   * Otherwise, this field may be optionally populated in order to
   * provide a hint to the client as to where to center a
   * visualization, or the extraction of context, etc.
   */
  public edu.jhu.hlt.concrete.TokenRefSequence getTokens() {
    return this.tokens;
  }

  /**
   * If SearchType=ENTITY_MENTIONS then this field should be populated.
   * Otherwise, this field may be optionally populated in order to
   * provide a hint to the client as to where to center a
   * visualization, or the extraction of context, etc.
   */
  public SearchResultItem setTokens(edu.jhu.hlt.concrete.TokenRefSequence tokens) {
    this.tokens = tokens;
    return this;
  }

  public void unsetTokens() {
    this.tokens = null;
  }

  /** Returns true if field tokens is set (has been assigned a value) and false otherwise */
  public boolean isSetTokens() {
    return this.tokens != null;
  }

  public void setTokensIsSet(boolean value) {
    if (!value) {
      this.tokens = null;
    }
  }

  /**
   * If SearchType=ENTITIES then this field should be populated.
   */
  public edu.jhu.hlt.concrete.Entity getEntity() {
    return this.entity;
  }

  /**
   * If SearchType=ENTITIES then this field should be populated.
   */
  public SearchResultItem setEntity(edu.jhu.hlt.concrete.Entity entity) {
    this.entity = entity;
    return this;
  }

  public void unsetEntity() {
    this.entity = null;
  }

  /** Returns true if field entity is set (has been assigned a value) and false otherwise */
  public boolean isSetEntity() {
    return this.entity != null;
  }

  public void setEntityIsSet(boolean value) {
    if (!value) {
      this.entity = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMUNICATION_ID:
      if (value == null) {
        unsetCommunicationId();
      } else {
        setCommunicationId((String)value);
      }
      break;

    case SENTENCE_ID:
      if (value == null) {
        unsetSentenceId();
      } else {
        setSentenceId((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Double)value);
      }
      break;

    case TOKENS:
      if (value == null) {
        unsetTokens();
      } else {
        setTokens((edu.jhu.hlt.concrete.TokenRefSequence)value);
      }
      break;

    case ENTITY:
      if (value == null) {
        unsetEntity();
      } else {
        setEntity((edu.jhu.hlt.concrete.Entity)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMUNICATION_ID:
      return getCommunicationId();

    case SENTENCE_ID:
      return getSentenceId();

    case SCORE:
      return getScore();

    case TOKENS:
      return getTokens();

    case ENTITY:
      return getEntity();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMUNICATION_ID:
      return isSetCommunicationId();
    case SENTENCE_ID:
      return isSetSentenceId();
    case SCORE:
      return isSetScore();
    case TOKENS:
      return isSetTokens();
    case ENTITY:
      return isSetEntity();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchResultItem)
      return this.equals((SearchResultItem)that);
    return false;
  }

  public boolean equals(SearchResultItem that) {
    if (that == null)
      return false;

    boolean this_present_communicationId = true && this.isSetCommunicationId();
    boolean that_present_communicationId = true && that.isSetCommunicationId();
    if (this_present_communicationId || that_present_communicationId) {
      if (!(this_present_communicationId && that_present_communicationId))
        return false;
      if (!this.communicationId.equals(that.communicationId))
        return false;
    }

    boolean this_present_sentenceId = true && this.isSetSentenceId();
    boolean that_present_sentenceId = true && that.isSetSentenceId();
    if (this_present_sentenceId || that_present_sentenceId) {
      if (!(this_present_sentenceId && that_present_sentenceId))
        return false;
      if (!this.sentenceId.equals(that.sentenceId))
        return false;
    }

    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_tokens = true && this.isSetTokens();
    boolean that_present_tokens = true && that.isSetTokens();
    if (this_present_tokens || that_present_tokens) {
      if (!(this_present_tokens && that_present_tokens))
        return false;
      if (!this.tokens.equals(that.tokens))
        return false;
    }

    boolean this_present_entity = true && this.isSetEntity();
    boolean that_present_entity = true && that.isSetEntity();
    if (this_present_entity || that_present_entity) {
      if (!(this_present_entity && that_present_entity))
        return false;
      if (!this.entity.equals(that.entity))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_communicationId = true && (isSetCommunicationId());
    list.add(present_communicationId);
    if (present_communicationId)
      list.add(communicationId);

    boolean present_sentenceId = true && (isSetSentenceId());
    list.add(present_sentenceId);
    if (present_sentenceId)
      list.add(sentenceId);

    boolean present_score = true && (isSetScore());
    list.add(present_score);
    if (present_score)
      list.add(score);

    boolean present_tokens = true && (isSetTokens());
    list.add(present_tokens);
    if (present_tokens)
      list.add(tokens);

    boolean present_entity = true && (isSetEntity());
    list.add(present_entity);
    if (present_entity)
      list.add(entity);

    return list.hashCode();
  }

  @Override
  public int compareTo(SearchResultItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCommunicationId()).compareTo(other.isSetCommunicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommunicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communicationId, other.communicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentenceId()).compareTo(other.isSetSentenceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentenceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentenceId, other.sentenceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTokens()).compareTo(other.isSetTokens());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokens()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tokens, other.tokens);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchResultItem(");
    boolean first = true;

    if (isSetCommunicationId()) {
      sb.append("communicationId:");
      if (this.communicationId == null) {
        sb.append("null");
      } else {
        sb.append(this.communicationId);
      }
      first = false;
    }
    if (isSetSentenceId()) {
      if (!first) sb.append(", ");
      sb.append("sentenceId:");
      if (this.sentenceId == null) {
        sb.append("null");
      } else {
        sb.append(this.sentenceId);
      }
      first = false;
    }
    if (isSetScore()) {
      if (!first) sb.append(", ");
      sb.append("score:");
      sb.append(this.score);
      first = false;
    }
    if (isSetTokens()) {
      if (!first) sb.append(", ");
      sb.append("tokens:");
      if (this.tokens == null) {
        sb.append("null");
      } else {
        sb.append(this.tokens);
      }
      first = false;
    }
    if (isSetEntity()) {
      if (!first) sb.append(", ");
      sb.append("entity:");
      if (this.entity == null) {
        sb.append("null");
      } else {
        sb.append(this.entity);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sentenceId != null) {
      sentenceId.validate();
    }
    if (tokens != null) {
      tokens.validate();
    }
    if (entity != null) {
      entity.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchResultItemStandardSchemeFactory implements SchemeFactory {
    public SearchResultItemStandardScheme getScheme() {
      return new SearchResultItemStandardScheme();
    }
  }

  private static class SearchResultItemStandardScheme extends StandardScheme<SearchResultItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchResultItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMUNICATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.communicationId = iprot.readString();
              struct.setCommunicationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENTENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sentenceId = new edu.jhu.hlt.concrete.UUID();
              struct.sentenceId.read(iprot);
              struct.setSentenceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOKENS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tokens = new edu.jhu.hlt.concrete.TokenRefSequence();
              struct.tokens.read(iprot);
              struct.setTokensIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.entity = new edu.jhu.hlt.concrete.Entity();
              struct.entity.read(iprot);
              struct.setEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchResultItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.communicationId != null) {
        if (struct.isSetCommunicationId()) {
          oprot.writeFieldBegin(COMMUNICATION_ID_FIELD_DESC);
          oprot.writeString(struct.communicationId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sentenceId != null) {
        if (struct.isSetSentenceId()) {
          oprot.writeFieldBegin(SENTENCE_ID_FIELD_DESC);
          struct.sentenceId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetScore()) {
        oprot.writeFieldBegin(SCORE_FIELD_DESC);
        oprot.writeDouble(struct.score);
        oprot.writeFieldEnd();
      }
      if (struct.tokens != null) {
        if (struct.isSetTokens()) {
          oprot.writeFieldBegin(TOKENS_FIELD_DESC);
          struct.tokens.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.entity != null) {
        if (struct.isSetEntity()) {
          oprot.writeFieldBegin(ENTITY_FIELD_DESC);
          struct.entity.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchResultItemTupleSchemeFactory implements SchemeFactory {
    public SearchResultItemTupleScheme getScheme() {
      return new SearchResultItemTupleScheme();
    }
  }

  private static class SearchResultItemTupleScheme extends TupleScheme<SearchResultItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchResultItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommunicationId()) {
        optionals.set(0);
      }
      if (struct.isSetSentenceId()) {
        optionals.set(1);
      }
      if (struct.isSetScore()) {
        optionals.set(2);
      }
      if (struct.isSetTokens()) {
        optionals.set(3);
      }
      if (struct.isSetEntity()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCommunicationId()) {
        oprot.writeString(struct.communicationId);
      }
      if (struct.isSetSentenceId()) {
        struct.sentenceId.write(oprot);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
      if (struct.isSetTokens()) {
        struct.tokens.write(oprot);
      }
      if (struct.isSetEntity()) {
        struct.entity.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchResultItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.communicationId = iprot.readString();
        struct.setCommunicationIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sentenceId = new edu.jhu.hlt.concrete.UUID();
        struct.sentenceId.read(iprot);
        struct.setSentenceIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tokens = new edu.jhu.hlt.concrete.TokenRefSequence();
        struct.tokens.read(iprot);
        struct.setTokensIsSet(true);
      }
      if (incoming.get(4)) {
        struct.entity = new edu.jhu.hlt.concrete.Entity();
        struct.entity.read(iprot);
        struct.setEntityIsSet(true);
      }
    }
  }

}

