/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Information about the structure of a dependency parse.
 * This information is computable from the list of dependencies,
 * but this allows the consumer to make (verified) assumptions
 * about the dependencies being processed.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-10")
public class DependencyParseStructure implements org.apache.thrift.TBase<DependencyParseStructure, DependencyParseStructure._Fields>, java.io.Serializable, Cloneable, Comparable<DependencyParseStructure> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DependencyParseStructure");

  private static final org.apache.thrift.protocol.TField IS_ACYCLIC_FIELD_DESC = new org.apache.thrift.protocol.TField("isAcyclic", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField IS_CONNECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isConnected", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField IS_SINGLE_HEADED_FIELD_DESC = new org.apache.thrift.protocol.TField("isSingleHeaded", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField IS_PROJECTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isProjective", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DependencyParseStructureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DependencyParseStructureTupleSchemeFactory());
  }

  private boolean isAcyclic; // required
  private boolean isConnected; // required
  private boolean isSingleHeaded; // required
  private boolean isProjective; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * True iff there are no cycles in the dependency graph.
     */
    IS_ACYCLIC((short)1, "isAcyclic"),
    /**
     * True iff the dependency graph forms a single connected component.
     */
    IS_CONNECTED((short)2, "isConnected"),
    /**
     * True iff every node in the dependency parse has at most
     * one head/parent/governor.
     */
    IS_SINGLE_HEADED((short)3, "isSingleHeaded"),
    /**
     * True iff there are no crossing edges in the dependency parse.
     */
    IS_PROJECTIVE((short)4, "isProjective");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_ACYCLIC
          return IS_ACYCLIC;
        case 2: // IS_CONNECTED
          return IS_CONNECTED;
        case 3: // IS_SINGLE_HEADED
          return IS_SINGLE_HEADED;
        case 4: // IS_PROJECTIVE
          return IS_PROJECTIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISACYCLIC_ISSET_ID = 0;
  private static final int __ISCONNECTED_ISSET_ID = 1;
  private static final int __ISSINGLEHEADED_ISSET_ID = 2;
  private static final int __ISPROJECTIVE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_ACYCLIC, new org.apache.thrift.meta_data.FieldMetaData("isAcyclic", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_CONNECTED, new org.apache.thrift.meta_data.FieldMetaData("isConnected", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SINGLE_HEADED, new org.apache.thrift.meta_data.FieldMetaData("isSingleHeaded", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PROJECTIVE, new org.apache.thrift.meta_data.FieldMetaData("isProjective", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DependencyParseStructure.class, metaDataMap);
  }

  public DependencyParseStructure() {
  }

  public DependencyParseStructure(
    boolean isAcyclic,
    boolean isConnected,
    boolean isSingleHeaded,
    boolean isProjective)
  {
    this();
    this.isAcyclic = isAcyclic;
    setIsAcyclicIsSet(true);
    this.isConnected = isConnected;
    setIsConnectedIsSet(true);
    this.isSingleHeaded = isSingleHeaded;
    setIsSingleHeadedIsSet(true);
    this.isProjective = isProjective;
    setIsProjectiveIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DependencyParseStructure(DependencyParseStructure other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isAcyclic = other.isAcyclic;
    this.isConnected = other.isConnected;
    this.isSingleHeaded = other.isSingleHeaded;
    this.isProjective = other.isProjective;
  }

  public DependencyParseStructure deepCopy() {
    return new DependencyParseStructure(this);
  }

  @Override
  public void clear() {
    setIsAcyclicIsSet(false);
    this.isAcyclic = false;
    setIsConnectedIsSet(false);
    this.isConnected = false;
    setIsSingleHeadedIsSet(false);
    this.isSingleHeaded = false;
    setIsProjectiveIsSet(false);
    this.isProjective = false;
  }

  /**
   * True iff there are no cycles in the dependency graph.
   */
  public boolean isIsAcyclic() {
    return this.isAcyclic;
  }

  /**
   * True iff there are no cycles in the dependency graph.
   */
  public DependencyParseStructure setIsAcyclic(boolean isAcyclic) {
    this.isAcyclic = isAcyclic;
    setIsAcyclicIsSet(true);
    return this;
  }

  public void unsetIsAcyclic() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISACYCLIC_ISSET_ID);
  }

  /** Returns true if field isAcyclic is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAcyclic() {
    return EncodingUtils.testBit(__isset_bitfield, __ISACYCLIC_ISSET_ID);
  }

  public void setIsAcyclicIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISACYCLIC_ISSET_ID, value);
  }

  /**
   * True iff the dependency graph forms a single connected component.
   */
  public boolean isIsConnected() {
    return this.isConnected;
  }

  /**
   * True iff the dependency graph forms a single connected component.
   */
  public DependencyParseStructure setIsConnected(boolean isConnected) {
    this.isConnected = isConnected;
    setIsConnectedIsSet(true);
    return this;
  }

  public void unsetIsConnected() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCONNECTED_ISSET_ID);
  }

  /** Returns true if field isConnected is set (has been assigned a value) and false otherwise */
  public boolean isSetIsConnected() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCONNECTED_ISSET_ID);
  }

  public void setIsConnectedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCONNECTED_ISSET_ID, value);
  }

  /**
   * True iff every node in the dependency parse has at most
   * one head/parent/governor.
   */
  public boolean isIsSingleHeaded() {
    return this.isSingleHeaded;
  }

  /**
   * True iff every node in the dependency parse has at most
   * one head/parent/governor.
   */
  public DependencyParseStructure setIsSingleHeaded(boolean isSingleHeaded) {
    this.isSingleHeaded = isSingleHeaded;
    setIsSingleHeadedIsSet(true);
    return this;
  }

  public void unsetIsSingleHeaded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSINGLEHEADED_ISSET_ID);
  }

  /** Returns true if field isSingleHeaded is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSingleHeaded() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSINGLEHEADED_ISSET_ID);
  }

  public void setIsSingleHeadedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSINGLEHEADED_ISSET_ID, value);
  }

  /**
   * True iff there are no crossing edges in the dependency parse.
   */
  public boolean isIsProjective() {
    return this.isProjective;
  }

  /**
   * True iff there are no crossing edges in the dependency parse.
   */
  public DependencyParseStructure setIsProjective(boolean isProjective) {
    this.isProjective = isProjective;
    setIsProjectiveIsSet(true);
    return this;
  }

  public void unsetIsProjective() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPROJECTIVE_ISSET_ID);
  }

  /** Returns true if field isProjective is set (has been assigned a value) and false otherwise */
  public boolean isSetIsProjective() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPROJECTIVE_ISSET_ID);
  }

  public void setIsProjectiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPROJECTIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_ACYCLIC:
      if (value == null) {
        unsetIsAcyclic();
      } else {
        setIsAcyclic((Boolean)value);
      }
      break;

    case IS_CONNECTED:
      if (value == null) {
        unsetIsConnected();
      } else {
        setIsConnected((Boolean)value);
      }
      break;

    case IS_SINGLE_HEADED:
      if (value == null) {
        unsetIsSingleHeaded();
      } else {
        setIsSingleHeaded((Boolean)value);
      }
      break;

    case IS_PROJECTIVE:
      if (value == null) {
        unsetIsProjective();
      } else {
        setIsProjective((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_ACYCLIC:
      return isIsAcyclic();

    case IS_CONNECTED:
      return isIsConnected();

    case IS_SINGLE_HEADED:
      return isIsSingleHeaded();

    case IS_PROJECTIVE:
      return isIsProjective();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_ACYCLIC:
      return isSetIsAcyclic();
    case IS_CONNECTED:
      return isSetIsConnected();
    case IS_SINGLE_HEADED:
      return isSetIsSingleHeaded();
    case IS_PROJECTIVE:
      return isSetIsProjective();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DependencyParseStructure)
      return this.equals((DependencyParseStructure)that);
    return false;
  }

  public boolean equals(DependencyParseStructure that) {
    if (that == null)
      return false;

    boolean this_present_isAcyclic = true;
    boolean that_present_isAcyclic = true;
    if (this_present_isAcyclic || that_present_isAcyclic) {
      if (!(this_present_isAcyclic && that_present_isAcyclic))
        return false;
      if (this.isAcyclic != that.isAcyclic)
        return false;
    }

    boolean this_present_isConnected = true;
    boolean that_present_isConnected = true;
    if (this_present_isConnected || that_present_isConnected) {
      if (!(this_present_isConnected && that_present_isConnected))
        return false;
      if (this.isConnected != that.isConnected)
        return false;
    }

    boolean this_present_isSingleHeaded = true;
    boolean that_present_isSingleHeaded = true;
    if (this_present_isSingleHeaded || that_present_isSingleHeaded) {
      if (!(this_present_isSingleHeaded && that_present_isSingleHeaded))
        return false;
      if (this.isSingleHeaded != that.isSingleHeaded)
        return false;
    }

    boolean this_present_isProjective = true;
    boolean that_present_isProjective = true;
    if (this_present_isProjective || that_present_isProjective) {
      if (!(this_present_isProjective && that_present_isProjective))
        return false;
      if (this.isProjective != that.isProjective)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_isAcyclic = true;
    list.add(present_isAcyclic);
    if (present_isAcyclic)
      list.add(isAcyclic);

    boolean present_isConnected = true;
    list.add(present_isConnected);
    if (present_isConnected)
      list.add(isConnected);

    boolean present_isSingleHeaded = true;
    list.add(present_isSingleHeaded);
    if (present_isSingleHeaded)
      list.add(isSingleHeaded);

    boolean present_isProjective = true;
    list.add(present_isProjective);
    if (present_isProjective)
      list.add(isProjective);

    return list.hashCode();
  }

  @Override
  public int compareTo(DependencyParseStructure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsAcyclic()).compareTo(other.isSetIsAcyclic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAcyclic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAcyclic, other.isAcyclic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsConnected()).compareTo(other.isSetIsConnected());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsConnected()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isConnected, other.isConnected);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSingleHeaded()).compareTo(other.isSetIsSingleHeaded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSingleHeaded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSingleHeaded, other.isSingleHeaded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsProjective()).compareTo(other.isSetIsProjective());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsProjective()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isProjective, other.isProjective);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DependencyParseStructure(");
    boolean first = true;

    sb.append("isAcyclic:");
    sb.append(this.isAcyclic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isConnected:");
    sb.append(this.isConnected);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSingleHeaded:");
    sb.append(this.isSingleHeaded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isProjective:");
    sb.append(this.isProjective);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'isAcyclic' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isConnected' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isSingleHeaded' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isProjective' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DependencyParseStructureStandardSchemeFactory implements SchemeFactory {
    public DependencyParseStructureStandardScheme getScheme() {
      return new DependencyParseStructureStandardScheme();
    }
  }

  private static class DependencyParseStructureStandardScheme extends StandardScheme<DependencyParseStructure> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DependencyParseStructure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_ACYCLIC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAcyclic = iprot.readBool();
              struct.setIsAcyclicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_CONNECTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isConnected = iprot.readBool();
              struct.setIsConnectedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_SINGLE_HEADED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSingleHeaded = iprot.readBool();
              struct.setIsSingleHeadedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_PROJECTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isProjective = iprot.readBool();
              struct.setIsProjectiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsAcyclic()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isAcyclic' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsConnected()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isConnected' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsSingleHeaded()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isSingleHeaded' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsProjective()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isProjective' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DependencyParseStructure struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_ACYCLIC_FIELD_DESC);
      oprot.writeBool(struct.isAcyclic);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CONNECTED_FIELD_DESC);
      oprot.writeBool(struct.isConnected);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SINGLE_HEADED_FIELD_DESC);
      oprot.writeBool(struct.isSingleHeaded);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PROJECTIVE_FIELD_DESC);
      oprot.writeBool(struct.isProjective);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DependencyParseStructureTupleSchemeFactory implements SchemeFactory {
    public DependencyParseStructureTupleScheme getScheme() {
      return new DependencyParseStructureTupleScheme();
    }
  }

  private static class DependencyParseStructureTupleScheme extends TupleScheme<DependencyParseStructure> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DependencyParseStructure struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.isAcyclic);
      oprot.writeBool(struct.isConnected);
      oprot.writeBool(struct.isSingleHeaded);
      oprot.writeBool(struct.isProjective);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DependencyParseStructure struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.isAcyclic = iprot.readBool();
      struct.setIsAcyclicIsSet(true);
      struct.isConnected = iprot.readBool();
      struct.setIsConnectedIsSet(true);
      struct.isSingleHeaded = iprot.readBool();
      struct.setIsSingleHeadedIsSet(true);
      struct.isProjective = iprot.readBool();
      struct.setIsProjectiveIsSet(true);
    }
  }

}

