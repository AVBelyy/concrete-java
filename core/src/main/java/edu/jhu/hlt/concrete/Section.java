/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.jhu.hlt.concrete;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A single "section" of a communication, such as a paragraph. Each
 * section is defined using a text or audio span, and can optionally
 * contain a list of sentences.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-01-13")
public class Section implements org.apache.thrift.TBase<Section, Section._Fields>, java.io.Serializable, Cloneable, Comparable<Section> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Section");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SENTENCE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sentenceList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TEXT_SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("textSpan", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField RAW_TEXT_SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("rawTextSpan", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField AUDIO_SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("audioSpan", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField KIND_FIELD_DESC = new org.apache.thrift.protocol.TField("kind", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NUMBER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("numberList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField LID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("lidList", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SectionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SectionTupleSchemeFactory());
  }

  private edu.jhu.hlt.concrete.UUID uuid; // required
  private List<Sentence> sentenceList; // optional
  private edu.jhu.hlt.concrete.TextSpan textSpan; // optional
  private edu.jhu.hlt.concrete.TextSpan rawTextSpan; // optional
  private edu.jhu.hlt.concrete.AudioSpan audioSpan; // optional
  private String kind; // required
  private String label; // optional
  private List<Integer> numberList; // optional
  private List<edu.jhu.hlt.concrete.LanguageIdentification> lidList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The unique identifier for this section.
     */
    UUID((short)1, "uuid"),
    /**
     * The sentences of this "section."
     */
    SENTENCE_LIST((short)2, "sentenceList"),
    /**
     * Location of this section in the communication text.
     * 
     * NOTE: This text span represents a best guess, or 'provenance':
     * it cannot be guaranteed that this text span matches the _exact_
     * text of the original document, but is the annotation's best
     * effort at such a representation.
     */
    TEXT_SPAN((short)3, "textSpan"),
    /**
     * Location of this section in the raw text.
     * 
     * NOTE: This text span represents a best guess, or 'provenance':
     * it cannot be guaranteed that this text span matches the _exact_
     * text of the original document, but is the annotation's best
     * effort at such a representation.
     */
    RAW_TEXT_SPAN((short)4, "rawTextSpan"),
    /**
     * Location of this section in the original audio.
     * 
     * NOTE: This span represents a best guess, or 'provenance':
     * it cannot be guaranteed that this text span matches the _exact_
     * text of the original document, but is the annotation's best
     * effort at such a representation.
     */
    AUDIO_SPAN((short)9, "audioSpan"),
    /**
     * A short, sometimes corpus-specific term characterizing the nature
     * of the section; may change in a future version of concrete.  This
     * often acts as a coarse-grained descriptor that is used for
     * filtering.  For example, Gigaword uses the section kind "passage"
     * to distinguish content-bearing paragraphs in the body of an
     * article from other paragraphs, such as the headline and dateline.
     */
    KIND((short)5, "kind"),
    /**
     * The name of the section. For example, a title of a section on
     * Wikipedia.
     */
    LABEL((short)6, "label"),
    /**
     * Position within the communication with respect to other Sections:
     * The section number, E.g., 3, or 3.1, or 3.1.2, etc. Aimed at
     * Communications with content organized in a hierarchy, such as a Book
     * with multiple chapters, then sections, then paragraphs. Or even a
     * dense Wikipedia page with subsections. Sections should still be
     * arranged linearly, where reading these numbers should not be required
     * to get a start-to-finish enumeration of the Communication's content.
     */
    NUMBER_LIST((short)7, "numberList"),
    /**
     * An optional field to be used for multi-language documents.
     * 
     * This field should be populated when a section is inside of
     * a document that contains multiple languages.
     * 
     * Minimally, each block of text in one language should be it's own
     * section. For example, if a paragraph is in English and the
     * paragraph afterwards is in French, these should be separated into
     * two different sections, allowing language-specific analytics to
     * run on appropriate sections.
     */
    LID_LIST((short)8, "lidList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // SENTENCE_LIST
          return SENTENCE_LIST;
        case 3: // TEXT_SPAN
          return TEXT_SPAN;
        case 4: // RAW_TEXT_SPAN
          return RAW_TEXT_SPAN;
        case 9: // AUDIO_SPAN
          return AUDIO_SPAN;
        case 5: // KIND
          return KIND;
        case 6: // LABEL
          return LABEL;
        case 7: // NUMBER_LIST
          return NUMBER_LIST;
        case 8: // LID_LIST
          return LID_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SENTENCE_LIST,_Fields.TEXT_SPAN,_Fields.RAW_TEXT_SPAN,_Fields.AUDIO_SPAN,_Fields.LABEL,_Fields.NUMBER_LIST,_Fields.LID_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.UUID.class)));
    tmpMap.put(_Fields.SENTENCE_LIST, new org.apache.thrift.meta_data.FieldMetaData("sentenceList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sentence.class))));
    tmpMap.put(_Fields.TEXT_SPAN, new org.apache.thrift.meta_data.FieldMetaData("textSpan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.TextSpan.class)));
    tmpMap.put(_Fields.RAW_TEXT_SPAN, new org.apache.thrift.meta_data.FieldMetaData("rawTextSpan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.TextSpan.class)));
    tmpMap.put(_Fields.AUDIO_SPAN, new org.apache.thrift.meta_data.FieldMetaData("audioSpan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.AudioSpan.class)));
    tmpMap.put(_Fields.KIND, new org.apache.thrift.meta_data.FieldMetaData("kind", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER_LIST, new org.apache.thrift.meta_data.FieldMetaData("numberList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LID_LIST, new org.apache.thrift.meta_data.FieldMetaData("lidList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.jhu.hlt.concrete.LanguageIdentification.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Section.class, metaDataMap);
  }

  public Section() {
  }

  public Section(
    edu.jhu.hlt.concrete.UUID uuid,
    String kind)
  {
    this();
    this.uuid = uuid;
    this.kind = kind;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Section(Section other) {
    if (other.isSetUuid()) {
      this.uuid = new edu.jhu.hlt.concrete.UUID(other.uuid);
    }
    if (other.isSetSentenceList()) {
      List<Sentence> __this__sentenceList = new ArrayList<Sentence>(other.sentenceList.size());
      for (Sentence other_element : other.sentenceList) {
        __this__sentenceList.add(new Sentence(other_element));
      }
      this.sentenceList = __this__sentenceList;
    }
    if (other.isSetTextSpan()) {
      this.textSpan = new edu.jhu.hlt.concrete.TextSpan(other.textSpan);
    }
    if (other.isSetRawTextSpan()) {
      this.rawTextSpan = new edu.jhu.hlt.concrete.TextSpan(other.rawTextSpan);
    }
    if (other.isSetAudioSpan()) {
      this.audioSpan = new edu.jhu.hlt.concrete.AudioSpan(other.audioSpan);
    }
    if (other.isSetKind()) {
      this.kind = other.kind;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetNumberList()) {
      List<Integer> __this__numberList = new ArrayList<Integer>(other.numberList);
      this.numberList = __this__numberList;
    }
    if (other.isSetLidList()) {
      List<edu.jhu.hlt.concrete.LanguageIdentification> __this__lidList = new ArrayList<edu.jhu.hlt.concrete.LanguageIdentification>(other.lidList.size());
      for (edu.jhu.hlt.concrete.LanguageIdentification other_element : other.lidList) {
        __this__lidList.add(new edu.jhu.hlt.concrete.LanguageIdentification(other_element));
      }
      this.lidList = __this__lidList;
    }
  }

  public Section deepCopy() {
    return new Section(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.sentenceList = null;
    this.textSpan = null;
    this.rawTextSpan = null;
    this.audioSpan = null;
    this.kind = null;
    this.label = null;
    this.numberList = null;
    this.lidList = null;
  }

  /**
   * The unique identifier for this section.
   */
  public edu.jhu.hlt.concrete.UUID getUuid() {
    return this.uuid;
  }

  /**
   * The unique identifier for this section.
   */
  public Section setUuid(edu.jhu.hlt.concrete.UUID uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public int getSentenceListSize() {
    return (this.sentenceList == null) ? 0 : this.sentenceList.size();
  }

  public java.util.Iterator<Sentence> getSentenceListIterator() {
    return (this.sentenceList == null) ? null : this.sentenceList.iterator();
  }

  public void addToSentenceList(Sentence elem) {
    if (this.sentenceList == null) {
      this.sentenceList = new ArrayList<Sentence>();
    }
    this.sentenceList.add(elem);
  }

  /**
   * The sentences of this "section."
   */
  public List<Sentence> getSentenceList() {
    return this.sentenceList;
  }

  /**
   * The sentences of this "section."
   */
  public Section setSentenceList(List<Sentence> sentenceList) {
    this.sentenceList = sentenceList;
    return this;
  }

  public void unsetSentenceList() {
    this.sentenceList = null;
  }

  /** Returns true if field sentenceList is set (has been assigned a value) and false otherwise */
  public boolean isSetSentenceList() {
    return this.sentenceList != null;
  }

  public void setSentenceListIsSet(boolean value) {
    if (!value) {
      this.sentenceList = null;
    }
  }

  /**
   * Location of this section in the communication text.
   * 
   * NOTE: This text span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public edu.jhu.hlt.concrete.TextSpan getTextSpan() {
    return this.textSpan;
  }

  /**
   * Location of this section in the communication text.
   * 
   * NOTE: This text span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public Section setTextSpan(edu.jhu.hlt.concrete.TextSpan textSpan) {
    this.textSpan = textSpan;
    return this;
  }

  public void unsetTextSpan() {
    this.textSpan = null;
  }

  /** Returns true if field textSpan is set (has been assigned a value) and false otherwise */
  public boolean isSetTextSpan() {
    return this.textSpan != null;
  }

  public void setTextSpanIsSet(boolean value) {
    if (!value) {
      this.textSpan = null;
    }
  }

  /**
   * Location of this section in the raw text.
   * 
   * NOTE: This text span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public edu.jhu.hlt.concrete.TextSpan getRawTextSpan() {
    return this.rawTextSpan;
  }

  /**
   * Location of this section in the raw text.
   * 
   * NOTE: This text span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public Section setRawTextSpan(edu.jhu.hlt.concrete.TextSpan rawTextSpan) {
    this.rawTextSpan = rawTextSpan;
    return this;
  }

  public void unsetRawTextSpan() {
    this.rawTextSpan = null;
  }

  /** Returns true if field rawTextSpan is set (has been assigned a value) and false otherwise */
  public boolean isSetRawTextSpan() {
    return this.rawTextSpan != null;
  }

  public void setRawTextSpanIsSet(boolean value) {
    if (!value) {
      this.rawTextSpan = null;
    }
  }

  /**
   * Location of this section in the original audio.
   * 
   * NOTE: This span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public edu.jhu.hlt.concrete.AudioSpan getAudioSpan() {
    return this.audioSpan;
  }

  /**
   * Location of this section in the original audio.
   * 
   * NOTE: This span represents a best guess, or 'provenance':
   * it cannot be guaranteed that this text span matches the _exact_
   * text of the original document, but is the annotation's best
   * effort at such a representation.
   */
  public Section setAudioSpan(edu.jhu.hlt.concrete.AudioSpan audioSpan) {
    this.audioSpan = audioSpan;
    return this;
  }

  public void unsetAudioSpan() {
    this.audioSpan = null;
  }

  /** Returns true if field audioSpan is set (has been assigned a value) and false otherwise */
  public boolean isSetAudioSpan() {
    return this.audioSpan != null;
  }

  public void setAudioSpanIsSet(boolean value) {
    if (!value) {
      this.audioSpan = null;
    }
  }

  /**
   * A short, sometimes corpus-specific term characterizing the nature
   * of the section; may change in a future version of concrete.  This
   * often acts as a coarse-grained descriptor that is used for
   * filtering.  For example, Gigaword uses the section kind "passage"
   * to distinguish content-bearing paragraphs in the body of an
   * article from other paragraphs, such as the headline and dateline.
   */
  public String getKind() {
    return this.kind;
  }

  /**
   * A short, sometimes corpus-specific term characterizing the nature
   * of the section; may change in a future version of concrete.  This
   * often acts as a coarse-grained descriptor that is used for
   * filtering.  For example, Gigaword uses the section kind "passage"
   * to distinguish content-bearing paragraphs in the body of an
   * article from other paragraphs, such as the headline and dateline.
   */
  public Section setKind(String kind) {
    this.kind = kind;
    return this;
  }

  public void unsetKind() {
    this.kind = null;
  }

  /** Returns true if field kind is set (has been assigned a value) and false otherwise */
  public boolean isSetKind() {
    return this.kind != null;
  }

  public void setKindIsSet(boolean value) {
    if (!value) {
      this.kind = null;
    }
  }

  /**
   * The name of the section. For example, a title of a section on
   * Wikipedia.
   */
  public String getLabel() {
    return this.label;
  }

  /**
   * The name of the section. For example, a title of a section on
   * Wikipedia.
   */
  public Section setLabel(String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  public int getNumberListSize() {
    return (this.numberList == null) ? 0 : this.numberList.size();
  }

  public java.util.Iterator<Integer> getNumberListIterator() {
    return (this.numberList == null) ? null : this.numberList.iterator();
  }

  public void addToNumberList(int elem) {
    if (this.numberList == null) {
      this.numberList = new ArrayList<Integer>();
    }
    this.numberList.add(elem);
  }

  /**
   * Position within the communication with respect to other Sections:
   * The section number, E.g., 3, or 3.1, or 3.1.2, etc. Aimed at
   * Communications with content organized in a hierarchy, such as a Book
   * with multiple chapters, then sections, then paragraphs. Or even a
   * dense Wikipedia page with subsections. Sections should still be
   * arranged linearly, where reading these numbers should not be required
   * to get a start-to-finish enumeration of the Communication's content.
   */
  public List<Integer> getNumberList() {
    return this.numberList;
  }

  /**
   * Position within the communication with respect to other Sections:
   * The section number, E.g., 3, or 3.1, or 3.1.2, etc. Aimed at
   * Communications with content organized in a hierarchy, such as a Book
   * with multiple chapters, then sections, then paragraphs. Or even a
   * dense Wikipedia page with subsections. Sections should still be
   * arranged linearly, where reading these numbers should not be required
   * to get a start-to-finish enumeration of the Communication's content.
   */
  public Section setNumberList(List<Integer> numberList) {
    this.numberList = numberList;
    return this;
  }

  public void unsetNumberList() {
    this.numberList = null;
  }

  /** Returns true if field numberList is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberList() {
    return this.numberList != null;
  }

  public void setNumberListIsSet(boolean value) {
    if (!value) {
      this.numberList = null;
    }
  }

  public int getLidListSize() {
    return (this.lidList == null) ? 0 : this.lidList.size();
  }

  public java.util.Iterator<edu.jhu.hlt.concrete.LanguageIdentification> getLidListIterator() {
    return (this.lidList == null) ? null : this.lidList.iterator();
  }

  public void addToLidList(edu.jhu.hlt.concrete.LanguageIdentification elem) {
    if (this.lidList == null) {
      this.lidList = new ArrayList<edu.jhu.hlt.concrete.LanguageIdentification>();
    }
    this.lidList.add(elem);
  }

  /**
   * An optional field to be used for multi-language documents.
   * 
   * This field should be populated when a section is inside of
   * a document that contains multiple languages.
   * 
   * Minimally, each block of text in one language should be it's own
   * section. For example, if a paragraph is in English and the
   * paragraph afterwards is in French, these should be separated into
   * two different sections, allowing language-specific analytics to
   * run on appropriate sections.
   */
  public List<edu.jhu.hlt.concrete.LanguageIdentification> getLidList() {
    return this.lidList;
  }

  /**
   * An optional field to be used for multi-language documents.
   * 
   * This field should be populated when a section is inside of
   * a document that contains multiple languages.
   * 
   * Minimally, each block of text in one language should be it's own
   * section. For example, if a paragraph is in English and the
   * paragraph afterwards is in French, these should be separated into
   * two different sections, allowing language-specific analytics to
   * run on appropriate sections.
   */
  public Section setLidList(List<edu.jhu.hlt.concrete.LanguageIdentification> lidList) {
    this.lidList = lidList;
    return this;
  }

  public void unsetLidList() {
    this.lidList = null;
  }

  /** Returns true if field lidList is set (has been assigned a value) and false otherwise */
  public boolean isSetLidList() {
    return this.lidList != null;
  }

  public void setLidListIsSet(boolean value) {
    if (!value) {
      this.lidList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((edu.jhu.hlt.concrete.UUID)value);
      }
      break;

    case SENTENCE_LIST:
      if (value == null) {
        unsetSentenceList();
      } else {
        setSentenceList((List<Sentence>)value);
      }
      break;

    case TEXT_SPAN:
      if (value == null) {
        unsetTextSpan();
      } else {
        setTextSpan((edu.jhu.hlt.concrete.TextSpan)value);
      }
      break;

    case RAW_TEXT_SPAN:
      if (value == null) {
        unsetRawTextSpan();
      } else {
        setRawTextSpan((edu.jhu.hlt.concrete.TextSpan)value);
      }
      break;

    case AUDIO_SPAN:
      if (value == null) {
        unsetAudioSpan();
      } else {
        setAudioSpan((edu.jhu.hlt.concrete.AudioSpan)value);
      }
      break;

    case KIND:
      if (value == null) {
        unsetKind();
      } else {
        setKind((String)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((String)value);
      }
      break;

    case NUMBER_LIST:
      if (value == null) {
        unsetNumberList();
      } else {
        setNumberList((List<Integer>)value);
      }
      break;

    case LID_LIST:
      if (value == null) {
        unsetLidList();
      } else {
        setLidList((List<edu.jhu.hlt.concrete.LanguageIdentification>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case SENTENCE_LIST:
      return getSentenceList();

    case TEXT_SPAN:
      return getTextSpan();

    case RAW_TEXT_SPAN:
      return getRawTextSpan();

    case AUDIO_SPAN:
      return getAudioSpan();

    case KIND:
      return getKind();

    case LABEL:
      return getLabel();

    case NUMBER_LIST:
      return getNumberList();

    case LID_LIST:
      return getLidList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case SENTENCE_LIST:
      return isSetSentenceList();
    case TEXT_SPAN:
      return isSetTextSpan();
    case RAW_TEXT_SPAN:
      return isSetRawTextSpan();
    case AUDIO_SPAN:
      return isSetAudioSpan();
    case KIND:
      return isSetKind();
    case LABEL:
      return isSetLabel();
    case NUMBER_LIST:
      return isSetNumberList();
    case LID_LIST:
      return isSetLidList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Section)
      return this.equals((Section)that);
    return false;
  }

  public boolean equals(Section that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_sentenceList = true && this.isSetSentenceList();
    boolean that_present_sentenceList = true && that.isSetSentenceList();
    if (this_present_sentenceList || that_present_sentenceList) {
      if (!(this_present_sentenceList && that_present_sentenceList))
        return false;
      if (!this.sentenceList.equals(that.sentenceList))
        return false;
    }

    boolean this_present_textSpan = true && this.isSetTextSpan();
    boolean that_present_textSpan = true && that.isSetTextSpan();
    if (this_present_textSpan || that_present_textSpan) {
      if (!(this_present_textSpan && that_present_textSpan))
        return false;
      if (!this.textSpan.equals(that.textSpan))
        return false;
    }

    boolean this_present_rawTextSpan = true && this.isSetRawTextSpan();
    boolean that_present_rawTextSpan = true && that.isSetRawTextSpan();
    if (this_present_rawTextSpan || that_present_rawTextSpan) {
      if (!(this_present_rawTextSpan && that_present_rawTextSpan))
        return false;
      if (!this.rawTextSpan.equals(that.rawTextSpan))
        return false;
    }

    boolean this_present_audioSpan = true && this.isSetAudioSpan();
    boolean that_present_audioSpan = true && that.isSetAudioSpan();
    if (this_present_audioSpan || that_present_audioSpan) {
      if (!(this_present_audioSpan && that_present_audioSpan))
        return false;
      if (!this.audioSpan.equals(that.audioSpan))
        return false;
    }

    boolean this_present_kind = true && this.isSetKind();
    boolean that_present_kind = true && that.isSetKind();
    if (this_present_kind || that_present_kind) {
      if (!(this_present_kind && that_present_kind))
        return false;
      if (!this.kind.equals(that.kind))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_numberList = true && this.isSetNumberList();
    boolean that_present_numberList = true && that.isSetNumberList();
    if (this_present_numberList || that_present_numberList) {
      if (!(this_present_numberList && that_present_numberList))
        return false;
      if (!this.numberList.equals(that.numberList))
        return false;
    }

    boolean this_present_lidList = true && this.isSetLidList();
    boolean that_present_lidList = true && that.isSetLidList();
    if (this_present_lidList || that_present_lidList) {
      if (!(this_present_lidList && that_present_lidList))
        return false;
      if (!this.lidList.equals(that.lidList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_uuid = true && (isSetUuid());
    list.add(present_uuid);
    if (present_uuid)
      list.add(uuid);

    boolean present_sentenceList = true && (isSetSentenceList());
    list.add(present_sentenceList);
    if (present_sentenceList)
      list.add(sentenceList);

    boolean present_textSpan = true && (isSetTextSpan());
    list.add(present_textSpan);
    if (present_textSpan)
      list.add(textSpan);

    boolean present_rawTextSpan = true && (isSetRawTextSpan());
    list.add(present_rawTextSpan);
    if (present_rawTextSpan)
      list.add(rawTextSpan);

    boolean present_audioSpan = true && (isSetAudioSpan());
    list.add(present_audioSpan);
    if (present_audioSpan)
      list.add(audioSpan);

    boolean present_kind = true && (isSetKind());
    list.add(present_kind);
    if (present_kind)
      list.add(kind);

    boolean present_label = true && (isSetLabel());
    list.add(present_label);
    if (present_label)
      list.add(label);

    boolean present_numberList = true && (isSetNumberList());
    list.add(present_numberList);
    if (present_numberList)
      list.add(numberList);

    boolean present_lidList = true && (isSetLidList());
    list.add(present_lidList);
    if (present_lidList)
      list.add(lidList);

    return list.hashCode();
  }

  @Override
  public int compareTo(Section other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentenceList()).compareTo(other.isSetSentenceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentenceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentenceList, other.sentenceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTextSpan()).compareTo(other.isSetTextSpan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextSpan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.textSpan, other.textSpan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRawTextSpan()).compareTo(other.isSetRawTextSpan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRawTextSpan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rawTextSpan, other.rawTextSpan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudioSpan()).compareTo(other.isSetAudioSpan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudioSpan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audioSpan, other.audioSpan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKind()).compareTo(other.isSetKind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kind, other.kind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumberList()).compareTo(other.isSetNumberList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberList, other.numberList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLidList()).compareTo(other.isSetLidList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLidList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lidList, other.lidList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Section(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (isSetSentenceList()) {
      if (!first) sb.append(", ");
      sb.append("sentenceList:");
      if (this.sentenceList == null) {
        sb.append("null");
      } else {
        sb.append(this.sentenceList);
      }
      first = false;
    }
    if (isSetTextSpan()) {
      if (!first) sb.append(", ");
      sb.append("textSpan:");
      if (this.textSpan == null) {
        sb.append("null");
      } else {
        sb.append(this.textSpan);
      }
      first = false;
    }
    if (isSetRawTextSpan()) {
      if (!first) sb.append(", ");
      sb.append("rawTextSpan:");
      if (this.rawTextSpan == null) {
        sb.append("null");
      } else {
        sb.append(this.rawTextSpan);
      }
      first = false;
    }
    if (isSetAudioSpan()) {
      if (!first) sb.append(", ");
      sb.append("audioSpan:");
      if (this.audioSpan == null) {
        sb.append("null");
      } else {
        sb.append(this.audioSpan);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("kind:");
    if (this.kind == null) {
      sb.append("null");
    } else {
      sb.append(this.kind);
    }
    first = false;
    if (isSetLabel()) {
      if (!first) sb.append(", ");
      sb.append("label:");
      if (this.label == null) {
        sb.append("null");
      } else {
        sb.append(this.label);
      }
      first = false;
    }
    if (isSetNumberList()) {
      if (!first) sb.append(", ");
      sb.append("numberList:");
      if (this.numberList == null) {
        sb.append("null");
      } else {
        sb.append(this.numberList);
      }
      first = false;
    }
    if (isSetLidList()) {
      if (!first) sb.append(", ");
      sb.append("lidList:");
      if (this.lidList == null) {
        sb.append("null");
      } else {
        sb.append(this.lidList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuid' was not present! Struct: " + toString());
    }
    if (kind == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'kind' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (uuid != null) {
      uuid.validate();
    }
    if (textSpan != null) {
      textSpan.validate();
    }
    if (rawTextSpan != null) {
      rawTextSpan.validate();
    }
    if (audioSpan != null) {
      audioSpan.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SectionStandardSchemeFactory implements SchemeFactory {
    public SectionStandardScheme getScheme() {
      return new SectionStandardScheme();
    }
  }

  private static class SectionStandardScheme extends StandardScheme<Section> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Section struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.uuid = new edu.jhu.hlt.concrete.UUID();
              struct.uuid.read(iprot);
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENTENCE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.sentenceList = new ArrayList<Sentence>(_list112.size);
                Sentence _elem113;
                for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                {
                  _elem113 = new Sentence();
                  _elem113.read(iprot);
                  struct.sentenceList.add(_elem113);
                }
                iprot.readListEnd();
              }
              struct.setSentenceListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEXT_SPAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.textSpan = new edu.jhu.hlt.concrete.TextSpan();
              struct.textSpan.read(iprot);
              struct.setTextSpanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RAW_TEXT_SPAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rawTextSpan = new edu.jhu.hlt.concrete.TextSpan();
              struct.rawTextSpan.read(iprot);
              struct.setRawTextSpanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AUDIO_SPAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.audioSpan = new edu.jhu.hlt.concrete.AudioSpan();
              struct.audioSpan.read(iprot);
              struct.setAudioSpanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // KIND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kind = iprot.readString();
              struct.setKindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUMBER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                struct.numberList = new ArrayList<Integer>(_list115.size);
                int _elem116;
                for (int _i117 = 0; _i117 < _list115.size; ++_i117)
                {
                  _elem116 = iprot.readI32();
                  struct.numberList.add(_elem116);
                }
                iprot.readListEnd();
              }
              struct.setNumberListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                struct.lidList = new ArrayList<edu.jhu.hlt.concrete.LanguageIdentification>(_list118.size);
                edu.jhu.hlt.concrete.LanguageIdentification _elem119;
                for (int _i120 = 0; _i120 < _list118.size; ++_i120)
                {
                  _elem119 = new edu.jhu.hlt.concrete.LanguageIdentification();
                  _elem119.read(iprot);
                  struct.lidList.add(_elem119);
                }
                iprot.readListEnd();
              }
              struct.setLidListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Section struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        struct.uuid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.sentenceList != null) {
        if (struct.isSetSentenceList()) {
          oprot.writeFieldBegin(SENTENCE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sentenceList.size()));
            for (Sentence _iter121 : struct.sentenceList)
            {
              _iter121.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.textSpan != null) {
        if (struct.isSetTextSpan()) {
          oprot.writeFieldBegin(TEXT_SPAN_FIELD_DESC);
          struct.textSpan.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rawTextSpan != null) {
        if (struct.isSetRawTextSpan()) {
          oprot.writeFieldBegin(RAW_TEXT_SPAN_FIELD_DESC);
          struct.rawTextSpan.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kind != null) {
        oprot.writeFieldBegin(KIND_FIELD_DESC);
        oprot.writeString(struct.kind);
        oprot.writeFieldEnd();
      }
      if (struct.label != null) {
        if (struct.isSetLabel()) {
          oprot.writeFieldBegin(LABEL_FIELD_DESC);
          oprot.writeString(struct.label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.numberList != null) {
        if (struct.isSetNumberList()) {
          oprot.writeFieldBegin(NUMBER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.numberList.size()));
            for (int _iter122 : struct.numberList)
            {
              oprot.writeI32(_iter122);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.lidList != null) {
        if (struct.isSetLidList()) {
          oprot.writeFieldBegin(LID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lidList.size()));
            for (edu.jhu.hlt.concrete.LanguageIdentification _iter123 : struct.lidList)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.audioSpan != null) {
        if (struct.isSetAudioSpan()) {
          oprot.writeFieldBegin(AUDIO_SPAN_FIELD_DESC);
          struct.audioSpan.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SectionTupleSchemeFactory implements SchemeFactory {
    public SectionTupleScheme getScheme() {
      return new SectionTupleScheme();
    }
  }

  private static class SectionTupleScheme extends TupleScheme<Section> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Section struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.uuid.write(oprot);
      oprot.writeString(struct.kind);
      BitSet optionals = new BitSet();
      if (struct.isSetSentenceList()) {
        optionals.set(0);
      }
      if (struct.isSetTextSpan()) {
        optionals.set(1);
      }
      if (struct.isSetRawTextSpan()) {
        optionals.set(2);
      }
      if (struct.isSetAudioSpan()) {
        optionals.set(3);
      }
      if (struct.isSetLabel()) {
        optionals.set(4);
      }
      if (struct.isSetNumberList()) {
        optionals.set(5);
      }
      if (struct.isSetLidList()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSentenceList()) {
        {
          oprot.writeI32(struct.sentenceList.size());
          for (Sentence _iter124 : struct.sentenceList)
          {
            _iter124.write(oprot);
          }
        }
      }
      if (struct.isSetTextSpan()) {
        struct.textSpan.write(oprot);
      }
      if (struct.isSetRawTextSpan()) {
        struct.rawTextSpan.write(oprot);
      }
      if (struct.isSetAudioSpan()) {
        struct.audioSpan.write(oprot);
      }
      if (struct.isSetLabel()) {
        oprot.writeString(struct.label);
      }
      if (struct.isSetNumberList()) {
        {
          oprot.writeI32(struct.numberList.size());
          for (int _iter125 : struct.numberList)
          {
            oprot.writeI32(_iter125);
          }
        }
      }
      if (struct.isSetLidList()) {
        {
          oprot.writeI32(struct.lidList.size());
          for (edu.jhu.hlt.concrete.LanguageIdentification _iter126 : struct.lidList)
          {
            _iter126.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Section struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuid = new edu.jhu.hlt.concrete.UUID();
      struct.uuid.read(iprot);
      struct.setUuidIsSet(true);
      struct.kind = iprot.readString();
      struct.setKindIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sentenceList = new ArrayList<Sentence>(_list127.size);
          Sentence _elem128;
          for (int _i129 = 0; _i129 < _list127.size; ++_i129)
          {
            _elem128 = new Sentence();
            _elem128.read(iprot);
            struct.sentenceList.add(_elem128);
          }
        }
        struct.setSentenceListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.textSpan = new edu.jhu.hlt.concrete.TextSpan();
        struct.textSpan.read(iprot);
        struct.setTextSpanIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rawTextSpan = new edu.jhu.hlt.concrete.TextSpan();
        struct.rawTextSpan.read(iprot);
        struct.setRawTextSpanIsSet(true);
      }
      if (incoming.get(3)) {
        struct.audioSpan = new edu.jhu.hlt.concrete.AudioSpan();
        struct.audioSpan.read(iprot);
        struct.setAudioSpanIsSet(true);
      }
      if (incoming.get(4)) {
        struct.label = iprot.readString();
        struct.setLabelIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list130 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.numberList = new ArrayList<Integer>(_list130.size);
          int _elem131;
          for (int _i132 = 0; _i132 < _list130.size; ++_i132)
          {
            _elem131 = iprot.readI32();
            struct.numberList.add(_elem131);
          }
        }
        struct.setNumberListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lidList = new ArrayList<edu.jhu.hlt.concrete.LanguageIdentification>(_list133.size);
          edu.jhu.hlt.concrete.LanguageIdentification _elem134;
          for (int _i135 = 0; _i135 < _list133.size; ++_i135)
          {
            _elem134 = new edu.jhu.hlt.concrete.LanguageIdentification();
            _elem134.read(iprot);
            struct.lidList.add(_elem134);
          }
        }
        struct.setLidListIsSet(true);
      }
    }
  }

}

